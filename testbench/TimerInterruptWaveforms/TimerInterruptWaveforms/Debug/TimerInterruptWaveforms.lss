
TimerInterruptWaveforms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007d4  00800100  0000032c  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008008d4  008008d4  00000b94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb8  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b4  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e2  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000025a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053d  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002d06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	18 e0       	ldi	r17, 0x08	; 8
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e2       	ldi	r30, 0x2C	; 44
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 3d       	cpi	r26, 0xD4	; 212
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	28 e0       	ldi	r18, 0x08	; 8
  d8:	a4 ed       	ldi	r26, 0xD4	; 212
  da:	b8 e0       	ldi	r27, 0x08	; 8
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 3d       	cpi	r26, 0xDC	; 220
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  ea:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <I2C_Init>:
};


void I2C_Init(void) {
	// Set the bit rate for 400 kHz I2C
	TWSR1 = 0x00;  // Prescaler set to 1
  f2:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	TWBR1 = ((F_CPU / SCL_CLOCK) - 16) / 2;  // Set bit rate register for 400kHz
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
  fc:	08 95       	ret

000000fe <I2C_Start>:
}
// I2C Start condition
void I2C_Start(void) {
	TWCR1 = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);  // Send start condition
  fe:	84 ea       	ldi	r24, 0xA4	; 164
 100:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
 104:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <I2C_Start+0x6>
}
 10c:	08 95       	ret

0000010e <I2C_Stop>:

// I2C Stop condition
void I2C_Stop(void) {
	TWCR1 = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);  // Send stop condition
 10e:	84 e9       	ldi	r24, 0x94	; 148
 110:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 114:	08 95       	ret

00000116 <I2C_Write>:
}

// I2C Write byte
void I2C_Write(uint8_t data) {
	TWDR1 = data;  // Load data to data register
 116:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);  // Start transmission
 11a:	84 e8       	ldi	r24, 0x84	; 132
 11c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
 120:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 124:	88 23       	and	r24, r24
 126:	e4 f7       	brge	.-8      	; 0x120 <I2C_Write+0xa>
}
 128:	08 95       	ret

0000012a <MCP4725_SetValue>:

void MCP4725_SetValue(uint16_t value) {
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	c8 2f       	mov	r28, r24
 130:	d9 2f       	mov	r29, r25
	I2C_Start();
 132:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Start>
	I2C_Write(MCP4725_ADDR << 1);  // Write address with write bit (0)
 136:	84 ec       	ldi	r24, 0xC4	; 196
 138:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Write((value >> 8) & 0x0F);  // Send upper data bits (D11-D8)
 13c:	8d 2f       	mov	r24, r29
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Write(value & 0xFF);  // Send lower data bits (D7-D0)
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Stop();
 14a:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Stop>
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <main>:
	int timer = period *(16000000.0 / 256.0) - 1;
	
	
	
	
	I2C_Init();
 154:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Init>
	TCCR1B |= (1 << WGM12);													//CTC Mode
 158:	e1 e8       	ldi	r30, 0x81	; 129
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 162:	ef e6       	ldi	r30, 0x6F	; 111
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24

	if (waveform_id ==0){
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	89 2b       	or	r24, r25
 176:	61 f4       	brne	.+24     	; 0x190 <main+0x3c>
		OCR1A = timer;  // (16e6 / (64 * 1000)) - 1								this should be 5 ms
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 180:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		TCCR1B |= (1 << CS12);									// Set prescaler to 256 and start the timer
 184:	e1 e8       	ldi	r30, 0x81	; 129
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	80 83       	st	Z, r24
 18e:	1d c0       	rjmp	.+58     	; 0x1ca <main+0x76>
	}
	else if (waveform_id ==1){
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	61 f4       	brne	.+24     	; 0x1b4 <main+0x60>
		OCR1A = 3;
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		TCCR1B |= (1 << CS12); //prescale to 64
 1a8:	e1 e8       	ldi	r30, 0x81	; 129
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	80 83       	st	Z, r24
 1b2:	0b c0       	rjmp	.+22     	; 0x1ca <main+0x76>
	}
	else{
		OCR1A = 50;  // (16e6 / (64 * 1000)) - 1								this should be 5 ms
 1b4:	82 e3       	ldi	r24, 0x32	; 50
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		TCCR1B |= (1 << CS12);
 1c0:	e1 e8       	ldi	r30, 0x81	; 129
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	80 83       	st	Z, r24
	
	
	

	// Enable global interrupts
	sei();
 1ca:	78 94       	sei
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0x78>

000001ce <__vector_11>:
}

uint16_t i = 0;
uint16_t dac_value_sine = 0;

ISR(TIMER1_COMPA_vect) {
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	switch(waveform_id){
 1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	91 05       	cpc	r25, r1
 1fc:	31 f1       	breq	.+76     	; 0x24a <__vector_11+0x7c>
 1fe:	20 f0       	brcs	.+8      	; 0x208 <__vector_11+0x3a>
 200:	02 97       	sbiw	r24, 0x02	; 2
 202:	09 f4       	brne	.+2      	; 0x206 <__vector_11+0x38>
 204:	60 c0       	rjmp	.+192    	; 0x2c6 <__vector_11+0xf8>
 206:	7f c0       	rjmp	.+254    	; 0x306 <__vector_11+0x138>
		case 0:
		if(dac_state ==0){
 208:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <dac_state>
 20c:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <dac_state+0x1>
 210:	89 2b       	or	r24, r25
 212:	59 f4       	brne	.+22     	; 0x22a <__vector_11+0x5c>
			MCP4725_SetValue(4095);
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	9f e0       	ldi	r25, 0x0F	; 15
 218:	0e 94 95 00 	call	0x12a	; 0x12a <MCP4725_SetValue>
			dac_state = 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <dac_state+0x1>
 224:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <dac_state>
 228:	6e c0       	rjmp	.+220    	; 0x306 <__vector_11+0x138>
		}
		else if(dac_state ==1){
 22a:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <dac_state>
 22e:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <dac_state+0x1>
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	09 f0       	breq	.+2      	; 0x238 <__vector_11+0x6a>
 236:	67 c0       	rjmp	.+206    	; 0x306 <__vector_11+0x138>
			MCP4725_SetValue(0);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 95 00 	call	0x12a	; 0x12a <MCP4725_SetValue>
			dac_state = 0;
 240:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <dac_state+0x1>
 244:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <dac_state>
 248:	5e c0       	rjmp	.+188    	; 0x306 <__vector_11+0x138>
			
		}
		break;
		
		case 1:
		MCP4725_SetValue(dac_value);
 24a:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <dac_value>
 24e:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <dac_value+0x1>
 252:	0e 94 95 00 	call	0x12a	; 0x12a <MCP4725_SetValue>
		if (direction) {
 256:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction>
 25a:	88 23       	and	r24, r24
 25c:	d9 f0       	breq	.+54     	; 0x294 <__vector_11+0xc6>
			dac_value += 1000;  // Increment value while rising
 25e:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <dac_value>
 262:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <dac_value+0x1>
 266:	88 51       	subi	r24, 0x18	; 24
 268:	9c 4f       	sbci	r25, 0xFC	; 252
 26a:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <dac_value+0x1>
 26e:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <dac_value>
			if (dac_value >=  4095) {  // If the peak is reached, start falling
 272:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <dac_value>
 276:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <dac_value+0x1>
 27a:	8f 3f       	cpi	r24, 0xFF	; 255
 27c:	9f 40       	sbci	r25, 0x0F	; 15
 27e:	0c f4       	brge	.+2      	; 0x282 <__vector_11+0xb4>
 280:	42 c0       	rjmp	.+132    	; 0x306 <__vector_11+0x138>
				direction = 0;  // Switch to falling
 282:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction>
				dac_value = 4095;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	9f e0       	ldi	r25, 0x0F	; 15
 28a:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <dac_value+0x1>
 28e:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <dac_value>
 292:	39 c0       	rjmp	.+114    	; 0x306 <__vector_11+0x138>
				
			}
		}
		else {
			dac_value -= 1000;  // Decrement value while falling
 294:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <dac_value>
 298:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <dac_value+0x1>
 29c:	88 5e       	subi	r24, 0xE8	; 232
 29e:	93 40       	sbci	r25, 0x03	; 3
 2a0:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <dac_value+0x1>
 2a4:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <dac_value>
			if (dac_value <= 0) {  // If the bottom is reached, start rising
 2a8:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <dac_value>
 2ac:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <dac_value+0x1>
 2b0:	18 16       	cp	r1, r24
 2b2:	19 06       	cpc	r1, r25
 2b4:	44 f1       	brlt	.+80     	; 0x306 <__vector_11+0x138>
				direction = 1;  // Switch to rising
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction>
				dac_value = 0;
 2bc:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <dac_value+0x1>
 2c0:	10 92 d8 08 	sts	0x08D8, r1	; 0x8008d8 <dac_value>
 2c4:	20 c0       	rjmp	.+64     	; 0x306 <__vector_11+0x138>
		break;
		
		case 2:
			
			
			dac_value_sine = sine_lut[i];
 2c6:	e0 91 d6 08 	lds	r30, 0x08D6	; 0x8008d6 <i>
 2ca:	f0 91 d7 08 	lds	r31, 0x08D7	; 0x8008d7 <i+0x1>
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	ed 5f       	subi	r30, 0xFD	; 253
 2d4:	fe 4f       	sbci	r31, 0xFE	; 254
 2d6:	80 81       	ld	r24, Z
 2d8:	91 81       	ldd	r25, Z+1	; 0x01
 2da:	90 93 d5 08 	sts	0x08D5, r25	; 0x8008d5 <__data_end+0x1>
 2de:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <__data_end>
			MCP4725_SetValue(dac_value_sine);
 2e2:	0e 94 95 00 	call	0x12a	; 0x12a <MCP4725_SetValue>
			i += 50;
 2e6:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <i>
 2ea:	90 91 d7 08 	lds	r25, 0x08D7	; 0x8008d7 <i+0x1>
 2ee:	c2 96       	adiw	r24, 0x32	; 50
 2f0:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <i+0x1>
 2f4:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <i>
			if (i > 999){
 2f8:	88 3e       	cpi	r24, 0xE8	; 232
 2fa:	93 40       	sbci	r25, 0x03	; 3
 2fc:	20 f0       	brcs	.+8      	; 0x306 <__vector_11+0x138>
				i =0;
 2fe:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <i+0x1>
 302:	10 92 d6 08 	sts	0x08D6, r1	; 0x8008d6 <i>
			}
			
		
		break;
	}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
