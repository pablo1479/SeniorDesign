
nco.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800300  00800300  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae6  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000987  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034c  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b0  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	13 e0       	ldi	r17, 0x03	; 3
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ef       	ldi	r30, 0xFA	; 250
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	23 e0       	ldi	r18, 0x03	; 3
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b3 e0       	ldi	r27, 0x03	; 3
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a1 30       	cpi	r26, 0x01	; 1
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  ea:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <I2C_Init>:
#define F_CPU 16000000UL
#define SCL_CLOCK 400000L
#define MCP4725_ADDR 0x62
void I2C_Init(void) {
	// Set the bit rate for 400 kHz I2C
	TWSR1 = 0x00;  // Prescaler set to 1
  f2:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	TWBR1 = ((F_CPU / SCL_CLOCK) - 16) / 2;  // Set bit rate register for 400kHz
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
  fc:	08 95       	ret

000000fe <I2C_Start>:
}

void I2C_Start(void) {
	TWCR1 = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);  // Send start condition
  fe:	84 ea       	ldi	r24, 0xA4	; 164
 100:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
 104:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <I2C_Start+0x6>
}
 10c:	08 95       	ret

0000010e <I2C_Stop>:

// I2C Stop condition
void I2C_Stop(void) {
	TWCR1 = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);  // Send stop condition
 10e:	84 e9       	ldi	r24, 0x94	; 148
 110:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 114:	08 95       	ret

00000116 <I2C_Write>:
}

// I2C Write byte
void I2C_Write(uint8_t data) {
	TWDR1 = data;  // Load data to data register
 116:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);  // Start transmission
 11a:	84 e8       	ldi	r24, 0x84	; 132
 11c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
 120:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 124:	88 23       	and	r24, r24
 126:	e4 f7       	brge	.-8      	; 0x120 <I2C_Write+0xa>
}
 128:	08 95       	ret

0000012a <MCP4725_SetValue>:

void MCP4725_SetValue(uint16_t value) {
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	c8 2f       	mov	r28, r24
 130:	d9 2f       	mov	r29, r25
	I2C_Start();
 132:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Start>
	I2C_Write(MCP4725_ADDR << 1);  // Write address with write bit (0)
 136:	84 ec       	ldi	r24, 0xC4	; 196
 138:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Write((value >> 8) & 0x0F);  // Send upper data bits (D11-D8)
 13c:	8d 2f       	mov	r24, r29
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Write(value & 0xFF);  // Send lower data bits (D7-D0)
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Stop();
 14a:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Stop>
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <main>:
									910, 952, 995, 1038, 1082, 1127, 1172, 1217, 1264, 1310, 1357, 1405, 1453, 1501, 1550, 1598, 
									1648, 1697, 1747, 1796, 1846, 1896, 1947, 1997};
int main(void)
{
    /* Replace with your application code */
	I2C_Init();
 154:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Init>
	TCCR1B |= (1 << WGM12);													//CTC Mode
 158:	e1 e8       	ldi	r30, 0x81	; 129
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 162:	af e6       	ldi	r26, 0x6F	; 111
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	8c 91       	ld	r24, X
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	8c 93       	st	X, r24
	
	TCCR1B |= (1 << CS12);				// prescaler 256
 16c:	80 81       	ld	r24, Z
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	80 83       	st	Z, r24
	OCR1A = 31;  // (16e6 / (64 * 1000)) - 1								this should be 5 ms
 172:	8f e1       	ldi	r24, 0x1F	; 31
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 17a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1 << CS12);
 17e:	80 81       	ld	r24, Z
 180:	84 60       	ori	r24, 0x04	; 4
 182:	80 83       	st	Z, r24
	sei();
 184:	78 94       	sei
 186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x32>

00000188 <__vector_11>:
    {
    }
}

volatile uint8_t i = 0;
ISR(TIMER1_COMPA_vect) {
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	MCP4725_SetValue(i);
 1aa:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 95 00 	call	0x12a	; 0x12a <MCP4725_SetValue>
	MCP4725_SetValue(sine_lut[i]);
 1b4:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <__data_end>
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	e0 50       	subi	r30, 0x00	; 0
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 81       	ld	r24, Z
 1c4:	91 81       	ldd	r25, Z+1	; 0x01
 1c6:	0e 94 95 00 	call	0x12a	; 0x12a <MCP4725_SetValue>
	i +=1;
 1ca:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
