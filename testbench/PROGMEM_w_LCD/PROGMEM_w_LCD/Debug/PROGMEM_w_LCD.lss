
PROGMEM_w_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000050c  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bec  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c73  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b80  00000000  00000000  00002fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000374  00000000  00000000  00003b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000083a  00000000  00000000  00003eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ffc  00000000  00000000  000046f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000056ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e0       	ldi	r30, 0x0C	; 12
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 30       	cpi	r26, 0x0C	; 12
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 1c 02 	call	0x438	; 0x438 <main>
  da:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <i2c_master_init>:
	}
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
  e2:	9b 01       	movw	r18, r22
  e4:	ac 01       	movw	r20, r24
  e6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	74 e2       	ldi	r23, 0x24	; 36
  ee:	84 ef       	ldi	r24, 0xF4	; 244
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__udivmodsi4>
  f6:	da 01       	movw	r26, r20
  f8:	c9 01       	movw	r24, r18
  fa:	40 97       	sbiw	r24, 0x10	; 16
  fc:	a1 09       	sbc	r26, r1
  fe:	b1 09       	sbc	r27, r1
 100:	b6 95       	lsr	r27
 102:	a7 95       	ror	r26
 104:	97 95       	ror	r25
 106:	87 95       	ror	r24
 108:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 10c:	08 95       	ret

0000010e <i2c_master_start>:
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
 114:	94 ea       	ldi	r25, 0xA4	; 164
 116:	90 83       	st	Z, r25
 118:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	99 23       	and	r25, r25
 11e:	e4 f7       	brge	.-8      	; 0x118 <i2c_master_start+0xa>
 120:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	98 7f       	andi	r25, 0xF8	; 248
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	11 f0       	breq	.+4      	; 0x12e <i2c_master_start+0x20>
 12a:	90 31       	cpi	r25, 0x10	; 16
 12c:	b1 f4       	brne	.+44     	; 0x15a <i2c_master_start+0x4c>
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	86 2b       	or	r24, r22
 136:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 140:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 144:	88 23       	and	r24, r24
 146:	e4 f7       	brge	.-8      	; 0x140 <i2c_master_start+0x32>
 148:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	88 31       	cpi	r24, 0x18	; 24
 150:	31 f0       	breq	.+12     	; 0x15e <i2c_master_start+0x50>
 152:	80 34       	cpi	r24, 0x40	; 64
 154:	31 f4       	brne	.+12     	; 0x162 <i2c_master_start+0x54>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	08 95       	ret
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret
 162:	84 e1       	ldi	r24, 0x14	; 20
 164:	08 95       	ret

00000166 <i2c_master_write>:
 166:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 170:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	88 23       	and	r24, r24
 176:	e4 f7       	brge	.-8      	; 0x170 <i2c_master_write+0xa>
 178:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	88 32       	cpi	r24, 0x28	; 40
 180:	11 f0       	breq	.+4      	; 0x186 <i2c_master_write+0x20>
 182:	85 e1       	ldi	r24, 0x15	; 21
 184:	08 95       	ret
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret

0000018a <i2c_master_stop>:
 18a:	84 e9       	ldi	r24, 0x94	; 148
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 190:	08 95       	ret

00000192 <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
 192:	cf 93       	push	r28
 194:	c6 2f       	mov	r28, r22
	uint8_t status = i2c_master_start(address, I2C_WRITE);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_master_start>
	if (status) return status;
 19c:	81 11       	cpse	r24, r1
 19e:	08 c0       	rjmp	.+16     	; 0x1b0 <i2c_master_sendByte+0x1e>

	status = i2c_master_write(data);
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 b3 00 	call	0x166	; 0x166 <i2c_master_write>
	if (status) return status;
 1a6:	81 11       	cpse	r24, r1
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <i2c_master_sendByte+0x1e>

	i2c_master_stop();
 1aa:	0e 94 c5 00 	call	0x18a	; 0x18a <i2c_master_stop>
	
	return I2C_STATUS_SUCCESS;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
};
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
 1b4:	fc 01       	movw	r30, r24
 1b6:	23 81       	ldd	r18, Z+3	; 0x03
 1b8:	62 2b       	or	r22, r18
 1ba:	80 81       	ld	r24, Z
 1bc:	0e 94 c9 00 	call	0x192	; 0x192 <i2c_master_sendByte>
 1c0:	08 95       	ret

000001c2 <lq_turnOnBacklight>:
 1c2:	28 e0       	ldi	r18, 0x08	; 8
 1c4:	fc 01       	movw	r30, r24
 1c6:	23 83       	std	Z+3, r18	; 0x03
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lq_transmitI2C>
 1ce:	08 95       	ret

000001d0 <lq_writeDevicePulse>:
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	8c 01       	movw	r16, r24
 1d8:	c6 2f       	mov	r28, r22
 1da:	64 60       	ori	r22, 0x04	; 4
 1dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lq_transmitI2C>
 1e0:	8a e0       	ldi	r24, 0x0A	; 10
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lq_writeDevicePulse+0x12>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lq_writeDevicePulse+0x18>
 1e8:	6c 2f       	mov	r22, r28
 1ea:	6b 7f       	andi	r22, 0xFB	; 251
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lq_transmitI2C>
 1f2:	87 ec       	ldi	r24, 0xC7	; 199
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lq_writeDevicePulse+0x26>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lq_writeDevicePulse+0x2c>
 1fc:	00 00       	nop
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	08 95       	ret

00000206 <lq_writeDevice4Bits>:
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
 20e:	16 2f       	mov	r17, r22
 210:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lq_transmitI2C>
 214:	61 2f       	mov	r22, r17
 216:	ce 01       	movw	r24, r28
 218:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lq_writeDevicePulse>
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	08 95       	ret

00000224 <lq_writeDeviceByte>:
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	8c 01       	movw	r16, r24
 230:	f4 2e       	mov	r15, r20
 232:	86 2f       	mov	r24, r22
 234:	80 7f       	andi	r24, 0xF0	; 240
 236:	90 e1       	ldi	r25, 0x10	; 16
 238:	69 9f       	mul	r22, r25
 23a:	e0 01       	movw	r28, r0
 23c:	11 24       	eor	r1, r1
 23e:	68 2f       	mov	r22, r24
 240:	64 2b       	or	r22, r20
 242:	c8 01       	movw	r24, r16
 244:	0e 94 03 01 	call	0x206	; 0x206 <lq_writeDevice4Bits>
 248:	6c 2f       	mov	r22, r28
 24a:	6f 29       	or	r22, r15
 24c:	c8 01       	movw	r24, r16
 24e:	0e 94 03 01 	call	0x206	; 0x206 <lq_writeDevice4Bits>
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	08 95       	ret

0000025e <lq_print>:
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	8c 01       	movw	r16, r24
 268:	eb 01       	movw	r28, r22
 26a:	68 81       	ld	r22, Y
 26c:	06 c0       	rjmp	.+12     	; 0x27a <lq_print+0x1c>
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	c8 01       	movw	r24, r16
 272:	0e 94 12 01 	call	0x224	; 0x224 <lq_writeDeviceByte>
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	68 81       	ld	r22, Y
 27a:	61 11       	cpse	r22, r1
 27c:	f8 cf       	rjmp	.-16     	; 0x26e <lq_print+0x10>
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <lq_sendCommand>:
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	0e 94 12 01 	call	0x224	; 0x224 <lq_writeDeviceByte>
 28e:	08 95       	ret

00000290 <lq_setCursor>:
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <lq_setCursor+0x6>
 296:	00 d0       	rcall	.+0      	; 0x298 <lq_setCursor+0x8>
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	19 82       	std	Y+1, r1	; 0x01
 29e:	20 e4       	ldi	r18, 0x40	; 64
 2a0:	2a 83       	std	Y+2, r18	; 0x02
 2a2:	24 e1       	ldi	r18, 0x14	; 20
 2a4:	2b 83       	std	Y+3, r18	; 0x03
 2a6:	24 e5       	ldi	r18, 0x54	; 84
 2a8:	2c 83       	std	Y+4, r18	; 0x04
 2aa:	e1 e0       	ldi	r30, 0x01	; 1
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ec 0f       	add	r30, r28
 2b0:	fd 1f       	adc	r31, r29
 2b2:	e6 0f       	add	r30, r22
 2b4:	f1 1d       	adc	r31, r1
 2b6:	60 81       	ld	r22, Z
 2b8:	64 0f       	add	r22, r20
 2ba:	60 68       	ori	r22, 0x80	; 128
 2bc:	0e 94 44 01 	call	0x288	; 0x288 <lq_sendCommand>
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <lq_clear>:
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	0e 94 44 01 	call	0x288	; 0x288 <lq_sendCommand>
 2da:	8f e3       	ldi	r24, 0x3F	; 63
 2dc:	9f e1       	ldi	r25, 0x1F	; 31
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <lq_clear+0x10>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lq_clear+0x16>
 2e4:	00 00       	nop
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	ce 01       	movw	r24, r28
 2ec:	0e 94 48 01 	call	0x290	; 0x290 <lq_setCursor>
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <lq_returnHome>:
 2f6:	62 e0       	ldi	r22, 0x02	; 2
 2f8:	0e 94 44 01 	call	0x288	; 0x288 <lq_sendCommand>
 2fc:	8f e3       	ldi	r24, 0x3F	; 63
 2fe:	9f e1       	ldi	r25, 0x1F	; 31
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lq_returnHome+0xa>
 304:	00 c0       	rjmp	.+0      	; 0x306 <lq_returnHome+0x10>
 306:	00 00       	nop
 308:	08 95       	ret

0000030a <lq_turnOnDisplay>:
 30a:	fc 01       	movw	r30, r24
 30c:	65 81       	ldd	r22, Z+5	; 0x05
 30e:	26 2f       	mov	r18, r22
 310:	24 60       	ori	r18, 0x04	; 4
 312:	25 83       	std	Z+5, r18	; 0x05
 314:	6c 60       	ori	r22, 0x0C	; 12
 316:	0e 94 44 01 	call	0x288	; 0x288 <lq_sendCommand>
 31a:	08 95       	ret

0000031c <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	2e 97       	sbiw	r28, 0x0e	; 14
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
 330:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
 332:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
 334:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
 336:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
 338:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
 342:	42 30       	cpi	r20, 0x02	; 2
 344:	18 f0       	brcs	.+6      	; 0x34c <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
 346:	82 2f       	mov	r24, r18
 348:	88 60       	ori	r24, 0x08	; 8
 34a:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
 34c:	22 23       	and	r18, r18
 34e:	29 f0       	breq	.+10     	; 0x35a <lq_init+0x3e>
 350:	41 30       	cpi	r20, 0x01	; 1
 352:	19 f4       	brne	.+6      	; 0x35a <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
 354:	8c 85       	ldd	r24, Y+12	; 0x0c
 356:	84 60       	ori	r24, 0x04	; 4
 358:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	81 ee       	ldi	r24, 0xE1	; 225
 35e:	94 e0       	ldi	r25, 0x04	; 4
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <lq_init+0x44>
 368:	00 c0       	rjmp	.+0      	; 0x36a <lq_init+0x4e>
 36a:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	ce 01       	movw	r24, r28
 370:	08 96       	adiw	r24, 0x08	; 8
 372:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lq_transmitI2C>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	83 ed       	ldi	r24, 0xD3	; 211
 37a:	90 e3       	ldi	r25, 0x30	; 48
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <lq_init+0x60>
 384:	00 c0       	rjmp	.+0      	; 0x386 <lq_init+0x6a>
 386:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
 388:	60 e3       	ldi	r22, 0x30	; 48
 38a:	ce 01       	movw	r24, r28
 38c:	08 96       	adiw	r24, 0x08	; 8
 38e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 392:	8f e4       	ldi	r24, 0x4F	; 79
 394:	96 e4       	ldi	r25, 0x46	; 70
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <lq_init+0x7a>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <lq_init+0x80>
 39c:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
 39e:	60 e3       	ldi	r22, 0x30	; 48
 3a0:	ce 01       	movw	r24, r28
 3a2:	08 96       	adiw	r24, 0x08	; 8
 3a4:	0e 94 03 01 	call	0x206	; 0x206 <lq_writeDevice4Bits>
 3a8:	8f e4       	ldi	r24, 0x4F	; 79
 3aa:	96 e4       	ldi	r25, 0x46	; 70
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <lq_init+0x90>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <lq_init+0x96>
 3b2:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
 3b4:	60 e3       	ldi	r22, 0x30	; 48
 3b6:	ce 01       	movw	r24, r28
 3b8:	08 96       	adiw	r24, 0x08	; 8
 3ba:	0e 94 03 01 	call	0x206	; 0x206 <lq_writeDevice4Bits>
 3be:	87 e5       	ldi	r24, 0x57	; 87
 3c0:	92 e0       	ldi	r25, 0x02	; 2
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <lq_init+0xa6>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <lq_init+0xac>
 3c8:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
 3ca:	60 e2       	ldi	r22, 0x20	; 32
 3cc:	ce 01       	movw	r24, r28
 3ce:	08 96       	adiw	r24, 0x08	; 8
 3d0:	0e 94 03 01 	call	0x206	; 0x206 <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
 3d4:	6c 85       	ldd	r22, Y+12	; 0x0c
 3d6:	60 62       	ori	r22, 0x20	; 32
 3d8:	ce 01       	movw	r24, r28
 3da:	08 96       	adiw	r24, 0x08	; 8
 3dc:	0e 94 44 01 	call	0x288	; 0x288 <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
 3e0:	ce 01       	movw	r24, r28
 3e2:	08 96       	adiw	r24, 0x08	; 8
 3e4:	0e 94 85 01 	call	0x30a	; 0x30a <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
 3e8:	ce 01       	movw	r24, r28
 3ea:	08 96       	adiw	r24, 0x08	; 8
 3ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
 3f0:	6e 85       	ldd	r22, Y+14	; 0x0e
 3f2:	64 60       	ori	r22, 0x04	; 4
 3f4:	ce 01       	movw	r24, r28
 3f6:	08 96       	adiw	r24, 0x08	; 8
 3f8:	0e 94 44 01 	call	0x288	; 0x288 <lq_sendCommand>
	
	lq_returnHome(&device);
 3fc:	ce 01       	movw	r24, r28
 3fe:	08 96       	adiw	r24, 0x08	; 8
 400:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lq_returnHome>

	return device;
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	fe 01       	movw	r30, r28
 408:	38 96       	adiw	r30, 0x08	; 8
 40a:	de 01       	movw	r26, r28
 40c:	11 96       	adiw	r26, 0x01	; 1
 40e:	01 90       	ld	r0, Z+
 410:	0d 92       	st	X+, r0
 412:	8a 95       	dec	r24
 414:	e1 f7       	brne	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	29 81       	ldd	r18, Y+1	; 0x01
 418:	3a 81       	ldd	r19, Y+2	; 0x02
 41a:	4b 81       	ldd	r20, Y+3	; 0x03
 41c:	5c 81       	ldd	r21, Y+4	; 0x04
 41e:	6d 81       	ldd	r22, Y+5	; 0x05
 420:	7e 81       	ldd	r23, Y+6	; 0x06
};
 422:	8f 81       	ldd	r24, Y+7	; 0x07
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	2e 96       	adiw	r28, 0x0e	; 14
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	de bf       	out	0x3e, r29	; 62
 42e:	0f be       	out	0x3f, r0	; 63
 430:	cd bf       	out	0x3d, r28	; 61
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <main>:

#include <avr/pgmspace.h> //Include flash memory library


int main(void)
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	6e 97       	sbiw	r28, 0x1e	; 30
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
	
	i2c_master_init(I2C_SCL_FREQUENCY_100);					//SET LCD TO I2C0 PINS
 44c:	60 ea       	ldi	r22, 0xA0	; 160
 44e:	76 e8       	ldi	r23, 0x86	; 134
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 71 00 	call	0xe2	; 0xe2 <i2c_master_init>
	LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	44 e0       	ldi	r20, 0x04	; 4
 45c:	64 e1       	ldi	r22, 0x14	; 20
 45e:	87 e2       	ldi	r24, 0x27	; 39
 460:	0e 94 8e 01 	call	0x31c	; 0x31c <lq_init>
 464:	29 83       	std	Y+1, r18	; 0x01
 466:	3a 83       	std	Y+2, r19	; 0x02
 468:	4b 83       	std	Y+3, r20	; 0x03
 46a:	5c 83       	std	Y+4, r21	; 0x04
 46c:	6d 83       	std	Y+5, r22	; 0x05
 46e:	7e 83       	std	Y+6, r23	; 0x06
 470:	8f 83       	std	Y+7, r24	; 0x07
	
	lq_setCursor(&device, 1, 0);		// moving cursor to the next line
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	ce 01       	movw	r24, r28
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	0e 94 48 01 	call	0x290	; 0x290 <lq_setCursor>
	lq_turnOnBacklight(&device);
 47e:	ce 01       	movw	r24, r28
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lq_turnOnBacklight>
	const char test[]  PROGMEM = "Hello World";
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	e0 e0       	ldi	r30, 0x00	; 0
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	de 01       	movw	r26, r28
 48e:	18 96       	adiw	r26, 0x08	; 8
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
 496:	e1 f7       	brne	.-8      	; 0x490 <main+0x58>
	char buffer[11];				//if error maybe fix this?
	strcpy_P(buffer, test);			//if this works try putting this in one line
 498:	be 01       	movw	r22, r28
 49a:	68 5f       	subi	r22, 0xF8	; 248
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	ce 01       	movw	r24, r28
 4a0:	44 96       	adiw	r24, 0x14	; 20
 4a2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <strcpy_P>
	lq_print(&device, buffer);
 4a6:	be 01       	movw	r22, r28
 4a8:	6c 5e       	subi	r22, 0xEC	; 236
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	ce 01       	movw	r24, r28
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	0e 94 2f 01 	call	0x25e	; 0x25e <lq_print>
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <main+0x7c>

000004b6 <__udivmodsi4>:
 4b6:	a1 e2       	ldi	r26, 0x21	; 33
 4b8:	1a 2e       	mov	r1, r26
 4ba:	aa 1b       	sub	r26, r26
 4bc:	bb 1b       	sub	r27, r27
 4be:	fd 01       	movw	r30, r26
 4c0:	0d c0       	rjmp	.+26     	; 0x4dc <__udivmodsi4_ep>

000004c2 <__udivmodsi4_loop>:
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	ee 1f       	adc	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	a2 17       	cp	r26, r18
 4cc:	b3 07       	cpc	r27, r19
 4ce:	e4 07       	cpc	r30, r20
 4d0:	f5 07       	cpc	r31, r21
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__udivmodsi4_ep>
 4d4:	a2 1b       	sub	r26, r18
 4d6:	b3 0b       	sbc	r27, r19
 4d8:	e4 0b       	sbc	r30, r20
 4da:	f5 0b       	sbc	r31, r21

000004dc <__udivmodsi4_ep>:
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	1a 94       	dec	r1
 4e6:	69 f7       	brne	.-38     	; 0x4c2 <__udivmodsi4_loop>
 4e8:	60 95       	com	r22
 4ea:	70 95       	com	r23
 4ec:	80 95       	com	r24
 4ee:	90 95       	com	r25
 4f0:	9b 01       	movw	r18, r22
 4f2:	ac 01       	movw	r20, r24
 4f4:	bd 01       	movw	r22, r26
 4f6:	cf 01       	movw	r24, r30
 4f8:	08 95       	ret

000004fa <strcpy_P>:
 4fa:	fb 01       	movw	r30, r22
 4fc:	dc 01       	movw	r26, r24
 4fe:	05 90       	lpm	r0, Z+
 500:	0d 92       	st	X+, r0
 502:	00 20       	and	r0, r0
 504:	e1 f7       	brne	.-8      	; 0x4fe <strcpy_P+0x4>
 506:	08 95       	ret

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
