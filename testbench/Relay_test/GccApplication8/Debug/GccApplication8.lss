
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000005e8  0000067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080013a  0080013a  000006b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eab  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cde  00000000  00000000  0000276b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce7  00000000  00000000  00003449  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00004130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088c  00000000  00000000  00004520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001102  00000000  00000000  00004dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005eae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ee       	ldi	r30, 0xE8	; 232
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 33       	cpi	r26, 0x3A	; 58
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ad 33       	cpi	r26, 0x3D	; 61
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 40 02 	call	0x480	; 0x480 <main>
  ea:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_master_init>:
	}
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
  f2:	9b 01       	movw	r18, r22
  f4:	ac 01       	movw	r20, r24
  f6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	74 e2       	ldi	r23, 0x24	; 36
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__udivmodsi4>
 106:	da 01       	movw	r26, r20
 108:	c9 01       	movw	r24, r18
 10a:	40 97       	sbiw	r24, 0x10	; 16
 10c:	a1 09       	sbc	r26, r1
 10e:	b1 09       	sbc	r27, r1
 110:	b6 95       	lsr	r27
 112:	a7 95       	ror	r26
 114:	97 95       	ror	r25
 116:	87 95       	ror	r24
 118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 11c:	08 95       	ret

0000011e <i2c_master_start>:
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	10 82       	st	Z, r1
 124:	94 ea       	ldi	r25, 0xA4	; 164
 126:	90 83       	st	Z, r25
 128:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12c:	99 23       	and	r25, r25
 12e:	e4 f7       	brge	.-8      	; 0x128 <i2c_master_start+0xa>
 130:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	98 30       	cpi	r25, 0x08	; 8
 138:	11 f0       	breq	.+4      	; 0x13e <i2c_master_start+0x20>
 13a:	90 31       	cpi	r25, 0x10	; 16
 13c:	b1 f4       	brne	.+44     	; 0x16a <i2c_master_start+0x4c>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	86 2b       	or	r24, r22
 146:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <i2c_master_start+0x32>
 158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15c:	88 7f       	andi	r24, 0xF8	; 248
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	31 f0       	breq	.+12     	; 0x16e <i2c_master_start+0x50>
 162:	80 34       	cpi	r24, 0x40	; 64
 164:	31 f4       	brne	.+12     	; 0x172 <i2c_master_start+0x54>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	08 95       	ret
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
 172:	84 e1       	ldi	r24, 0x14	; 20
 174:	08 95       	ret

00000176 <i2c_master_write>:
 176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <i2c_master_write+0xa>
 188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 18c:	88 7f       	andi	r24, 0xF8	; 248
 18e:	88 32       	cpi	r24, 0x28	; 40
 190:	11 f0       	breq	.+4      	; 0x196 <i2c_master_write+0x20>
 192:	85 e1       	ldi	r24, 0x15	; 21
 194:	08 95       	ret
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret

0000019a <i2c_master_stop>:
 19a:	84 e9       	ldi	r24, 0x94	; 148
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a0:	08 95       	ret

000001a2 <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
 1a2:	cf 93       	push	r28
 1a4:	c6 2f       	mov	r28, r22
	uint8_t status = i2c_master_start(address, I2C_WRITE);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_master_start>
	if (status) return status;
 1ac:	81 11       	cpse	r24, r1
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <i2c_master_sendByte+0x1e>

	status = i2c_master_write(data);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_master_write>
	if (status) return status;
 1b6:	81 11       	cpse	r24, r1
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <i2c_master_sendByte+0x1e>

	i2c_master_stop();
 1ba:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_master_stop>
	
	return I2C_STATUS_SUCCESS;
 1be:	80 e0       	ldi	r24, 0x00	; 0
};
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
 1c4:	fc 01       	movw	r30, r24
 1c6:	23 81       	ldd	r18, Z+3	; 0x03
 1c8:	62 2b       	or	r22, r18
 1ca:	80 81       	ld	r24, Z
 1cc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <i2c_master_sendByte>
 1d0:	08 95       	ret

000001d2 <lq_turnOnBacklight>:
 1d2:	28 e0       	ldi	r18, 0x08	; 8
 1d4:	fc 01       	movw	r30, r24
 1d6:	23 83       	std	Z+3, r18	; 0x03
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 1de:	08 95       	ret

000001e0 <lq_writeDevicePulse>:
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	8c 01       	movw	r16, r24
 1e8:	c6 2f       	mov	r28, r22
 1ea:	64 60       	ori	r22, 0x04	; 4
 1ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lq_writeDevicePulse+0x12>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lq_writeDevicePulse+0x18>
 1f8:	6c 2f       	mov	r22, r28
 1fa:	6b 7f       	andi	r22, 0xFB	; 251
 1fc:	c8 01       	movw	r24, r16
 1fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 202:	87 ec       	ldi	r24, 0xC7	; 199
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lq_writeDevicePulse+0x26>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lq_writeDevicePulse+0x2c>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <lq_writeDevice4Bits>:
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 21e:	16 2f       	mov	r17, r22
 220:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 224:	61 2f       	mov	r22, r17
 226:	ce 01       	movw	r24, r28
 228:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lq_writeDevicePulse>
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	08 95       	ret

00000234 <lq_writeDeviceByte>:
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	8c 01       	movw	r16, r24
 240:	f4 2e       	mov	r15, r20
 242:	86 2f       	mov	r24, r22
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	90 e1       	ldi	r25, 0x10	; 16
 248:	69 9f       	mul	r22, r25
 24a:	e0 01       	movw	r28, r0
 24c:	11 24       	eor	r1, r1
 24e:	68 2f       	mov	r22, r24
 250:	64 2b       	or	r22, r20
 252:	c8 01       	movw	r24, r16
 254:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 258:	6c 2f       	mov	r22, r28
 25a:	6f 29       	or	r22, r15
 25c:	c8 01       	movw	r24, r16
 25e:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	08 95       	ret

0000026e <lq_print>:
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	8c 01       	movw	r16, r24
 278:	eb 01       	movw	r28, r22
 27a:	68 81       	ld	r22, Y
 27c:	06 c0       	rjmp	.+12     	; 0x28a <lq_print+0x1c>
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	c8 01       	movw	r24, r16
 282:	0e 94 1a 01 	call	0x234	; 0x234 <lq_writeDeviceByte>
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	68 81       	ld	r22, Y
 28a:	61 11       	cpse	r22, r1
 28c:	f8 cf       	rjmp	.-16     	; 0x27e <lq_print+0x10>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <lq_sendCommand>:
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	0e 94 1a 01 	call	0x234	; 0x234 <lq_writeDeviceByte>
 29e:	08 95       	ret

000002a0 <lq_setCursor>:
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <lq_setCursor+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <lq_setCursor+0x8>
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	19 82       	std	Y+1, r1	; 0x01
 2ae:	20 e4       	ldi	r18, 0x40	; 64
 2b0:	2a 83       	std	Y+2, r18	; 0x02
 2b2:	24 e1       	ldi	r18, 0x14	; 20
 2b4:	2b 83       	std	Y+3, r18	; 0x03
 2b6:	24 e5       	ldi	r18, 0x54	; 84
 2b8:	2c 83       	std	Y+4, r18	; 0x04
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	e6 0f       	add	r30, r22
 2c4:	f1 1d       	adc	r31, r1
 2c6:	60 81       	ld	r22, Z
 2c8:	64 0f       	add	r22, r20
 2ca:	60 68       	ori	r22, 0x80	; 128
 2cc:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <lq_clear>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	9f e1       	ldi	r25, 0x1F	; 31
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lq_clear+0x10>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lq_clear+0x16>
 2f4:	00 00       	nop
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	ce 01       	movw	r24, r28
 2fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <lq_returnHome>:
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 30c:	8f e3       	ldi	r24, 0x3F	; 63
 30e:	9f e1       	ldi	r25, 0x1F	; 31
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <lq_returnHome+0xa>
 314:	00 c0       	rjmp	.+0      	; 0x316 <lq_returnHome+0x10>
 316:	00 00       	nop
 318:	08 95       	ret

0000031a <lq_turnOnDisplay>:
 31a:	fc 01       	movw	r30, r24
 31c:	65 81       	ldd	r22, Z+5	; 0x05
 31e:	26 2f       	mov	r18, r22
 320:	24 60       	ori	r18, 0x04	; 4
 322:	25 83       	std	Z+5, r18	; 0x05
 324:	6c 60       	ori	r22, 0x0C	; 12
 326:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 32a:	08 95       	ret

0000032c <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	2e 97       	sbiw	r28, 0x0e	; 14
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
 340:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
 342:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
 344:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
 346:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
 348:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
 352:	42 30       	cpi	r20, 0x02	; 2
 354:	18 f0       	brcs	.+6      	; 0x35c <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
 356:	82 2f       	mov	r24, r18
 358:	88 60       	ori	r24, 0x08	; 8
 35a:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
 35c:	22 23       	and	r18, r18
 35e:	29 f0       	breq	.+10     	; 0x36a <lq_init+0x3e>
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	19 f4       	brne	.+6      	; 0x36a <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
 364:	8c 85       	ldd	r24, Y+12	; 0x0c
 366:	84 60       	ori	r24, 0x04	; 4
 368:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	81 ee       	ldi	r24, 0xE1	; 225
 36e:	94 e0       	ldi	r25, 0x04	; 4
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <lq_init+0x44>
 378:	00 c0       	rjmp	.+0      	; 0x37a <lq_init+0x4e>
 37a:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	ce 01       	movw	r24, r28
 380:	08 96       	adiw	r24, 0x08	; 8
 382:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	83 ed       	ldi	r24, 0xD3	; 211
 38a:	90 e3       	ldi	r25, 0x30	; 48
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <lq_init+0x60>
 394:	00 c0       	rjmp	.+0      	; 0x396 <lq_init+0x6a>
 396:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
 398:	60 e3       	ldi	r22, 0x30	; 48
 39a:	ce 01       	movw	r24, r28
 39c:	08 96       	adiw	r24, 0x08	; 8
 39e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	8f e4       	ldi	r24, 0x4F	; 79
 3a4:	96 e4       	ldi	r25, 0x46	; 70
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lq_init+0x7a>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lq_init+0x80>
 3ac:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
 3ae:	60 e3       	ldi	r22, 0x30	; 48
 3b0:	ce 01       	movw	r24, r28
 3b2:	08 96       	adiw	r24, 0x08	; 8
 3b4:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 3b8:	8f e4       	ldi	r24, 0x4F	; 79
 3ba:	96 e4       	ldi	r25, 0x46	; 70
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lq_init+0x90>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lq_init+0x96>
 3c2:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
 3c4:	60 e3       	ldi	r22, 0x30	; 48
 3c6:	ce 01       	movw	r24, r28
 3c8:	08 96       	adiw	r24, 0x08	; 8
 3ca:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 3ce:	87 e5       	ldi	r24, 0x57	; 87
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lq_init+0xa6>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <lq_init+0xac>
 3d8:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
 3da:	60 e2       	ldi	r22, 0x20	; 32
 3dc:	ce 01       	movw	r24, r28
 3de:	08 96       	adiw	r24, 0x08	; 8
 3e0:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
 3e4:	6c 85       	ldd	r22, Y+12	; 0x0c
 3e6:	60 62       	ori	r22, 0x20	; 32
 3e8:	ce 01       	movw	r24, r28
 3ea:	08 96       	adiw	r24, 0x08	; 8
 3ec:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
 3f0:	ce 01       	movw	r24, r28
 3f2:	08 96       	adiw	r24, 0x08	; 8
 3f4:	0e 94 8d 01 	call	0x31a	; 0x31a <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
 3f8:	ce 01       	movw	r24, r28
 3fa:	08 96       	adiw	r24, 0x08	; 8
 3fc:	0e 94 6f 01 	call	0x2de	; 0x2de <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
 400:	6e 85       	ldd	r22, Y+14	; 0x0e
 402:	64 60       	ori	r22, 0x04	; 4
 404:	ce 01       	movw	r24, r28
 406:	08 96       	adiw	r24, 0x08	; 8
 408:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
	
	lq_returnHome(&device);
 40c:	ce 01       	movw	r24, r28
 40e:	08 96       	adiw	r24, 0x08	; 8
 410:	0e 94 83 01 	call	0x306	; 0x306 <lq_returnHome>

	return device;
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	fe 01       	movw	r30, r28
 418:	38 96       	adiw	r30, 0x08	; 8
 41a:	de 01       	movw	r26, r28
 41c:	11 96       	adiw	r26, 0x01	; 1
 41e:	01 90       	ld	r0, Z+
 420:	0d 92       	st	X+, r0
 422:	8a 95       	dec	r24
 424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	29 81       	ldd	r18, Y+1	; 0x01
 428:	3a 81       	ldd	r19, Y+2	; 0x02
 42a:	4b 81       	ldd	r20, Y+3	; 0x03
 42c:	5c 81       	ldd	r21, Y+4	; 0x04
 42e:	6d 81       	ldd	r22, Y+5	; 0x05
 430:	7e 81       	ldd	r23, Y+6	; 0x06
};
 432:	8f 81       	ldd	r24, Y+7	; 0x07
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	2e 96       	adiw	r28, 0x0e	; 14
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <__vector_5>:


volatile uint8_t dac_screen = 0;
volatile uint8_t aux_screen = 0;
uint8_t screenFlag = 0;
ISR(PCINT2_vect) {
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	8f 93       	push	r24
    
    if (PIND & (1 << PD1) ) {
 454:	49 9b       	sbis	0x09, 1	; 9
 456:	06 c0       	rjmp	.+12     	; 0x464 <__vector_5+0x1c>
        dac_screen = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <dac_screen>
		aux_screen=0;
 45e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <aux_screen>
 462:	05 c0       	rjmp	.+10     	; 0x46e <__vector_5+0x26>
    }
	 else {
		 aux_screen = 1; // Turn off LED when PD1 is LOW
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <aux_screen>
		 dac_screen = 0;
 46a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <dac_screen>
	 }
	 screenFlag = 1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    
}
 474:	8f 91       	pop	r24
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <main>:

int main(void) {
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	27 97       	sbiw	r28, 0x07	; 7
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
    // Set PD1 as input
    DDRD &= ~(1 << DDD1);    // Clear bit 1 of DDRD to set PD1 as input
 494:	8a b1       	in	r24, 0x0a	; 10
 496:	8d 7f       	andi	r24, 0xFD	; 253
 498:	8a b9       	out	0x0a, r24	; 10

    // Set PB5 (built-in LED) as output
    //DDRB |= (1 << PB5);

    // Enable pin change interrupt for PCINT17 (PD1)
    PCICR |= (1 << PCIE2);   // Enable PCINT2 group (PCINT16-23)
 49a:	e8 e6       	ldi	r30, 0x68	; 104
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	84 60       	ori	r24, 0x04	; 4
 4a2:	80 83       	st	Z, r24
    PCMSK2 |= (1 << PCINT17); // Enable interrupt specifically for PD1 (PCINT17)
 4a4:	ed e6       	ldi	r30, 0x6D	; 109
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	82 60       	ori	r24, 0x02	; 2
 4ac:	80 83       	st	Z, r24

    // Enable global interrupts
    sei();
 4ae:	78 94       	sei
	
	i2c_master_init(I2C_SCL_FREQUENCY_100);					//SET LCD TO I2C0 PINS
 4b0:	60 ea       	ldi	r22, 0xA0	; 160
 4b2:	76 e8       	ldi	r23, 0x86	; 134
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_master_init>
	LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	44 e0       	ldi	r20, 0x04	; 4
 4c0:	64 e1       	ldi	r22, 0x14	; 20
 4c2:	87 e2       	ldi	r24, 0x27	; 39
 4c4:	0e 94 96 01 	call	0x32c	; 0x32c <lq_init>
 4c8:	29 83       	std	Y+1, r18	; 0x01
 4ca:	3a 83       	std	Y+2, r19	; 0x02
 4cc:	4b 83       	std	Y+3, r20	; 0x03
 4ce:	5c 83       	std	Y+4, r21	; 0x04
 4d0:	6d 83       	std	Y+5, r22	; 0x05
 4d2:	7e 83       	std	Y+6, r23	; 0x06
 4d4:	8f 83       	std	Y+7, r24	; 0x07
	lq_turnOnBacklight(&device);
 4d6:	ce 01       	movw	r24, r28
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lq_turnOnBacklight>
	
	//uint8_t fsm_screen = 0;

    while (1) {
        // Main loop can perform other tasks
		if (screenFlag){
 4de:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 4e2:	88 23       	and	r24, r24
 4e4:	e1 f3       	breq	.-8      	; 0x4de <main+0x5e>
			if(dac_screen){
 4e6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <dac_screen>
 4ea:	88 23       	and	r24, r24
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <main+0x70>
 4ee:	41 c0       	rjmp	.+130    	; 0x572 <main+0xf2>
					lq_clear(&device);
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	0e 94 6f 01 	call	0x2de	; 0x2de <lq_clear>
					lq_setCursor(&device, 1,0);
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
					lq_print(&device, "TONE GENERATOR MODE");
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	71 e0       	ldi	r23, 0x01	; 1
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 37 01 	call	0x26e	; 0x26e <lq_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	87 ea       	ldi	r24, 0xA7	; 167
 514:	91 e6       	ldi	r25, 0x61	; 97
 516:	21 50       	subi	r18, 0x01	; 1
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <main+0x96>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <main+0xa0>
 520:	00 00       	nop
					_delay_ms(2000);
					lq_clear(&device);
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 6f 01 	call	0x2de	; 0x2de <lq_clear>
					lq_setCursor(&device, 0, 0); // moving cursor to the next line
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
					lq_print(&device, "Amplitude");
 536:	64 e1       	ldi	r22, 0x14	; 20
 538:	71 e0       	ldi	r23, 0x01	; 1
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	0e 94 37 01 	call	0x26e	; 0x26e <lq_print>
					lq_setCursor(&device, 1, 0); // moving cursor to the next line
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	ce 01       	movw	r24, r28
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
					lq_print(&device, "Frequency");
 54e:	6e e1       	ldi	r22, 0x1E	; 30
 550:	71 e0       	ldi	r23, 0x01	; 1
 552:	ce 01       	movw	r24, r28
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	0e 94 37 01 	call	0x26e	; 0x26e <lq_print>
					
					lq_setCursor(&device, 2, 0); // moving cursor to the next line
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	62 e0       	ldi	r22, 0x02	; 2
 55e:	ce 01       	movw	r24, r28
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
					lq_print(&device, "Waveform");
 566:	68 e2       	ldi	r22, 0x28	; 40
 568:	71 e0       	ldi	r23, 0x01	; 1
 56a:	ce 01       	movw	r24, r28
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	0e 94 37 01 	call	0x26e	; 0x26e <lq_print>
			}
				
				if(aux_screen){
 572:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <aux_screen>
 576:	88 23       	and	r24, r24
 578:	81 f0       	breq	.+32     	; 0x59a <main+0x11a>
					lq_clear(&device);
 57a:	ce 01       	movw	r24, r28
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	0e 94 6f 01 	call	0x2de	; 0x2de <lq_clear>
					
					
					lq_setCursor(&device, 1, 0); // moving cursor to the next line
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	ce 01       	movw	r24, r28
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
					lq_print(&device, "AUX MODE");
 58e:	61 e3       	ldi	r22, 0x31	; 49
 590:	71 e0       	ldi	r23, 0x01	; 1
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	0e 94 37 01 	call	0x26e	; 0x26e <lq_print>
				}
				screenFlag = 0;
 59a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
 59e:	9f cf       	rjmp	.-194    	; 0x4de <main+0x5e>

000005a0 <__udivmodsi4>:
 5a0:	a1 e2       	ldi	r26, 0x21	; 33
 5a2:	1a 2e       	mov	r1, r26
 5a4:	aa 1b       	sub	r26, r26
 5a6:	bb 1b       	sub	r27, r27
 5a8:	fd 01       	movw	r30, r26
 5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <__udivmodsi4_ep>

000005ac <__udivmodsi4_loop>:
 5ac:	aa 1f       	adc	r26, r26
 5ae:	bb 1f       	adc	r27, r27
 5b0:	ee 1f       	adc	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	a2 17       	cp	r26, r18
 5b6:	b3 07       	cpc	r27, r19
 5b8:	e4 07       	cpc	r30, r20
 5ba:	f5 07       	cpc	r31, r21
 5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__udivmodsi4_ep>
 5be:	a2 1b       	sub	r26, r18
 5c0:	b3 0b       	sbc	r27, r19
 5c2:	e4 0b       	sbc	r30, r20
 5c4:	f5 0b       	sbc	r31, r21

000005c6 <__udivmodsi4_ep>:
 5c6:	66 1f       	adc	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	88 1f       	adc	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	1a 94       	dec	r1
 5d0:	69 f7       	brne	.-38     	; 0x5ac <__udivmodsi4_loop>
 5d2:	60 95       	com	r22
 5d4:	70 95       	com	r23
 5d6:	80 95       	com	r24
 5d8:	90 95       	com	r25
 5da:	9b 01       	movw	r18, r22
 5dc:	ac 01       	movw	r20, r24
 5de:	bd 01       	movw	r22, r26
 5e0:	cf 01       	movw	r24, r30
 5e2:	08 95       	ret

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
