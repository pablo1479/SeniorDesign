
Buttons_and_LCD_w_InterruptsDAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000ba6  00000c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000c3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ce6  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d20  00000000  00000000  00002b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c33  00000000  00000000  00003872  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  000044a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000912  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010fd  00000000  00000000  0000519a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ea       	ldi	r30, 0xA6	; 166
  c8:	fb e0       	ldi	r31, 0x0B	; 11
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 30       	cpi	r26, 0x05	; 5
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
  ea:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_master_init>:
	}
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
  f2:	9b 01       	movw	r18, r22
  f4:	ac 01       	movw	r20, r24
  f6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	74 e2       	ldi	r23, 0x24	; 36
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 c5 02 	call	0x58a	; 0x58a <__udivmodsi4>
 106:	da 01       	movw	r26, r20
 108:	c9 01       	movw	r24, r18
 10a:	40 97       	sbiw	r24, 0x10	; 16
 10c:	a1 09       	sbc	r26, r1
 10e:	b1 09       	sbc	r27, r1
 110:	b6 95       	lsr	r27
 112:	a7 95       	ror	r26
 114:	97 95       	ror	r25
 116:	87 95       	ror	r24
 118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 11c:	08 95       	ret

0000011e <i2c_master_start>:
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	10 82       	st	Z, r1
 124:	94 ea       	ldi	r25, 0xA4	; 164
 126:	90 83       	st	Z, r25
 128:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12c:	99 23       	and	r25, r25
 12e:	e4 f7       	brge	.-8      	; 0x128 <i2c_master_start+0xa>
 130:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	98 30       	cpi	r25, 0x08	; 8
 138:	11 f0       	breq	.+4      	; 0x13e <i2c_master_start+0x20>
 13a:	90 31       	cpi	r25, 0x10	; 16
 13c:	b1 f4       	brne	.+44     	; 0x16a <i2c_master_start+0x4c>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	86 2b       	or	r24, r22
 146:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <i2c_master_start+0x32>
 158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15c:	88 7f       	andi	r24, 0xF8	; 248
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	31 f0       	breq	.+12     	; 0x16e <i2c_master_start+0x50>
 162:	80 34       	cpi	r24, 0x40	; 64
 164:	31 f4       	brne	.+12     	; 0x172 <i2c_master_start+0x54>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	08 95       	ret
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
 172:	84 e1       	ldi	r24, 0x14	; 20
 174:	08 95       	ret

00000176 <i2c_master_write>:
 176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <i2c_master_write+0xa>
 188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 18c:	88 7f       	andi	r24, 0xF8	; 248
 18e:	88 32       	cpi	r24, 0x28	; 40
 190:	11 f0       	breq	.+4      	; 0x196 <i2c_master_write+0x20>
 192:	85 e1       	ldi	r24, 0x15	; 21
 194:	08 95       	ret
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret

0000019a <i2c_master_stop>:
 19a:	84 e9       	ldi	r24, 0x94	; 148
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a0:	08 95       	ret

000001a2 <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
 1a2:	cf 93       	push	r28
 1a4:	c6 2f       	mov	r28, r22
	uint8_t status = i2c_master_start(address, I2C_WRITE);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_master_start>
	if (status) return status;
 1ac:	81 11       	cpse	r24, r1
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <i2c_master_sendByte+0x1e>

	status = i2c_master_write(data);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_master_write>
	if (status) return status;
 1b6:	81 11       	cpse	r24, r1
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <i2c_master_sendByte+0x1e>

	i2c_master_stop();
 1ba:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_master_stop>
	
	return I2C_STATUS_SUCCESS;
 1be:	80 e0       	ldi	r24, 0x00	; 0
};
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
 1c4:	fc 01       	movw	r30, r24
 1c6:	23 81       	ldd	r18, Z+3	; 0x03
 1c8:	62 2b       	or	r22, r18
 1ca:	80 81       	ld	r24, Z
 1cc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <i2c_master_sendByte>
 1d0:	08 95       	ret

000001d2 <lq_turnOnBacklight>:
 1d2:	28 e0       	ldi	r18, 0x08	; 8
 1d4:	fc 01       	movw	r30, r24
 1d6:	23 83       	std	Z+3, r18	; 0x03
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 1de:	08 95       	ret

000001e0 <lq_writeDevicePulse>:
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	8c 01       	movw	r16, r24
 1e8:	c6 2f       	mov	r28, r22
 1ea:	64 60       	ori	r22, 0x04	; 4
 1ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lq_writeDevicePulse+0x12>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lq_writeDevicePulse+0x18>
 1f8:	6c 2f       	mov	r22, r28
 1fa:	6b 7f       	andi	r22, 0xFB	; 251
 1fc:	c8 01       	movw	r24, r16
 1fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 202:	87 ec       	ldi	r24, 0xC7	; 199
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lq_writeDevicePulse+0x26>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lq_writeDevicePulse+0x2c>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <lq_writeDevice4Bits>:
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 21e:	16 2f       	mov	r17, r22
 220:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 224:	61 2f       	mov	r22, r17
 226:	ce 01       	movw	r24, r28
 228:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lq_writeDevicePulse>
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	08 95       	ret

00000234 <lq_writeDeviceByte>:
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	8c 01       	movw	r16, r24
 240:	f4 2e       	mov	r15, r20
 242:	86 2f       	mov	r24, r22
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	90 e1       	ldi	r25, 0x10	; 16
 248:	69 9f       	mul	r22, r25
 24a:	e0 01       	movw	r28, r0
 24c:	11 24       	eor	r1, r1
 24e:	68 2f       	mov	r22, r24
 250:	64 2b       	or	r22, r20
 252:	c8 01       	movw	r24, r16
 254:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 258:	6c 2f       	mov	r22, r28
 25a:	6f 29       	or	r22, r15
 25c:	c8 01       	movw	r24, r16
 25e:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	08 95       	ret

0000026e <lq_print>:
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	8c 01       	movw	r16, r24
 278:	eb 01       	movw	r28, r22
 27a:	68 81       	ld	r22, Y
 27c:	06 c0       	rjmp	.+12     	; 0x28a <lq_print+0x1c>
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	c8 01       	movw	r24, r16
 282:	0e 94 1a 01 	call	0x234	; 0x234 <lq_writeDeviceByte>
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	68 81       	ld	r22, Y
 28a:	61 11       	cpse	r22, r1
 28c:	f8 cf       	rjmp	.-16     	; 0x27e <lq_print+0x10>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <lq_sendCommand>:
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	0e 94 1a 01 	call	0x234	; 0x234 <lq_writeDeviceByte>
 29e:	08 95       	ret

000002a0 <lq_setCursor>:
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <lq_setCursor+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <lq_setCursor+0x8>
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	19 82       	std	Y+1, r1	; 0x01
 2ae:	20 e4       	ldi	r18, 0x40	; 64
 2b0:	2a 83       	std	Y+2, r18	; 0x02
 2b2:	24 e1       	ldi	r18, 0x14	; 20
 2b4:	2b 83       	std	Y+3, r18	; 0x03
 2b6:	24 e5       	ldi	r18, 0x54	; 84
 2b8:	2c 83       	std	Y+4, r18	; 0x04
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	e6 0f       	add	r30, r22
 2c4:	f1 1d       	adc	r31, r1
 2c6:	60 81       	ld	r22, Z
 2c8:	64 0f       	add	r22, r20
 2ca:	60 68       	ori	r22, 0x80	; 128
 2cc:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <lq_clear>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	9f e1       	ldi	r25, 0x1F	; 31
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lq_clear+0x10>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lq_clear+0x16>
 2f4:	00 00       	nop
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	ce 01       	movw	r24, r28
 2fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <lq_returnHome>:
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 30c:	8f e3       	ldi	r24, 0x3F	; 63
 30e:	9f e1       	ldi	r25, 0x1F	; 31
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <lq_returnHome+0xa>
 314:	00 c0       	rjmp	.+0      	; 0x316 <lq_returnHome+0x10>
 316:	00 00       	nop
 318:	08 95       	ret

0000031a <lq_turnOnDisplay>:
 31a:	fc 01       	movw	r30, r24
 31c:	65 81       	ldd	r22, Z+5	; 0x05
 31e:	26 2f       	mov	r18, r22
 320:	24 60       	ori	r18, 0x04	; 4
 322:	25 83       	std	Z+5, r18	; 0x05
 324:	6c 60       	ori	r22, 0x0C	; 12
 326:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 32a:	08 95       	ret

0000032c <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	2e 97       	sbiw	r28, 0x0e	; 14
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
 340:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
 342:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
 344:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
 346:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
 348:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
 352:	42 30       	cpi	r20, 0x02	; 2
 354:	18 f0       	brcs	.+6      	; 0x35c <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
 356:	82 2f       	mov	r24, r18
 358:	88 60       	ori	r24, 0x08	; 8
 35a:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
 35c:	22 23       	and	r18, r18
 35e:	29 f0       	breq	.+10     	; 0x36a <lq_init+0x3e>
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	19 f4       	brne	.+6      	; 0x36a <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
 364:	8c 85       	ldd	r24, Y+12	; 0x0c
 366:	84 60       	ori	r24, 0x04	; 4
 368:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	81 ee       	ldi	r24, 0xE1	; 225
 36e:	94 e0       	ldi	r25, 0x04	; 4
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <lq_init+0x44>
 378:	00 c0       	rjmp	.+0      	; 0x37a <lq_init+0x4e>
 37a:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	ce 01       	movw	r24, r28
 380:	08 96       	adiw	r24, 0x08	; 8
 382:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	83 ed       	ldi	r24, 0xD3	; 211
 38a:	90 e3       	ldi	r25, 0x30	; 48
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <lq_init+0x60>
 394:	00 c0       	rjmp	.+0      	; 0x396 <lq_init+0x6a>
 396:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
 398:	60 e3       	ldi	r22, 0x30	; 48
 39a:	ce 01       	movw	r24, r28
 39c:	08 96       	adiw	r24, 0x08	; 8
 39e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	8f e4       	ldi	r24, 0x4F	; 79
 3a4:	96 e4       	ldi	r25, 0x46	; 70
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lq_init+0x7a>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lq_init+0x80>
 3ac:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
 3ae:	60 e3       	ldi	r22, 0x30	; 48
 3b0:	ce 01       	movw	r24, r28
 3b2:	08 96       	adiw	r24, 0x08	; 8
 3b4:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 3b8:	8f e4       	ldi	r24, 0x4F	; 79
 3ba:	96 e4       	ldi	r25, 0x46	; 70
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lq_init+0x90>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lq_init+0x96>
 3c2:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
 3c4:	60 e3       	ldi	r22, 0x30	; 48
 3c6:	ce 01       	movw	r24, r28
 3c8:	08 96       	adiw	r24, 0x08	; 8
 3ca:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 3ce:	87 e5       	ldi	r24, 0x57	; 87
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lq_init+0xa6>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <lq_init+0xac>
 3d8:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
 3da:	60 e2       	ldi	r22, 0x20	; 32
 3dc:	ce 01       	movw	r24, r28
 3de:	08 96       	adiw	r24, 0x08	; 8
 3e0:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
 3e4:	6c 85       	ldd	r22, Y+12	; 0x0c
 3e6:	60 62       	ori	r22, 0x20	; 32
 3e8:	ce 01       	movw	r24, r28
 3ea:	08 96       	adiw	r24, 0x08	; 8
 3ec:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
 3f0:	ce 01       	movw	r24, r28
 3f2:	08 96       	adiw	r24, 0x08	; 8
 3f4:	0e 94 8d 01 	call	0x31a	; 0x31a <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
 3f8:	ce 01       	movw	r24, r28
 3fa:	08 96       	adiw	r24, 0x08	; 8
 3fc:	0e 94 6f 01 	call	0x2de	; 0x2de <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
 400:	6e 85       	ldd	r22, Y+14	; 0x0e
 402:	64 60       	ori	r22, 0x04	; 4
 404:	ce 01       	movw	r24, r28
 406:	08 96       	adiw	r24, 0x08	; 8
 408:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
	
	lq_returnHome(&device);
 40c:	ce 01       	movw	r24, r28
 40e:	08 96       	adiw	r24, 0x08	; 8
 410:	0e 94 83 01 	call	0x306	; 0x306 <lq_returnHome>

	return device;
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	fe 01       	movw	r30, r28
 418:	38 96       	adiw	r30, 0x08	; 8
 41a:	de 01       	movw	r26, r28
 41c:	11 96       	adiw	r26, 0x01	; 1
 41e:	01 90       	ld	r0, Z+
 420:	0d 92       	st	X+, r0
 422:	8a 95       	dec	r24
 424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	29 81       	ldd	r18, Y+1	; 0x01
 428:	3a 81       	ldd	r19, Y+2	; 0x02
 42a:	4b 81       	ldd	r20, Y+3	; 0x03
 42c:	5c 81       	ldd	r21, Y+4	; 0x04
 42e:	6d 81       	ldd	r22, Y+5	; 0x05
 430:	7e 81       	ldd	r23, Y+6	; 0x06
};
 432:	8f 81       	ldd	r24, Y+7	; 0x07
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	2e 96       	adiw	r28, 0x0e	; 14
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <__vector_5>:
#define MCP4725_ADDR 0x62 // MCP4725 I2C address

volatile uint8_t buttonPressed = 0;			//volatile keywords allows variables to be changed using interrupts


ISR(PCINT2_vect) {
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	8f 93       	push	r24
	// Check if button is pressed (PD2 is LOW)
	if (PIND & (1 << 2)) {
 454:	4a 9b       	sbis	0x09, 2	; 9
 456:	05 c0       	rjmp	.+10     	; 0x462 <__vector_5+0x1a>
		while(PIND & (1 << 2)) {}				//busy while loop for "debouncing"
 458:	4a 99       	sbic	0x09, 2	; 9
 45a:	fe cf       	rjmp	.-4      	; 0x458 <__vector_5+0x10>
		buttonPressed = 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		
		
	}
	
}
 462:	8f 91       	pop	r24
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <I2C_Start>:

// I2C Start condition
void I2C_Start(void) {
	TWCR1 = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);  // Send start condition
 46e:	84 ea       	ldi	r24, 0xA4	; 164
 470:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
 474:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 478:	88 23       	and	r24, r24
 47a:	e4 f7       	brge	.-8      	; 0x474 <I2C_Start+0x6>
}
 47c:	08 95       	ret

0000047e <I2C_Stop>:

// I2C Stop condition
void I2C_Stop(void) {
	TWCR1 = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);  // Send stop condition
 47e:	84 e9       	ldi	r24, 0x94	; 148
 480:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 484:	08 95       	ret

00000486 <I2C_Write>:
}

// I2C Write byte
void I2C_Write(uint8_t data) {
	TWDR1 = data;  // Load data to data register
 486:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);  // Start transmission
 48a:	84 e8       	ldi	r24, 0x84	; 132
 48c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
 490:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
 494:	88 23       	and	r24, r24
 496:	e4 f7       	brge	.-8      	; 0x490 <I2C_Write+0xa>
}
 498:	08 95       	ret

0000049a <MCP4725_SetValue>:

void MCP4725_SetValue(uint16_t value) {
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	c8 2f       	mov	r28, r24
 4a0:	d9 2f       	mov	r29, r25
	I2C_Start();
 4a2:	0e 94 37 02 	call	0x46e	; 0x46e <I2C_Start>
	I2C_Write(MCP4725_ADDR << 1);  // Write address with write bit (0)
 4a6:	84 ec       	ldi	r24, 0xC4	; 196
 4a8:	0e 94 43 02 	call	0x486	; 0x486 <I2C_Write>
	I2C_Write((value >> 8) & 0x0F);  // Send upper data bits (D11-D8)
 4ac:	8d 2f       	mov	r24, r29
 4ae:	8f 70       	andi	r24, 0x0F	; 15
 4b0:	0e 94 43 02 	call	0x486	; 0x486 <I2C_Write>
	I2C_Write(value & 0xFF);  // Send lower data bits (D7-D0)
 4b4:	8c 2f       	mov	r24, r28
 4b6:	0e 94 43 02 	call	0x486	; 0x486 <I2C_Write>
	I2C_Stop();
 4ba:	0e 94 3f 02 	call	0x47e	; 0x47e <I2C_Stop>
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <main>:
		

int main(void)
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	2b 97       	sbiw	r28, 0x0b	; 11
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRD &= (1<<2);		//sets pin D2 to input
 4d8:	8a b1       	in	r24, 0x0a	; 10
 4da:	84 70       	andi	r24, 0x04	; 4
 4dc:	8a b9       	out	0x0a, r24	; 10
	
	 PCICR |= (1 << PCIE2);  // Enable PCINT16-23 group interrupt
 4de:	e8 e6       	ldi	r30, 0x68	; 104
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	84 60       	ori	r24, 0x04	; 4
 4e6:	80 83       	st	Z, r24
	 PCMSK2 |= (1 << PCINT18);  // Enable interrupt for PD2 (PCINT18)
 4e8:	ed e6       	ldi	r30, 0x6D	; 109
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	84 60       	ori	r24, 0x04	; 4
 4f0:	80 83       	st	Z, r24
	 
	 char x_str[4];		//allegedly i can make this 4
	 uint8_t x = 0;
	 
	 i2c_master_init(I2C_SCL_FREQUENCY_100);			//SET LCD TO I2C0 PINS
 4f2:	60 ea       	ldi	r22, 0xA0	; 160
 4f4:	76 e8       	ldi	r23, 0x86	; 134
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_master_init>
	 LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	44 e0       	ldi	r20, 0x04	; 4
 502:	64 e1       	ldi	r22, 0x14	; 20
 504:	87 e2       	ldi	r24, 0x27	; 39
 506:	0e 94 96 01 	call	0x32c	; 0x32c <lq_init>
 50a:	2d 83       	std	Y+5, r18	; 0x05
 50c:	3e 83       	std	Y+6, r19	; 0x06
 50e:	4f 83       	std	Y+7, r20	; 0x07
 510:	58 87       	std	Y+8, r21	; 0x08
 512:	69 87       	std	Y+9, r22	; 0x09
 514:	7a 87       	std	Y+10, r23	; 0x0a
 516:	8b 87       	std	Y+11, r24	; 0x0b
	 lq_turnOnBacklight(&device);
 518:	ce 01       	movw	r24, r28
 51a:	05 96       	adiw	r24, 0x05	; 5
 51c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lq_turnOnBacklight>
	 
	 
	 uint16_t dac_value = 0;
	 sei(); //enables global interrupts
 520:	78 94       	sei
	 i2c_master_init(I2C_SCL_FREQUENCY_100);			//SET LCD TO I2C0 PINS
	 LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
	 lq_turnOnBacklight(&device);
	 
	 
	 uint16_t dac_value = 0;
 522:	00 e0       	ldi	r16, 0x00	; 0
 524:	10 e0       	ldi	r17, 0x00	; 0
	
	 PCICR |= (1 << PCIE2);  // Enable PCINT16-23 group interrupt
	 PCMSK2 |= (1 << PCINT18);  // Enable interrupt for PD2 (PCINT18)
	 
	 char x_str[4];		//allegedly i can make this 4
	 uint8_t x = 0;
 526:	f1 2c       	mov	r15, r1
 528:	02 c0       	rjmp	.+4      	; 0x52e <main+0x6a>
		
		MCP4725_SetValue(dac_value);

		// Toggle between high and low values
		if (dac_value == 4095) {
			dac_value = 0;  // Switch to low value
 52a:	00 e0       	ldi	r16, 0x00	; 0
 52c:	10 e0       	ldi	r17, 0x00	; 0
	 
	 uint16_t dac_value = 0;
	 sei(); //enables global interrupts
    while (1) 
    {	
		if(buttonPressed){
 52e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 532:	88 23       	and	r24, r24
 534:	09 f1       	breq	.+66     	; 0x578 <main+0xb4>
			
			x+=1;
 536:	f3 94       	inc	r15
			sprintf(x_str, "%d", x);
 538:	1f 92       	push	r1
 53a:	ff 92       	push	r15
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	9f 93       	push	r25
 542:	8f 93       	push	r24
 544:	ce 01       	movw	r24, r28
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	6c 01       	movw	r12, r24
 54a:	9f 93       	push	r25
 54c:	8f 93       	push	r24
 54e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <sprintf>
			lq_print(&device, x_str);
 552:	b6 01       	movw	r22, r12
 554:	ce 01       	movw	r24, r28
 556:	05 96       	adiw	r24, 0x05	; 5
 558:	0e 94 37 01 	call	0x26e	; 0x26e <lq_print>
			lq_setCursor(&device, 1, 0);
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	ce 01       	movw	r24, r28
 562:	05 96       	adiw	r24, 0x05	; 5
 564:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
			buttonPressed =0;
 568:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
		}
		
		MCP4725_SetValue(dac_value);
 578:	c8 01       	movw	r24, r16
 57a:	0e 94 4d 02 	call	0x49a	; 0x49a <MCP4725_SetValue>

		// Toggle between high and low values
		if (dac_value == 4095) {
 57e:	0f 3f       	cpi	r16, 0xFF	; 255
 580:	1f 40       	sbci	r17, 0x0F	; 15
 582:	99 f2       	breq	.-90     	; 0x52a <main+0x66>
			dac_value = 0;  // Switch to low value
			} else {
			dac_value = 4095;  // Switch to high value
 584:	0f ef       	ldi	r16, 0xFF	; 255
 586:	1f e0       	ldi	r17, 0x0F	; 15
 588:	d2 cf       	rjmp	.-92     	; 0x52e <main+0x6a>

0000058a <__udivmodsi4>:
 58a:	a1 e2       	ldi	r26, 0x21	; 33
 58c:	1a 2e       	mov	r1, r26
 58e:	aa 1b       	sub	r26, r26
 590:	bb 1b       	sub	r27, r27
 592:	fd 01       	movw	r30, r26
 594:	0d c0       	rjmp	.+26     	; 0x5b0 <__udivmodsi4_ep>

00000596 <__udivmodsi4_loop>:
 596:	aa 1f       	adc	r26, r26
 598:	bb 1f       	adc	r27, r27
 59a:	ee 1f       	adc	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	a2 17       	cp	r26, r18
 5a0:	b3 07       	cpc	r27, r19
 5a2:	e4 07       	cpc	r30, r20
 5a4:	f5 07       	cpc	r31, r21
 5a6:	20 f0       	brcs	.+8      	; 0x5b0 <__udivmodsi4_ep>
 5a8:	a2 1b       	sub	r26, r18
 5aa:	b3 0b       	sbc	r27, r19
 5ac:	e4 0b       	sbc	r30, r20
 5ae:	f5 0b       	sbc	r31, r21

000005b0 <__udivmodsi4_ep>:
 5b0:	66 1f       	adc	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	1a 94       	dec	r1
 5ba:	69 f7       	brne	.-38     	; 0x596 <__udivmodsi4_loop>
 5bc:	60 95       	com	r22
 5be:	70 95       	com	r23
 5c0:	80 95       	com	r24
 5c2:	90 95       	com	r25
 5c4:	9b 01       	movw	r18, r22
 5c6:	ac 01       	movw	r20, r24
 5c8:	bd 01       	movw	r22, r26
 5ca:	cf 01       	movw	r24, r30
 5cc:	08 95       	ret

000005ce <sprintf>:
 5ce:	ae e0       	ldi	r26, 0x0E	; 14
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	ed ee       	ldi	r30, 0xED	; 237
 5d4:	f2 e0       	ldi	r31, 0x02	; 2
 5d6:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__prologue_saves__+0x1c>
 5da:	0d 89       	ldd	r16, Y+21	; 0x15
 5dc:	1e 89       	ldd	r17, Y+22	; 0x16
 5de:	86 e0       	ldi	r24, 0x06	; 6
 5e0:	8c 83       	std	Y+4, r24	; 0x04
 5e2:	1a 83       	std	Y+2, r17	; 0x02
 5e4:	09 83       	std	Y+1, r16	; 0x01
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	9f e7       	ldi	r25, 0x7F	; 127
 5ea:	9e 83       	std	Y+6, r25	; 0x06
 5ec:	8d 83       	std	Y+5, r24	; 0x05
 5ee:	ae 01       	movw	r20, r28
 5f0:	47 5e       	subi	r20, 0xE7	; 231
 5f2:	5f 4f       	sbci	r21, 0xFF	; 255
 5f4:	6f 89       	ldd	r22, Y+23	; 0x17
 5f6:	78 8d       	ldd	r23, Y+24	; 0x18
 5f8:	ce 01       	movw	r24, r28
 5fa:	01 96       	adiw	r24, 0x01	; 1
 5fc:	0e 94 09 03 	call	0x612	; 0x612 <vfprintf>
 600:	ef 81       	ldd	r30, Y+7	; 0x07
 602:	f8 85       	ldd	r31, Y+8	; 0x08
 604:	e0 0f       	add	r30, r16
 606:	f1 1f       	adc	r31, r17
 608:	10 82       	st	Z, r1
 60a:	2e 96       	adiw	r28, 0x0e	; 14
 60c:	e4 e0       	ldi	r30, 0x04	; 4
 60e:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__epilogue_restores__+0x1c>

00000612 <vfprintf>:
 612:	ab e0       	ldi	r26, 0x0B	; 11
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	ef e0       	ldi	r30, 0x0F	; 15
 618:	f3 e0       	ldi	r31, 0x03	; 3
 61a:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__prologue_saves__>
 61e:	6c 01       	movw	r12, r24
 620:	7b 01       	movw	r14, r22
 622:	8a 01       	movw	r16, r20
 624:	fc 01       	movw	r30, r24
 626:	17 82       	std	Z+7, r1	; 0x07
 628:	16 82       	std	Z+6, r1	; 0x06
 62a:	83 81       	ldd	r24, Z+3	; 0x03
 62c:	81 ff       	sbrs	r24, 1
 62e:	cc c1       	rjmp	.+920    	; 0x9c8 <__stack+0xc9>
 630:	ce 01       	movw	r24, r28
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	3c 01       	movw	r6, r24
 636:	f6 01       	movw	r30, r12
 638:	93 81       	ldd	r25, Z+3	; 0x03
 63a:	f7 01       	movw	r30, r14
 63c:	93 fd       	sbrc	r25, 3
 63e:	85 91       	lpm	r24, Z+
 640:	93 ff       	sbrs	r25, 3
 642:	81 91       	ld	r24, Z+
 644:	7f 01       	movw	r14, r30
 646:	88 23       	and	r24, r24
 648:	09 f4       	brne	.+2      	; 0x64c <vfprintf+0x3a>
 64a:	ba c1       	rjmp	.+884    	; 0x9c0 <__stack+0xc1>
 64c:	85 32       	cpi	r24, 0x25	; 37
 64e:	39 f4       	brne	.+14     	; 0x65e <vfprintf+0x4c>
 650:	93 fd       	sbrc	r25, 3
 652:	85 91       	lpm	r24, Z+
 654:	93 ff       	sbrs	r25, 3
 656:	81 91       	ld	r24, Z+
 658:	7f 01       	movw	r14, r30
 65a:	85 32       	cpi	r24, 0x25	; 37
 65c:	29 f4       	brne	.+10     	; 0x668 <vfprintf+0x56>
 65e:	b6 01       	movw	r22, r12
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 666:	e7 cf       	rjmp	.-50     	; 0x636 <vfprintf+0x24>
 668:	91 2c       	mov	r9, r1
 66a:	21 2c       	mov	r2, r1
 66c:	31 2c       	mov	r3, r1
 66e:	ff e1       	ldi	r31, 0x1F	; 31
 670:	f3 15       	cp	r31, r3
 672:	d8 f0       	brcs	.+54     	; 0x6aa <vfprintf+0x98>
 674:	8b 32       	cpi	r24, 0x2B	; 43
 676:	79 f0       	breq	.+30     	; 0x696 <vfprintf+0x84>
 678:	38 f4       	brcc	.+14     	; 0x688 <vfprintf+0x76>
 67a:	80 32       	cpi	r24, 0x20	; 32
 67c:	79 f0       	breq	.+30     	; 0x69c <vfprintf+0x8a>
 67e:	83 32       	cpi	r24, 0x23	; 35
 680:	a1 f4       	brne	.+40     	; 0x6aa <vfprintf+0x98>
 682:	23 2d       	mov	r18, r3
 684:	20 61       	ori	r18, 0x10	; 16
 686:	1d c0       	rjmp	.+58     	; 0x6c2 <vfprintf+0xb0>
 688:	8d 32       	cpi	r24, 0x2D	; 45
 68a:	61 f0       	breq	.+24     	; 0x6a4 <vfprintf+0x92>
 68c:	80 33       	cpi	r24, 0x30	; 48
 68e:	69 f4       	brne	.+26     	; 0x6aa <vfprintf+0x98>
 690:	23 2d       	mov	r18, r3
 692:	21 60       	ori	r18, 0x01	; 1
 694:	16 c0       	rjmp	.+44     	; 0x6c2 <vfprintf+0xb0>
 696:	83 2d       	mov	r24, r3
 698:	82 60       	ori	r24, 0x02	; 2
 69a:	38 2e       	mov	r3, r24
 69c:	e3 2d       	mov	r30, r3
 69e:	e4 60       	ori	r30, 0x04	; 4
 6a0:	3e 2e       	mov	r3, r30
 6a2:	2a c0       	rjmp	.+84     	; 0x6f8 <vfprintf+0xe6>
 6a4:	f3 2d       	mov	r31, r3
 6a6:	f8 60       	ori	r31, 0x08	; 8
 6a8:	1d c0       	rjmp	.+58     	; 0x6e4 <vfprintf+0xd2>
 6aa:	37 fc       	sbrc	r3, 7
 6ac:	2d c0       	rjmp	.+90     	; 0x708 <vfprintf+0xf6>
 6ae:	20 ed       	ldi	r18, 0xD0	; 208
 6b0:	28 0f       	add	r18, r24
 6b2:	2a 30       	cpi	r18, 0x0A	; 10
 6b4:	40 f0       	brcs	.+16     	; 0x6c6 <vfprintf+0xb4>
 6b6:	8e 32       	cpi	r24, 0x2E	; 46
 6b8:	b9 f4       	brne	.+46     	; 0x6e8 <vfprintf+0xd6>
 6ba:	36 fc       	sbrc	r3, 6
 6bc:	81 c1       	rjmp	.+770    	; 0x9c0 <__stack+0xc1>
 6be:	23 2d       	mov	r18, r3
 6c0:	20 64       	ori	r18, 0x40	; 64
 6c2:	32 2e       	mov	r3, r18
 6c4:	19 c0       	rjmp	.+50     	; 0x6f8 <vfprintf+0xe6>
 6c6:	36 fe       	sbrs	r3, 6
 6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <vfprintf+0xc4>
 6ca:	8a e0       	ldi	r24, 0x0A	; 10
 6cc:	98 9e       	mul	r9, r24
 6ce:	20 0d       	add	r18, r0
 6d0:	11 24       	eor	r1, r1
 6d2:	92 2e       	mov	r9, r18
 6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <vfprintf+0xe6>
 6d6:	ea e0       	ldi	r30, 0x0A	; 10
 6d8:	2e 9e       	mul	r2, r30
 6da:	20 0d       	add	r18, r0
 6dc:	11 24       	eor	r1, r1
 6de:	22 2e       	mov	r2, r18
 6e0:	f3 2d       	mov	r31, r3
 6e2:	f0 62       	ori	r31, 0x20	; 32
 6e4:	3f 2e       	mov	r3, r31
 6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <vfprintf+0xe6>
 6e8:	8c 36       	cpi	r24, 0x6C	; 108
 6ea:	21 f4       	brne	.+8      	; 0x6f4 <vfprintf+0xe2>
 6ec:	83 2d       	mov	r24, r3
 6ee:	80 68       	ori	r24, 0x80	; 128
 6f0:	38 2e       	mov	r3, r24
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <vfprintf+0xe6>
 6f4:	88 36       	cpi	r24, 0x68	; 104
 6f6:	41 f4       	brne	.+16     	; 0x708 <vfprintf+0xf6>
 6f8:	f7 01       	movw	r30, r14
 6fa:	93 fd       	sbrc	r25, 3
 6fc:	85 91       	lpm	r24, Z+
 6fe:	93 ff       	sbrs	r25, 3
 700:	81 91       	ld	r24, Z+
 702:	7f 01       	movw	r14, r30
 704:	81 11       	cpse	r24, r1
 706:	b3 cf       	rjmp	.-154    	; 0x66e <vfprintf+0x5c>
 708:	98 2f       	mov	r25, r24
 70a:	9f 7d       	andi	r25, 0xDF	; 223
 70c:	95 54       	subi	r25, 0x45	; 69
 70e:	93 30       	cpi	r25, 0x03	; 3
 710:	28 f4       	brcc	.+10     	; 0x71c <vfprintf+0x10a>
 712:	0c 5f       	subi	r16, 0xFC	; 252
 714:	1f 4f       	sbci	r17, 0xFF	; 255
 716:	9f e3       	ldi	r25, 0x3F	; 63
 718:	99 83       	std	Y+1, r25	; 0x01
 71a:	0d c0       	rjmp	.+26     	; 0x736 <vfprintf+0x124>
 71c:	83 36       	cpi	r24, 0x63	; 99
 71e:	31 f0       	breq	.+12     	; 0x72c <vfprintf+0x11a>
 720:	83 37       	cpi	r24, 0x73	; 115
 722:	71 f0       	breq	.+28     	; 0x740 <vfprintf+0x12e>
 724:	83 35       	cpi	r24, 0x53	; 83
 726:	09 f0       	breq	.+2      	; 0x72a <vfprintf+0x118>
 728:	59 c0       	rjmp	.+178    	; 0x7dc <vfprintf+0x1ca>
 72a:	21 c0       	rjmp	.+66     	; 0x76e <vfprintf+0x15c>
 72c:	f8 01       	movw	r30, r16
 72e:	80 81       	ld	r24, Z
 730:	89 83       	std	Y+1, r24	; 0x01
 732:	0e 5f       	subi	r16, 0xFE	; 254
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	88 24       	eor	r8, r8
 738:	83 94       	inc	r8
 73a:	91 2c       	mov	r9, r1
 73c:	53 01       	movw	r10, r6
 73e:	13 c0       	rjmp	.+38     	; 0x766 <vfprintf+0x154>
 740:	28 01       	movw	r4, r16
 742:	f2 e0       	ldi	r31, 0x02	; 2
 744:	4f 0e       	add	r4, r31
 746:	51 1c       	adc	r5, r1
 748:	f8 01       	movw	r30, r16
 74a:	a0 80       	ld	r10, Z
 74c:	b1 80       	ldd	r11, Z+1	; 0x01
 74e:	36 fe       	sbrs	r3, 6
 750:	03 c0       	rjmp	.+6      	; 0x758 <vfprintf+0x146>
 752:	69 2d       	mov	r22, r9
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <vfprintf+0x14a>
 758:	6f ef       	ldi	r22, 0xFF	; 255
 75a:	7f ef       	ldi	r23, 0xFF	; 255
 75c:	c5 01       	movw	r24, r10
 75e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <strnlen>
 762:	4c 01       	movw	r8, r24
 764:	82 01       	movw	r16, r4
 766:	f3 2d       	mov	r31, r3
 768:	ff 77       	andi	r31, 0x7F	; 127
 76a:	3f 2e       	mov	r3, r31
 76c:	16 c0       	rjmp	.+44     	; 0x79a <vfprintf+0x188>
 76e:	28 01       	movw	r4, r16
 770:	22 e0       	ldi	r18, 0x02	; 2
 772:	42 0e       	add	r4, r18
 774:	51 1c       	adc	r5, r1
 776:	f8 01       	movw	r30, r16
 778:	a0 80       	ld	r10, Z
 77a:	b1 80       	ldd	r11, Z+1	; 0x01
 77c:	36 fe       	sbrs	r3, 6
 77e:	03 c0       	rjmp	.+6      	; 0x786 <vfprintf+0x174>
 780:	69 2d       	mov	r22, r9
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x178>
 786:	6f ef       	ldi	r22, 0xFF	; 255
 788:	7f ef       	ldi	r23, 0xFF	; 255
 78a:	c5 01       	movw	r24, r10
 78c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <strnlen_P>
 790:	4c 01       	movw	r8, r24
 792:	f3 2d       	mov	r31, r3
 794:	f0 68       	ori	r31, 0x80	; 128
 796:	3f 2e       	mov	r3, r31
 798:	82 01       	movw	r16, r4
 79a:	33 fc       	sbrc	r3, 3
 79c:	1b c0       	rjmp	.+54     	; 0x7d4 <vfprintf+0x1c2>
 79e:	82 2d       	mov	r24, r2
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	88 16       	cp	r8, r24
 7a4:	99 06       	cpc	r9, r25
 7a6:	b0 f4       	brcc	.+44     	; 0x7d4 <vfprintf+0x1c2>
 7a8:	b6 01       	movw	r22, r12
 7aa:	80 e2       	ldi	r24, 0x20	; 32
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 7b2:	2a 94       	dec	r2
 7b4:	f4 cf       	rjmp	.-24     	; 0x79e <vfprintf+0x18c>
 7b6:	f5 01       	movw	r30, r10
 7b8:	37 fc       	sbrc	r3, 7
 7ba:	85 91       	lpm	r24, Z+
 7bc:	37 fe       	sbrs	r3, 7
 7be:	81 91       	ld	r24, Z+
 7c0:	5f 01       	movw	r10, r30
 7c2:	b6 01       	movw	r22, r12
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 7ca:	21 10       	cpse	r2, r1
 7cc:	2a 94       	dec	r2
 7ce:	21 e0       	ldi	r18, 0x01	; 1
 7d0:	82 1a       	sub	r8, r18
 7d2:	91 08       	sbc	r9, r1
 7d4:	81 14       	cp	r8, r1
 7d6:	91 04       	cpc	r9, r1
 7d8:	71 f7       	brne	.-36     	; 0x7b6 <vfprintf+0x1a4>
 7da:	e8 c0       	rjmp	.+464    	; 0x9ac <__stack+0xad>
 7dc:	84 36       	cpi	r24, 0x64	; 100
 7de:	11 f0       	breq	.+4      	; 0x7e4 <vfprintf+0x1d2>
 7e0:	89 36       	cpi	r24, 0x69	; 105
 7e2:	41 f5       	brne	.+80     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7e4:	f8 01       	movw	r30, r16
 7e6:	37 fe       	sbrs	r3, 7
 7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <vfprintf+0x1e6>
 7ea:	60 81       	ld	r22, Z
 7ec:	71 81       	ldd	r23, Z+1	; 0x01
 7ee:	82 81       	ldd	r24, Z+2	; 0x02
 7f0:	93 81       	ldd	r25, Z+3	; 0x03
 7f2:	0c 5f       	subi	r16, 0xFC	; 252
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	08 c0       	rjmp	.+16     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f8:	60 81       	ld	r22, Z
 7fa:	71 81       	ldd	r23, Z+1	; 0x01
 7fc:	07 2e       	mov	r0, r23
 7fe:	00 0c       	add	r0, r0
 800:	88 0b       	sbc	r24, r24
 802:	99 0b       	sbc	r25, r25
 804:	0e 5f       	subi	r16, 0xFE	; 254
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	f3 2d       	mov	r31, r3
 80a:	ff 76       	andi	r31, 0x6F	; 111
 80c:	3f 2e       	mov	r3, r31
 80e:	97 ff       	sbrs	r25, 7
 810:	09 c0       	rjmp	.+18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 812:	90 95       	com	r25
 814:	80 95       	com	r24
 816:	70 95       	com	r23
 818:	61 95       	neg	r22
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	f0 68       	ori	r31, 0x80	; 128
 822:	3f 2e       	mov	r3, r31
 824:	2a e0       	ldi	r18, 0x0A	; 10
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	a3 01       	movw	r20, r6
 82a:	0e 94 3c 05 	call	0xa78	; 0xa78 <__ultoa_invert>
 82e:	88 2e       	mov	r8, r24
 830:	86 18       	sub	r8, r6
 832:	45 c0       	rjmp	.+138    	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 834:	85 37       	cpi	r24, 0x75	; 117
 836:	31 f4       	brne	.+12     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 838:	23 2d       	mov	r18, r3
 83a:	2f 7e       	andi	r18, 0xEF	; 239
 83c:	b2 2e       	mov	r11, r18
 83e:	2a e0       	ldi	r18, 0x0A	; 10
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	25 c0       	rjmp	.+74     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 844:	93 2d       	mov	r25, r3
 846:	99 7f       	andi	r25, 0xF9	; 249
 848:	b9 2e       	mov	r11, r25
 84a:	8f 36       	cpi	r24, 0x6F	; 111
 84c:	c1 f0       	breq	.+48     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 84e:	18 f4       	brcc	.+6      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 850:	88 35       	cpi	r24, 0x58	; 88
 852:	79 f0       	breq	.+30     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 854:	b5 c0       	rjmp	.+362    	; 0x9c0 <__stack+0xc1>
 856:	80 37       	cpi	r24, 0x70	; 112
 858:	19 f0       	breq	.+6      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 85a:	88 37       	cpi	r24, 0x78	; 120
 85c:	21 f0       	breq	.+8      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 85e:	b0 c0       	rjmp	.+352    	; 0x9c0 <__stack+0xc1>
 860:	e9 2f       	mov	r30, r25
 862:	e0 61       	ori	r30, 0x10	; 16
 864:	be 2e       	mov	r11, r30
 866:	b4 fe       	sbrs	r11, 4
 868:	0d c0       	rjmp	.+26     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 86a:	fb 2d       	mov	r31, r11
 86c:	f4 60       	ori	r31, 0x04	; 4
 86e:	bf 2e       	mov	r11, r31
 870:	09 c0       	rjmp	.+18     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 872:	34 fe       	sbrs	r3, 4
 874:	0a c0       	rjmp	.+20     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 876:	29 2f       	mov	r18, r25
 878:	26 60       	ori	r18, 0x06	; 6
 87a:	b2 2e       	mov	r11, r18
 87c:	06 c0       	rjmp	.+12     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 87e:	28 e0       	ldi	r18, 0x08	; 8
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	05 c0       	rjmp	.+10     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 884:	20 e1       	ldi	r18, 0x10	; 16
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	02 c0       	rjmp	.+4      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 88a:	20 e1       	ldi	r18, 0x10	; 16
 88c:	32 e0       	ldi	r19, 0x02	; 2
 88e:	f8 01       	movw	r30, r16
 890:	b7 fe       	sbrs	r11, 7
 892:	07 c0       	rjmp	.+14     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 894:	60 81       	ld	r22, Z
 896:	71 81       	ldd	r23, Z+1	; 0x01
 898:	82 81       	ldd	r24, Z+2	; 0x02
 89a:	93 81       	ldd	r25, Z+3	; 0x03
 89c:	0c 5f       	subi	r16, 0xFC	; 252
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 8a2:	60 81       	ld	r22, Z
 8a4:	71 81       	ldd	r23, Z+1	; 0x01
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 5f       	subi	r16, 0xFE	; 254
 8ac:	1f 4f       	sbci	r17, 0xFF	; 255
 8ae:	a3 01       	movw	r20, r6
 8b0:	0e 94 3c 05 	call	0xa78	; 0xa78 <__ultoa_invert>
 8b4:	88 2e       	mov	r8, r24
 8b6:	86 18       	sub	r8, r6
 8b8:	fb 2d       	mov	r31, r11
 8ba:	ff 77       	andi	r31, 0x7F	; 127
 8bc:	3f 2e       	mov	r3, r31
 8be:	36 fe       	sbrs	r3, 6
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8c2:	23 2d       	mov	r18, r3
 8c4:	2e 7f       	andi	r18, 0xFE	; 254
 8c6:	a2 2e       	mov	r10, r18
 8c8:	89 14       	cp	r8, r9
 8ca:	58 f4       	brcc	.+22     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8cc:	34 fe       	sbrs	r3, 4
 8ce:	0b c0       	rjmp	.+22     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8d0:	32 fc       	sbrc	r3, 2
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8d4:	83 2d       	mov	r24, r3
 8d6:	8e 7e       	andi	r24, 0xEE	; 238
 8d8:	a8 2e       	mov	r10, r24
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8dc:	b8 2c       	mov	r11, r8
 8de:	a3 2c       	mov	r10, r3
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8e2:	b8 2c       	mov	r11, r8
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8e6:	b9 2c       	mov	r11, r9
 8e8:	a4 fe       	sbrs	r10, 4
 8ea:	0f c0       	rjmp	.+30     	; 0x90a <__stack+0xb>
 8ec:	fe 01       	movw	r30, r28
 8ee:	e8 0d       	add	r30, r8
 8f0:	f1 1d       	adc	r31, r1
 8f2:	80 81       	ld	r24, Z
 8f4:	80 33       	cpi	r24, 0x30	; 48
 8f6:	21 f4       	brne	.+8      	; 0x900 <__stack+0x1>
 8f8:	9a 2d       	mov	r25, r10
 8fa:	99 7e       	andi	r25, 0xE9	; 233
 8fc:	a9 2e       	mov	r10, r25
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <__stack+0x13>
 900:	a2 fe       	sbrs	r10, 2
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
 904:	b3 94       	inc	r11
 906:	b3 94       	inc	r11
 908:	04 c0       	rjmp	.+8      	; 0x912 <__stack+0x13>
 90a:	8a 2d       	mov	r24, r10
 90c:	86 78       	andi	r24, 0x86	; 134
 90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0x13>
 910:	b3 94       	inc	r11
 912:	a3 fc       	sbrc	r10, 3
 914:	11 c0       	rjmp	.+34     	; 0x938 <__stack+0x39>
 916:	a0 fe       	sbrs	r10, 0
 918:	06 c0       	rjmp	.+12     	; 0x926 <__stack+0x27>
 91a:	b2 14       	cp	r11, r2
 91c:	88 f4       	brcc	.+34     	; 0x940 <__stack+0x41>
 91e:	28 0c       	add	r2, r8
 920:	92 2c       	mov	r9, r2
 922:	9b 18       	sub	r9, r11
 924:	0e c0       	rjmp	.+28     	; 0x942 <__stack+0x43>
 926:	b2 14       	cp	r11, r2
 928:	60 f4       	brcc	.+24     	; 0x942 <__stack+0x43>
 92a:	b6 01       	movw	r22, r12
 92c:	80 e2       	ldi	r24, 0x20	; 32
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 934:	b3 94       	inc	r11
 936:	f7 cf       	rjmp	.-18     	; 0x926 <__stack+0x27>
 938:	b2 14       	cp	r11, r2
 93a:	18 f4       	brcc	.+6      	; 0x942 <__stack+0x43>
 93c:	2b 18       	sub	r2, r11
 93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0x45>
 940:	98 2c       	mov	r9, r8
 942:	21 2c       	mov	r2, r1
 944:	a4 fe       	sbrs	r10, 4
 946:	10 c0       	rjmp	.+32     	; 0x968 <__stack+0x69>
 948:	b6 01       	movw	r22, r12
 94a:	80 e3       	ldi	r24, 0x30	; 48
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 952:	a2 fe       	sbrs	r10, 2
 954:	17 c0       	rjmp	.+46     	; 0x984 <__stack+0x85>
 956:	a1 fc       	sbrc	r10, 1
 958:	03 c0       	rjmp	.+6      	; 0x960 <__stack+0x61>
 95a:	88 e7       	ldi	r24, 0x78	; 120
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
 960:	88 e5       	ldi	r24, 0x58	; 88
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	b6 01       	movw	r22, r12
 966:	0c c0       	rjmp	.+24     	; 0x980 <__stack+0x81>
 968:	8a 2d       	mov	r24, r10
 96a:	86 78       	andi	r24, 0x86	; 134
 96c:	59 f0       	breq	.+22     	; 0x984 <__stack+0x85>
 96e:	a1 fe       	sbrs	r10, 1
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
 972:	8b e2       	ldi	r24, 0x2B	; 43
 974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x79>
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	a7 fc       	sbrc	r10, 7
 97a:	8d e2       	ldi	r24, 0x2D	; 45
 97c:	b6 01       	movw	r22, r12
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 984:	89 14       	cp	r8, r9
 986:	38 f4       	brcc	.+14     	; 0x996 <__stack+0x97>
 988:	b6 01       	movw	r22, r12
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 992:	9a 94       	dec	r9
 994:	f7 cf       	rjmp	.-18     	; 0x984 <__stack+0x85>
 996:	8a 94       	dec	r8
 998:	f3 01       	movw	r30, r6
 99a:	e8 0d       	add	r30, r8
 99c:	f1 1d       	adc	r31, r1
 99e:	80 81       	ld	r24, Z
 9a0:	b6 01       	movw	r22, r12
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 9a8:	81 10       	cpse	r8, r1
 9aa:	f5 cf       	rjmp	.-22     	; 0x996 <__stack+0x97>
 9ac:	22 20       	and	r2, r2
 9ae:	09 f4       	brne	.+2      	; 0x9b2 <__stack+0xb3>
 9b0:	42 ce       	rjmp	.-892    	; 0x636 <vfprintf+0x24>
 9b2:	b6 01       	movw	r22, r12
 9b4:	80 e2       	ldi	r24, 0x20	; 32
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 9bc:	2a 94       	dec	r2
 9be:	f6 cf       	rjmp	.-20     	; 0x9ac <__stack+0xad>
 9c0:	f6 01       	movw	r30, r12
 9c2:	86 81       	ldd	r24, Z+6	; 0x06
 9c4:	97 81       	ldd	r25, Z+7	; 0x07
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__stack+0xcd>
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	9f ef       	ldi	r25, 0xFF	; 255
 9cc:	2b 96       	adiw	r28, 0x0b	; 11
 9ce:	e2 e1       	ldi	r30, 0x12	; 18
 9d0:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__epilogue_restores__>

000009d4 <strnlen_P>:
 9d4:	fc 01       	movw	r30, r24
 9d6:	05 90       	lpm	r0, Z+
 9d8:	61 50       	subi	r22, 0x01	; 1
 9da:	70 40       	sbci	r23, 0x00	; 0
 9dc:	01 10       	cpse	r0, r1
 9de:	d8 f7       	brcc	.-10     	; 0x9d6 <strnlen_P+0x2>
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	8e 0f       	add	r24, r30
 9e6:	9f 1f       	adc	r25, r31
 9e8:	08 95       	ret

000009ea <strnlen>:
 9ea:	fc 01       	movw	r30, r24
 9ec:	61 50       	subi	r22, 0x01	; 1
 9ee:	70 40       	sbci	r23, 0x00	; 0
 9f0:	01 90       	ld	r0, Z+
 9f2:	01 10       	cpse	r0, r1
 9f4:	d8 f7       	brcc	.-10     	; 0x9ec <strnlen+0x2>
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	8e 0f       	add	r24, r30
 9fc:	9f 1f       	adc	r25, r31
 9fe:	08 95       	ret

00000a00 <fputc>:
 a00:	0f 93       	push	r16
 a02:	1f 93       	push	r17
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	fb 01       	movw	r30, r22
 a0a:	23 81       	ldd	r18, Z+3	; 0x03
 a0c:	21 fd       	sbrc	r18, 1
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <fputc+0x16>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	2c c0       	rjmp	.+88     	; 0xa6e <fputc+0x6e>
 a16:	22 ff       	sbrs	r18, 2
 a18:	16 c0       	rjmp	.+44     	; 0xa46 <fputc+0x46>
 a1a:	46 81       	ldd	r20, Z+6	; 0x06
 a1c:	57 81       	ldd	r21, Z+7	; 0x07
 a1e:	24 81       	ldd	r18, Z+4	; 0x04
 a20:	35 81       	ldd	r19, Z+5	; 0x05
 a22:	42 17       	cp	r20, r18
 a24:	53 07       	cpc	r21, r19
 a26:	44 f4       	brge	.+16     	; 0xa38 <fputc+0x38>
 a28:	a0 81       	ld	r26, Z
 a2a:	b1 81       	ldd	r27, Z+1	; 0x01
 a2c:	9d 01       	movw	r18, r26
 a2e:	2f 5f       	subi	r18, 0xFF	; 255
 a30:	3f 4f       	sbci	r19, 0xFF	; 255
 a32:	31 83       	std	Z+1, r19	; 0x01
 a34:	20 83       	st	Z, r18
 a36:	8c 93       	st	X, r24
 a38:	26 81       	ldd	r18, Z+6	; 0x06
 a3a:	37 81       	ldd	r19, Z+7	; 0x07
 a3c:	2f 5f       	subi	r18, 0xFF	; 255
 a3e:	3f 4f       	sbci	r19, 0xFF	; 255
 a40:	37 83       	std	Z+7, r19	; 0x07
 a42:	26 83       	std	Z+6, r18	; 0x06
 a44:	14 c0       	rjmp	.+40     	; 0xa6e <fputc+0x6e>
 a46:	8b 01       	movw	r16, r22
 a48:	ec 01       	movw	r28, r24
 a4a:	fb 01       	movw	r30, r22
 a4c:	00 84       	ldd	r0, Z+8	; 0x08
 a4e:	f1 85       	ldd	r31, Z+9	; 0x09
 a50:	e0 2d       	mov	r30, r0
 a52:	09 95       	icall
 a54:	89 2b       	or	r24, r25
 a56:	e1 f6       	brne	.-72     	; 0xa10 <fputc+0x10>
 a58:	d8 01       	movw	r26, r16
 a5a:	16 96       	adiw	r26, 0x06	; 6
 a5c:	8d 91       	ld	r24, X+
 a5e:	9c 91       	ld	r25, X
 a60:	17 97       	sbiw	r26, 0x07	; 7
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	17 96       	adiw	r26, 0x07	; 7
 a66:	9c 93       	st	X, r25
 a68:	8e 93       	st	-X, r24
 a6a:	16 97       	sbiw	r26, 0x06	; 6
 a6c:	ce 01       	movw	r24, r28
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	08 95       	ret

00000a78 <__ultoa_invert>:
 a78:	fa 01       	movw	r30, r20
 a7a:	aa 27       	eor	r26, r26
 a7c:	28 30       	cpi	r18, 0x08	; 8
 a7e:	51 f1       	breq	.+84     	; 0xad4 <__ultoa_invert+0x5c>
 a80:	20 31       	cpi	r18, 0x10	; 16
 a82:	81 f1       	breq	.+96     	; 0xae4 <__ultoa_invert+0x6c>
 a84:	e8 94       	clt
 a86:	6f 93       	push	r22
 a88:	6e 7f       	andi	r22, 0xFE	; 254
 a8a:	6e 5f       	subi	r22, 0xFE	; 254
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	af 4f       	sbci	r26, 0xFF	; 255
 a94:	b1 e0       	ldi	r27, 0x01	; 1
 a96:	3e d0       	rcall	.+124    	; 0xb14 <__ultoa_invert+0x9c>
 a98:	b4 e0       	ldi	r27, 0x04	; 4
 a9a:	3c d0       	rcall	.+120    	; 0xb14 <__ultoa_invert+0x9c>
 a9c:	67 0f       	add	r22, r23
 a9e:	78 1f       	adc	r23, r24
 aa0:	89 1f       	adc	r24, r25
 aa2:	9a 1f       	adc	r25, r26
 aa4:	a1 1d       	adc	r26, r1
 aa6:	68 0f       	add	r22, r24
 aa8:	79 1f       	adc	r23, r25
 aaa:	8a 1f       	adc	r24, r26
 aac:	91 1d       	adc	r25, r1
 aae:	a1 1d       	adc	r26, r1
 ab0:	6a 0f       	add	r22, r26
 ab2:	71 1d       	adc	r23, r1
 ab4:	81 1d       	adc	r24, r1
 ab6:	91 1d       	adc	r25, r1
 ab8:	a1 1d       	adc	r26, r1
 aba:	20 d0       	rcall	.+64     	; 0xafc <__ultoa_invert+0x84>
 abc:	09 f4       	brne	.+2      	; 0xac0 <__ultoa_invert+0x48>
 abe:	68 94       	set
 ac0:	3f 91       	pop	r19
 ac2:	2a e0       	ldi	r18, 0x0A	; 10
 ac4:	26 9f       	mul	r18, r22
 ac6:	11 24       	eor	r1, r1
 ac8:	30 19       	sub	r19, r0
 aca:	30 5d       	subi	r19, 0xD0	; 208
 acc:	31 93       	st	Z+, r19
 ace:	de f6       	brtc	.-74     	; 0xa86 <__ultoa_invert+0xe>
 ad0:	cf 01       	movw	r24, r30
 ad2:	08 95       	ret
 ad4:	46 2f       	mov	r20, r22
 ad6:	47 70       	andi	r20, 0x07	; 7
 ad8:	40 5d       	subi	r20, 0xD0	; 208
 ada:	41 93       	st	Z+, r20
 adc:	b3 e0       	ldi	r27, 0x03	; 3
 ade:	0f d0       	rcall	.+30     	; 0xafe <__ultoa_invert+0x86>
 ae0:	c9 f7       	brne	.-14     	; 0xad4 <__ultoa_invert+0x5c>
 ae2:	f6 cf       	rjmp	.-20     	; 0xad0 <__ultoa_invert+0x58>
 ae4:	46 2f       	mov	r20, r22
 ae6:	4f 70       	andi	r20, 0x0F	; 15
 ae8:	40 5d       	subi	r20, 0xD0	; 208
 aea:	4a 33       	cpi	r20, 0x3A	; 58
 aec:	18 f0       	brcs	.+6      	; 0xaf4 <__ultoa_invert+0x7c>
 aee:	49 5d       	subi	r20, 0xD9	; 217
 af0:	31 fd       	sbrc	r19, 1
 af2:	40 52       	subi	r20, 0x20	; 32
 af4:	41 93       	st	Z+, r20
 af6:	02 d0       	rcall	.+4      	; 0xafc <__ultoa_invert+0x84>
 af8:	a9 f7       	brne	.-22     	; 0xae4 <__ultoa_invert+0x6c>
 afa:	ea cf       	rjmp	.-44     	; 0xad0 <__ultoa_invert+0x58>
 afc:	b4 e0       	ldi	r27, 0x04	; 4
 afe:	a6 95       	lsr	r26
 b00:	97 95       	ror	r25
 b02:	87 95       	ror	r24
 b04:	77 95       	ror	r23
 b06:	67 95       	ror	r22
 b08:	ba 95       	dec	r27
 b0a:	c9 f7       	brne	.-14     	; 0xafe <__ultoa_invert+0x86>
 b0c:	00 97       	sbiw	r24, 0x00	; 0
 b0e:	61 05       	cpc	r22, r1
 b10:	71 05       	cpc	r23, r1
 b12:	08 95       	ret
 b14:	9b 01       	movw	r18, r22
 b16:	ac 01       	movw	r20, r24
 b18:	0a 2e       	mov	r0, r26
 b1a:	06 94       	lsr	r0
 b1c:	57 95       	ror	r21
 b1e:	47 95       	ror	r20
 b20:	37 95       	ror	r19
 b22:	27 95       	ror	r18
 b24:	ba 95       	dec	r27
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__ultoa_invert+0xa2>
 b28:	62 0f       	add	r22, r18
 b2a:	73 1f       	adc	r23, r19
 b2c:	84 1f       	adc	r24, r20
 b2e:	95 1f       	adc	r25, r21
 b30:	a0 1d       	adc	r26, r0
 b32:	08 95       	ret

00000b34 <__prologue_saves__>:
 b34:	2f 92       	push	r2
 b36:	3f 92       	push	r3
 b38:	4f 92       	push	r4
 b3a:	5f 92       	push	r5
 b3c:	6f 92       	push	r6
 b3e:	7f 92       	push	r7
 b40:	8f 92       	push	r8
 b42:	9f 92       	push	r9
 b44:	af 92       	push	r10
 b46:	bf 92       	push	r11
 b48:	cf 92       	push	r12
 b4a:	df 92       	push	r13
 b4c:	ef 92       	push	r14
 b4e:	ff 92       	push	r15
 b50:	0f 93       	push	r16
 b52:	1f 93       	push	r17
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	cd b7       	in	r28, 0x3d	; 61
 b5a:	de b7       	in	r29, 0x3e	; 62
 b5c:	ca 1b       	sub	r28, r26
 b5e:	db 0b       	sbc	r29, r27
 b60:	0f b6       	in	r0, 0x3f	; 63
 b62:	f8 94       	cli
 b64:	de bf       	out	0x3e, r29	; 62
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	cd bf       	out	0x3d, r28	; 61
 b6a:	09 94       	ijmp

00000b6c <__epilogue_restores__>:
 b6c:	2a 88       	ldd	r2, Y+18	; 0x12
 b6e:	39 88       	ldd	r3, Y+17	; 0x11
 b70:	48 88       	ldd	r4, Y+16	; 0x10
 b72:	5f 84       	ldd	r5, Y+15	; 0x0f
 b74:	6e 84       	ldd	r6, Y+14	; 0x0e
 b76:	7d 84       	ldd	r7, Y+13	; 0x0d
 b78:	8c 84       	ldd	r8, Y+12	; 0x0c
 b7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 b7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 b7e:	b9 84       	ldd	r11, Y+9	; 0x09
 b80:	c8 84       	ldd	r12, Y+8	; 0x08
 b82:	df 80       	ldd	r13, Y+7	; 0x07
 b84:	ee 80       	ldd	r14, Y+6	; 0x06
 b86:	fd 80       	ldd	r15, Y+5	; 0x05
 b88:	0c 81       	ldd	r16, Y+4	; 0x04
 b8a:	1b 81       	ldd	r17, Y+3	; 0x03
 b8c:	aa 81       	ldd	r26, Y+2	; 0x02
 b8e:	b9 81       	ldd	r27, Y+1	; 0x01
 b90:	ce 0f       	add	r28, r30
 b92:	d1 1d       	adc	r29, r1
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	f8 94       	cli
 b98:	de bf       	out	0x3e, r29	; 62
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	cd bf       	out	0x3d, r28	; 61
 b9e:	ed 01       	movw	r28, r26
 ba0:	08 95       	ret

00000ba2 <_exit>:
 ba2:	f8 94       	cli

00000ba4 <__stop_program>:
 ba4:	ff cf       	rjmp	.-2      	; 0xba4 <__stop_program>
