
Buttons_and_LCD_w_InterruptsDAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b36  00000bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000bce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001be3  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb6  00000000  00000000  000029bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b79  00000000  00000000  00003675  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  000041f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000870  00000000  00000000  00004584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001057  00000000  00000000  00004df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005e4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e3       	ldi	r30, 0x36	; 54
  c8:	fb e0       	ldi	r31, 0x0B	; 11
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 30       	cpi	r26, 0x05	; 5
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  ea:	0c 94 99 05 	jmp	0xb32	; 0xb32 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_master_init>:
	}
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
  f2:	9b 01       	movw	r18, r22
  f4:	ac 01       	movw	r20, r24
  f6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	74 e2       	ldi	r23, 0x24	; 36
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 8d 02 	call	0x51a	; 0x51a <__udivmodsi4>
 106:	da 01       	movw	r26, r20
 108:	c9 01       	movw	r24, r18
 10a:	40 97       	sbiw	r24, 0x10	; 16
 10c:	a1 09       	sbc	r26, r1
 10e:	b1 09       	sbc	r27, r1
 110:	b6 95       	lsr	r27
 112:	a7 95       	ror	r26
 114:	97 95       	ror	r25
 116:	87 95       	ror	r24
 118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 11c:	08 95       	ret

0000011e <i2c_master_start>:
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	10 82       	st	Z, r1
 124:	94 ea       	ldi	r25, 0xA4	; 164
 126:	90 83       	st	Z, r25
 128:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12c:	99 23       	and	r25, r25
 12e:	e4 f7       	brge	.-8      	; 0x128 <i2c_master_start+0xa>
 130:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	98 30       	cpi	r25, 0x08	; 8
 138:	11 f0       	breq	.+4      	; 0x13e <i2c_master_start+0x20>
 13a:	90 31       	cpi	r25, 0x10	; 16
 13c:	b1 f4       	brne	.+44     	; 0x16a <i2c_master_start+0x4c>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	86 2b       	or	r24, r22
 146:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <i2c_master_start+0x32>
 158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15c:	88 7f       	andi	r24, 0xF8	; 248
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	31 f0       	breq	.+12     	; 0x16e <i2c_master_start+0x50>
 162:	80 34       	cpi	r24, 0x40	; 64
 164:	31 f4       	brne	.+12     	; 0x172 <i2c_master_start+0x54>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	08 95       	ret
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
 172:	84 e1       	ldi	r24, 0x14	; 20
 174:	08 95       	ret

00000176 <i2c_master_write>:
 176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <i2c_master_write+0xa>
 188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 18c:	88 7f       	andi	r24, 0xF8	; 248
 18e:	88 32       	cpi	r24, 0x28	; 40
 190:	11 f0       	breq	.+4      	; 0x196 <i2c_master_write+0x20>
 192:	85 e1       	ldi	r24, 0x15	; 21
 194:	08 95       	ret
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret

0000019a <i2c_master_stop>:
 19a:	84 e9       	ldi	r24, 0x94	; 148
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a0:	08 95       	ret

000001a2 <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
 1a2:	cf 93       	push	r28
 1a4:	c6 2f       	mov	r28, r22
	uint8_t status = i2c_master_start(address, I2C_WRITE);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_master_start>
	if (status) return status;
 1ac:	81 11       	cpse	r24, r1
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <i2c_master_sendByte+0x1e>

	status = i2c_master_write(data);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_master_write>
	if (status) return status;
 1b6:	81 11       	cpse	r24, r1
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <i2c_master_sendByte+0x1e>

	i2c_master_stop();
 1ba:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_master_stop>
	
	return I2C_STATUS_SUCCESS;
 1be:	80 e0       	ldi	r24, 0x00	; 0
};
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
 1c4:	fc 01       	movw	r30, r24
 1c6:	23 81       	ldd	r18, Z+3	; 0x03
 1c8:	62 2b       	or	r22, r18
 1ca:	80 81       	ld	r24, Z
 1cc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <i2c_master_sendByte>
 1d0:	08 95       	ret

000001d2 <lq_turnOnBacklight>:
 1d2:	28 e0       	ldi	r18, 0x08	; 8
 1d4:	fc 01       	movw	r30, r24
 1d6:	23 83       	std	Z+3, r18	; 0x03
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 1de:	08 95       	ret

000001e0 <lq_writeDevicePulse>:
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	8c 01       	movw	r16, r24
 1e8:	c6 2f       	mov	r28, r22
 1ea:	64 60       	ori	r22, 0x04	; 4
 1ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lq_writeDevicePulse+0x12>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lq_writeDevicePulse+0x18>
 1f8:	6c 2f       	mov	r22, r28
 1fa:	6b 7f       	andi	r22, 0xFB	; 251
 1fc:	c8 01       	movw	r24, r16
 1fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 202:	87 ec       	ldi	r24, 0xC7	; 199
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lq_writeDevicePulse+0x26>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lq_writeDevicePulse+0x2c>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <lq_writeDevice4Bits>:
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 21e:	16 2f       	mov	r17, r22
 220:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 224:	61 2f       	mov	r22, r17
 226:	ce 01       	movw	r24, r28
 228:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lq_writeDevicePulse>
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	08 95       	ret

00000234 <lq_writeDeviceByte>:
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	8c 01       	movw	r16, r24
 240:	f4 2e       	mov	r15, r20
 242:	86 2f       	mov	r24, r22
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	90 e1       	ldi	r25, 0x10	; 16
 248:	69 9f       	mul	r22, r25
 24a:	e0 01       	movw	r28, r0
 24c:	11 24       	eor	r1, r1
 24e:	68 2f       	mov	r22, r24
 250:	64 2b       	or	r22, r20
 252:	c8 01       	movw	r24, r16
 254:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 258:	6c 2f       	mov	r22, r28
 25a:	6f 29       	or	r22, r15
 25c:	c8 01       	movw	r24, r16
 25e:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	08 95       	ret

0000026e <lq_print>:
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	8c 01       	movw	r16, r24
 278:	eb 01       	movw	r28, r22
 27a:	68 81       	ld	r22, Y
 27c:	06 c0       	rjmp	.+12     	; 0x28a <lq_print+0x1c>
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	c8 01       	movw	r24, r16
 282:	0e 94 1a 01 	call	0x234	; 0x234 <lq_writeDeviceByte>
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	68 81       	ld	r22, Y
 28a:	61 11       	cpse	r22, r1
 28c:	f8 cf       	rjmp	.-16     	; 0x27e <lq_print+0x10>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <lq_sendCommand>:
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	0e 94 1a 01 	call	0x234	; 0x234 <lq_writeDeviceByte>
 29e:	08 95       	ret

000002a0 <lq_setCursor>:
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <lq_setCursor+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <lq_setCursor+0x8>
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	19 82       	std	Y+1, r1	; 0x01
 2ae:	20 e4       	ldi	r18, 0x40	; 64
 2b0:	2a 83       	std	Y+2, r18	; 0x02
 2b2:	24 e1       	ldi	r18, 0x14	; 20
 2b4:	2b 83       	std	Y+3, r18	; 0x03
 2b6:	24 e5       	ldi	r18, 0x54	; 84
 2b8:	2c 83       	std	Y+4, r18	; 0x04
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	e6 0f       	add	r30, r22
 2c4:	f1 1d       	adc	r31, r1
 2c6:	60 81       	ld	r22, Z
 2c8:	64 0f       	add	r22, r20
 2ca:	60 68       	ori	r22, 0x80	; 128
 2cc:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <lq_clear>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	9f e1       	ldi	r25, 0x1F	; 31
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lq_clear+0x10>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lq_clear+0x16>
 2f4:	00 00       	nop
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	ce 01       	movw	r24, r28
 2fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <lq_returnHome>:
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 30c:	8f e3       	ldi	r24, 0x3F	; 63
 30e:	9f e1       	ldi	r25, 0x1F	; 31
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <lq_returnHome+0xa>
 314:	00 c0       	rjmp	.+0      	; 0x316 <lq_returnHome+0x10>
 316:	00 00       	nop
 318:	08 95       	ret

0000031a <lq_turnOnDisplay>:
 31a:	fc 01       	movw	r30, r24
 31c:	65 81       	ldd	r22, Z+5	; 0x05
 31e:	26 2f       	mov	r18, r22
 320:	24 60       	ori	r18, 0x04	; 4
 322:	25 83       	std	Z+5, r18	; 0x05
 324:	6c 60       	ori	r22, 0x0C	; 12
 326:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
 32a:	08 95       	ret

0000032c <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	2e 97       	sbiw	r28, 0x0e	; 14
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
 340:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
 342:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
 344:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
 346:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
 348:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
 352:	42 30       	cpi	r20, 0x02	; 2
 354:	18 f0       	brcs	.+6      	; 0x35c <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
 356:	82 2f       	mov	r24, r18
 358:	88 60       	ori	r24, 0x08	; 8
 35a:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
 35c:	22 23       	and	r18, r18
 35e:	29 f0       	breq	.+10     	; 0x36a <lq_init+0x3e>
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	19 f4       	brne	.+6      	; 0x36a <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
 364:	8c 85       	ldd	r24, Y+12	; 0x0c
 366:	84 60       	ori	r24, 0x04	; 4
 368:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	81 ee       	ldi	r24, 0xE1	; 225
 36e:	94 e0       	ldi	r25, 0x04	; 4
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <lq_init+0x44>
 378:	00 c0       	rjmp	.+0      	; 0x37a <lq_init+0x4e>
 37a:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	ce 01       	movw	r24, r28
 380:	08 96       	adiw	r24, 0x08	; 8
 382:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	83 ed       	ldi	r24, 0xD3	; 211
 38a:	90 e3       	ldi	r25, 0x30	; 48
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <lq_init+0x60>
 394:	00 c0       	rjmp	.+0      	; 0x396 <lq_init+0x6a>
 396:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
 398:	60 e3       	ldi	r22, 0x30	; 48
 39a:	ce 01       	movw	r24, r28
 39c:	08 96       	adiw	r24, 0x08	; 8
 39e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	8f e4       	ldi	r24, 0x4F	; 79
 3a4:	96 e4       	ldi	r25, 0x46	; 70
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lq_init+0x7a>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lq_init+0x80>
 3ac:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
 3ae:	60 e3       	ldi	r22, 0x30	; 48
 3b0:	ce 01       	movw	r24, r28
 3b2:	08 96       	adiw	r24, 0x08	; 8
 3b4:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 3b8:	8f e4       	ldi	r24, 0x4F	; 79
 3ba:	96 e4       	ldi	r25, 0x46	; 70
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lq_init+0x90>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lq_init+0x96>
 3c2:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
 3c4:	60 e3       	ldi	r22, 0x30	; 48
 3c6:	ce 01       	movw	r24, r28
 3c8:	08 96       	adiw	r24, 0x08	; 8
 3ca:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>
 3ce:	87 e5       	ldi	r24, 0x57	; 87
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lq_init+0xa6>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <lq_init+0xac>
 3d8:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
 3da:	60 e2       	ldi	r22, 0x20	; 32
 3dc:	ce 01       	movw	r24, r28
 3de:	08 96       	adiw	r24, 0x08	; 8
 3e0:	0e 94 0b 01 	call	0x216	; 0x216 <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
 3e4:	6c 85       	ldd	r22, Y+12	; 0x0c
 3e6:	60 62       	ori	r22, 0x20	; 32
 3e8:	ce 01       	movw	r24, r28
 3ea:	08 96       	adiw	r24, 0x08	; 8
 3ec:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
 3f0:	ce 01       	movw	r24, r28
 3f2:	08 96       	adiw	r24, 0x08	; 8
 3f4:	0e 94 8d 01 	call	0x31a	; 0x31a <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
 3f8:	ce 01       	movw	r24, r28
 3fa:	08 96       	adiw	r24, 0x08	; 8
 3fc:	0e 94 6f 01 	call	0x2de	; 0x2de <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
 400:	6e 85       	ldd	r22, Y+14	; 0x0e
 402:	64 60       	ori	r22, 0x04	; 4
 404:	ce 01       	movw	r24, r28
 406:	08 96       	adiw	r24, 0x08	; 8
 408:	0e 94 4c 01 	call	0x298	; 0x298 <lq_sendCommand>
	
	lq_returnHome(&device);
 40c:	ce 01       	movw	r24, r28
 40e:	08 96       	adiw	r24, 0x08	; 8
 410:	0e 94 83 01 	call	0x306	; 0x306 <lq_returnHome>

	return device;
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	fe 01       	movw	r30, r28
 418:	38 96       	adiw	r30, 0x08	; 8
 41a:	de 01       	movw	r26, r28
 41c:	11 96       	adiw	r26, 0x01	; 1
 41e:	01 90       	ld	r0, Z+
 420:	0d 92       	st	X+, r0
 422:	8a 95       	dec	r24
 424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	29 81       	ldd	r18, Y+1	; 0x01
 428:	3a 81       	ldd	r19, Y+2	; 0x02
 42a:	4b 81       	ldd	r20, Y+3	; 0x03
 42c:	5c 81       	ldd	r21, Y+4	; 0x04
 42e:	6d 81       	ldd	r22, Y+5	; 0x05
 430:	7e 81       	ldd	r23, Y+6	; 0x06
};
 432:	8f 81       	ldd	r24, Y+7	; 0x07
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	2e 96       	adiw	r28, 0x0e	; 14
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <__vector_5>:
#include "i2c_master.h"

volatile uint8_t buttonPressed = 0;			//volatile keywords allows variables to be changed using interrupts


ISR(PCINT2_vect) {
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	8f 93       	push	r24
	// Check if button is pressed (PD2 is LOW)
	if (PIND & (1 << 2)) {
 454:	4a 9b       	sbis	0x09, 2	; 9
 456:	05 c0       	rjmp	.+10     	; 0x462 <__vector_5+0x1a>
		while(PIND & (1 << 2)) {}				//busy while loop for "debouncing"
 458:	4a 99       	sbic	0x09, 2	; 9
 45a:	fe cf       	rjmp	.-4      	; 0x458 <__vector_5+0x10>
		buttonPressed = 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		
		
	}
	
}
 462:	8f 91       	pop	r24
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <main>:

		

int main(void)
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	2b 97       	sbiw	r28, 0x0b	; 11
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRD &= (1<<2);		//sets pin D2 to input
 482:	8a b1       	in	r24, 0x0a	; 10
 484:	84 70       	andi	r24, 0x04	; 4
 486:	8a b9       	out	0x0a, r24	; 10
	
	 PCICR |= (1 << PCIE2);  // Enable PCINT16-23 group interrupt
 488:	e8 e6       	ldi	r30, 0x68	; 104
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	80 83       	st	Z, r24
	 PCMSK2 |= (1 << PCINT18);  // Enable interrupt for PD2 (PCINT18)
 492:	ed e6       	ldi	r30, 0x6D	; 109
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	84 60       	ori	r24, 0x04	; 4
 49a:	80 83       	st	Z, r24
	 
	 char x_str[4];		//allegedly i can make this 4
	 uint8_t x = 0;
	 
	 i2c_master_init(I2C_SCL_FREQUENCY_100);			//SET LCD TO I2C0 PINS
 49c:	60 ea       	ldi	r22, 0xA0	; 160
 49e:	76 e8       	ldi	r23, 0x86	; 134
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_master_init>
	 LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	44 e0       	ldi	r20, 0x04	; 4
 4ac:	64 e1       	ldi	r22, 0x14	; 20
 4ae:	87 e2       	ldi	r24, 0x27	; 39
 4b0:	0e 94 96 01 	call	0x32c	; 0x32c <lq_init>
 4b4:	2d 83       	std	Y+5, r18	; 0x05
 4b6:	3e 83       	std	Y+6, r19	; 0x06
 4b8:	4f 83       	std	Y+7, r20	; 0x07
 4ba:	58 87       	std	Y+8, r21	; 0x08
 4bc:	69 87       	std	Y+9, r22	; 0x09
 4be:	7a 87       	std	Y+10, r23	; 0x0a
 4c0:	8b 87       	std	Y+11, r24	; 0x0b
	 lq_turnOnBacklight(&device);
 4c2:	ce 01       	movw	r24, r28
 4c4:	05 96       	adiw	r24, 0x05	; 5
 4c6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lq_turnOnBacklight>
	 
	 
	 
	 sei(); //enables global interrupts
 4ca:	78 94       	sei
	
	 PCICR |= (1 << PCIE2);  // Enable PCINT16-23 group interrupt
	 PCMSK2 |= (1 << PCINT18);  // Enable interrupt for PD2 (PCINT18)
	 
	 char x_str[4];		//allegedly i can make this 4
	 uint8_t x = 0;
 4cc:	10 e0       	ldi	r17, 0x00	; 0
	 
	 
	 sei(); //enables global interrupts
    while (1) 
    {	
		if(buttonPressed){
 4ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4d2:	88 23       	and	r24, r24
 4d4:	e1 f3       	breq	.-8      	; 0x4ce <main+0x60>
			
			x+=1;
 4d6:	1f 5f       	subi	r17, 0xFF	; 255
			sprintf(x_str, "%d", x);
 4d8:	1f 92       	push	r1
 4da:	1f 93       	push	r17
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	9f 93       	push	r25
 4e2:	8f 93       	push	r24
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	7c 01       	movw	r14, r24
 4ea:	9f 93       	push	r25
 4ec:	8f 93       	push	r24
 4ee:	0e 94 af 02 	call	0x55e	; 0x55e <sprintf>
			lq_print(&device, x_str);
 4f2:	b7 01       	movw	r22, r14
 4f4:	ce 01       	movw	r24, r28
 4f6:	05 96       	adiw	r24, 0x05	; 5
 4f8:	0e 94 37 01 	call	0x26e	; 0x26e <lq_print>
			lq_setCursor(&device, 1, 0);
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	ce 01       	movw	r24, r28
 502:	05 96       	adiw	r24, 0x05	; 5
 504:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lq_setCursor>
			buttonPressed =0;
 508:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	da cf       	rjmp	.-76     	; 0x4ce <main+0x60>

0000051a <__udivmodsi4>:
 51a:	a1 e2       	ldi	r26, 0x21	; 33
 51c:	1a 2e       	mov	r1, r26
 51e:	aa 1b       	sub	r26, r26
 520:	bb 1b       	sub	r27, r27
 522:	fd 01       	movw	r30, r26
 524:	0d c0       	rjmp	.+26     	; 0x540 <__udivmodsi4_ep>

00000526 <__udivmodsi4_loop>:
 526:	aa 1f       	adc	r26, r26
 528:	bb 1f       	adc	r27, r27
 52a:	ee 1f       	adc	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	a2 17       	cp	r26, r18
 530:	b3 07       	cpc	r27, r19
 532:	e4 07       	cpc	r30, r20
 534:	f5 07       	cpc	r31, r21
 536:	20 f0       	brcs	.+8      	; 0x540 <__udivmodsi4_ep>
 538:	a2 1b       	sub	r26, r18
 53a:	b3 0b       	sbc	r27, r19
 53c:	e4 0b       	sbc	r30, r20
 53e:	f5 0b       	sbc	r31, r21

00000540 <__udivmodsi4_ep>:
 540:	66 1f       	adc	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	1a 94       	dec	r1
 54a:	69 f7       	brne	.-38     	; 0x526 <__udivmodsi4_loop>
 54c:	60 95       	com	r22
 54e:	70 95       	com	r23
 550:	80 95       	com	r24
 552:	90 95       	com	r25
 554:	9b 01       	movw	r18, r22
 556:	ac 01       	movw	r20, r24
 558:	bd 01       	movw	r22, r26
 55a:	cf 01       	movw	r24, r30
 55c:	08 95       	ret

0000055e <sprintf>:
 55e:	ae e0       	ldi	r26, 0x0E	; 14
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e5 eb       	ldi	r30, 0xB5	; 181
 564:	f2 e0       	ldi	r31, 0x02	; 2
 566:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__prologue_saves__+0x1c>
 56a:	0d 89       	ldd	r16, Y+21	; 0x15
 56c:	1e 89       	ldd	r17, Y+22	; 0x16
 56e:	86 e0       	ldi	r24, 0x06	; 6
 570:	8c 83       	std	Y+4, r24	; 0x04
 572:	1a 83       	std	Y+2, r17	; 0x02
 574:	09 83       	std	Y+1, r16	; 0x01
 576:	8f ef       	ldi	r24, 0xFF	; 255
 578:	9f e7       	ldi	r25, 0x7F	; 127
 57a:	9e 83       	std	Y+6, r25	; 0x06
 57c:	8d 83       	std	Y+5, r24	; 0x05
 57e:	ae 01       	movw	r20, r28
 580:	47 5e       	subi	r20, 0xE7	; 231
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	6f 89       	ldd	r22, Y+23	; 0x17
 586:	78 8d       	ldd	r23, Y+24	; 0x18
 588:	ce 01       	movw	r24, r28
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <vfprintf>
 590:	ef 81       	ldd	r30, Y+7	; 0x07
 592:	f8 85       	ldd	r31, Y+8	; 0x08
 594:	e0 0f       	add	r30, r16
 596:	f1 1f       	adc	r31, r17
 598:	10 82       	st	Z, r1
 59a:	2e 96       	adiw	r28, 0x0e	; 14
 59c:	e4 e0       	ldi	r30, 0x04	; 4
 59e:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__epilogue_restores__+0x1c>

000005a2 <vfprintf>:
 5a2:	ab e0       	ldi	r26, 0x0B	; 11
 5a4:	b0 e0       	ldi	r27, 0x00	; 0
 5a6:	e7 ed       	ldi	r30, 0xD7	; 215
 5a8:	f2 e0       	ldi	r31, 0x02	; 2
 5aa:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__prologue_saves__>
 5ae:	6c 01       	movw	r12, r24
 5b0:	7b 01       	movw	r14, r22
 5b2:	8a 01       	movw	r16, r20
 5b4:	fc 01       	movw	r30, r24
 5b6:	17 82       	std	Z+7, r1	; 0x07
 5b8:	16 82       	std	Z+6, r1	; 0x06
 5ba:	83 81       	ldd	r24, Z+3	; 0x03
 5bc:	81 ff       	sbrs	r24, 1
 5be:	cc c1       	rjmp	.+920    	; 0x958 <__stack+0x59>
 5c0:	ce 01       	movw	r24, r28
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	3c 01       	movw	r6, r24
 5c6:	f6 01       	movw	r30, r12
 5c8:	93 81       	ldd	r25, Z+3	; 0x03
 5ca:	f7 01       	movw	r30, r14
 5cc:	93 fd       	sbrc	r25, 3
 5ce:	85 91       	lpm	r24, Z+
 5d0:	93 ff       	sbrs	r25, 3
 5d2:	81 91       	ld	r24, Z+
 5d4:	7f 01       	movw	r14, r30
 5d6:	88 23       	and	r24, r24
 5d8:	09 f4       	brne	.+2      	; 0x5dc <vfprintf+0x3a>
 5da:	ba c1       	rjmp	.+884    	; 0x950 <__stack+0x51>
 5dc:	85 32       	cpi	r24, 0x25	; 37
 5de:	39 f4       	brne	.+14     	; 0x5ee <vfprintf+0x4c>
 5e0:	93 fd       	sbrc	r25, 3
 5e2:	85 91       	lpm	r24, Z+
 5e4:	93 ff       	sbrs	r25, 3
 5e6:	81 91       	ld	r24, Z+
 5e8:	7f 01       	movw	r14, r30
 5ea:	85 32       	cpi	r24, 0x25	; 37
 5ec:	29 f4       	brne	.+10     	; 0x5f8 <vfprintf+0x56>
 5ee:	b6 01       	movw	r22, r12
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 5f6:	e7 cf       	rjmp	.-50     	; 0x5c6 <vfprintf+0x24>
 5f8:	91 2c       	mov	r9, r1
 5fa:	21 2c       	mov	r2, r1
 5fc:	31 2c       	mov	r3, r1
 5fe:	ff e1       	ldi	r31, 0x1F	; 31
 600:	f3 15       	cp	r31, r3
 602:	d8 f0       	brcs	.+54     	; 0x63a <vfprintf+0x98>
 604:	8b 32       	cpi	r24, 0x2B	; 43
 606:	79 f0       	breq	.+30     	; 0x626 <vfprintf+0x84>
 608:	38 f4       	brcc	.+14     	; 0x618 <vfprintf+0x76>
 60a:	80 32       	cpi	r24, 0x20	; 32
 60c:	79 f0       	breq	.+30     	; 0x62c <vfprintf+0x8a>
 60e:	83 32       	cpi	r24, 0x23	; 35
 610:	a1 f4       	brne	.+40     	; 0x63a <vfprintf+0x98>
 612:	23 2d       	mov	r18, r3
 614:	20 61       	ori	r18, 0x10	; 16
 616:	1d c0       	rjmp	.+58     	; 0x652 <vfprintf+0xb0>
 618:	8d 32       	cpi	r24, 0x2D	; 45
 61a:	61 f0       	breq	.+24     	; 0x634 <vfprintf+0x92>
 61c:	80 33       	cpi	r24, 0x30	; 48
 61e:	69 f4       	brne	.+26     	; 0x63a <vfprintf+0x98>
 620:	23 2d       	mov	r18, r3
 622:	21 60       	ori	r18, 0x01	; 1
 624:	16 c0       	rjmp	.+44     	; 0x652 <vfprintf+0xb0>
 626:	83 2d       	mov	r24, r3
 628:	82 60       	ori	r24, 0x02	; 2
 62a:	38 2e       	mov	r3, r24
 62c:	e3 2d       	mov	r30, r3
 62e:	e4 60       	ori	r30, 0x04	; 4
 630:	3e 2e       	mov	r3, r30
 632:	2a c0       	rjmp	.+84     	; 0x688 <vfprintf+0xe6>
 634:	f3 2d       	mov	r31, r3
 636:	f8 60       	ori	r31, 0x08	; 8
 638:	1d c0       	rjmp	.+58     	; 0x674 <vfprintf+0xd2>
 63a:	37 fc       	sbrc	r3, 7
 63c:	2d c0       	rjmp	.+90     	; 0x698 <vfprintf+0xf6>
 63e:	20 ed       	ldi	r18, 0xD0	; 208
 640:	28 0f       	add	r18, r24
 642:	2a 30       	cpi	r18, 0x0A	; 10
 644:	40 f0       	brcs	.+16     	; 0x656 <vfprintf+0xb4>
 646:	8e 32       	cpi	r24, 0x2E	; 46
 648:	b9 f4       	brne	.+46     	; 0x678 <vfprintf+0xd6>
 64a:	36 fc       	sbrc	r3, 6
 64c:	81 c1       	rjmp	.+770    	; 0x950 <__stack+0x51>
 64e:	23 2d       	mov	r18, r3
 650:	20 64       	ori	r18, 0x40	; 64
 652:	32 2e       	mov	r3, r18
 654:	19 c0       	rjmp	.+50     	; 0x688 <vfprintf+0xe6>
 656:	36 fe       	sbrs	r3, 6
 658:	06 c0       	rjmp	.+12     	; 0x666 <vfprintf+0xc4>
 65a:	8a e0       	ldi	r24, 0x0A	; 10
 65c:	98 9e       	mul	r9, r24
 65e:	20 0d       	add	r18, r0
 660:	11 24       	eor	r1, r1
 662:	92 2e       	mov	r9, r18
 664:	11 c0       	rjmp	.+34     	; 0x688 <vfprintf+0xe6>
 666:	ea e0       	ldi	r30, 0x0A	; 10
 668:	2e 9e       	mul	r2, r30
 66a:	20 0d       	add	r18, r0
 66c:	11 24       	eor	r1, r1
 66e:	22 2e       	mov	r2, r18
 670:	f3 2d       	mov	r31, r3
 672:	f0 62       	ori	r31, 0x20	; 32
 674:	3f 2e       	mov	r3, r31
 676:	08 c0       	rjmp	.+16     	; 0x688 <vfprintf+0xe6>
 678:	8c 36       	cpi	r24, 0x6C	; 108
 67a:	21 f4       	brne	.+8      	; 0x684 <vfprintf+0xe2>
 67c:	83 2d       	mov	r24, r3
 67e:	80 68       	ori	r24, 0x80	; 128
 680:	38 2e       	mov	r3, r24
 682:	02 c0       	rjmp	.+4      	; 0x688 <vfprintf+0xe6>
 684:	88 36       	cpi	r24, 0x68	; 104
 686:	41 f4       	brne	.+16     	; 0x698 <vfprintf+0xf6>
 688:	f7 01       	movw	r30, r14
 68a:	93 fd       	sbrc	r25, 3
 68c:	85 91       	lpm	r24, Z+
 68e:	93 ff       	sbrs	r25, 3
 690:	81 91       	ld	r24, Z+
 692:	7f 01       	movw	r14, r30
 694:	81 11       	cpse	r24, r1
 696:	b3 cf       	rjmp	.-154    	; 0x5fe <vfprintf+0x5c>
 698:	98 2f       	mov	r25, r24
 69a:	9f 7d       	andi	r25, 0xDF	; 223
 69c:	95 54       	subi	r25, 0x45	; 69
 69e:	93 30       	cpi	r25, 0x03	; 3
 6a0:	28 f4       	brcc	.+10     	; 0x6ac <vfprintf+0x10a>
 6a2:	0c 5f       	subi	r16, 0xFC	; 252
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	9f e3       	ldi	r25, 0x3F	; 63
 6a8:	99 83       	std	Y+1, r25	; 0x01
 6aa:	0d c0       	rjmp	.+26     	; 0x6c6 <vfprintf+0x124>
 6ac:	83 36       	cpi	r24, 0x63	; 99
 6ae:	31 f0       	breq	.+12     	; 0x6bc <vfprintf+0x11a>
 6b0:	83 37       	cpi	r24, 0x73	; 115
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <vfprintf+0x12e>
 6b4:	83 35       	cpi	r24, 0x53	; 83
 6b6:	09 f0       	breq	.+2      	; 0x6ba <vfprintf+0x118>
 6b8:	59 c0       	rjmp	.+178    	; 0x76c <vfprintf+0x1ca>
 6ba:	21 c0       	rjmp	.+66     	; 0x6fe <vfprintf+0x15c>
 6bc:	f8 01       	movw	r30, r16
 6be:	80 81       	ld	r24, Z
 6c0:	89 83       	std	Y+1, r24	; 0x01
 6c2:	0e 5f       	subi	r16, 0xFE	; 254
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	88 24       	eor	r8, r8
 6c8:	83 94       	inc	r8
 6ca:	91 2c       	mov	r9, r1
 6cc:	53 01       	movw	r10, r6
 6ce:	13 c0       	rjmp	.+38     	; 0x6f6 <vfprintf+0x154>
 6d0:	28 01       	movw	r4, r16
 6d2:	f2 e0       	ldi	r31, 0x02	; 2
 6d4:	4f 0e       	add	r4, r31
 6d6:	51 1c       	adc	r5, r1
 6d8:	f8 01       	movw	r30, r16
 6da:	a0 80       	ld	r10, Z
 6dc:	b1 80       	ldd	r11, Z+1	; 0x01
 6de:	36 fe       	sbrs	r3, 6
 6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <vfprintf+0x146>
 6e2:	69 2d       	mov	r22, r9
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <vfprintf+0x14a>
 6e8:	6f ef       	ldi	r22, 0xFF	; 255
 6ea:	7f ef       	ldi	r23, 0xFF	; 255
 6ec:	c5 01       	movw	r24, r10
 6ee:	0e 94 bd 04 	call	0x97a	; 0x97a <strnlen>
 6f2:	4c 01       	movw	r8, r24
 6f4:	82 01       	movw	r16, r4
 6f6:	f3 2d       	mov	r31, r3
 6f8:	ff 77       	andi	r31, 0x7F	; 127
 6fa:	3f 2e       	mov	r3, r31
 6fc:	16 c0       	rjmp	.+44     	; 0x72a <vfprintf+0x188>
 6fe:	28 01       	movw	r4, r16
 700:	22 e0       	ldi	r18, 0x02	; 2
 702:	42 0e       	add	r4, r18
 704:	51 1c       	adc	r5, r1
 706:	f8 01       	movw	r30, r16
 708:	a0 80       	ld	r10, Z
 70a:	b1 80       	ldd	r11, Z+1	; 0x01
 70c:	36 fe       	sbrs	r3, 6
 70e:	03 c0       	rjmp	.+6      	; 0x716 <vfprintf+0x174>
 710:	69 2d       	mov	r22, r9
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <vfprintf+0x178>
 716:	6f ef       	ldi	r22, 0xFF	; 255
 718:	7f ef       	ldi	r23, 0xFF	; 255
 71a:	c5 01       	movw	r24, r10
 71c:	0e 94 b2 04 	call	0x964	; 0x964 <strnlen_P>
 720:	4c 01       	movw	r8, r24
 722:	f3 2d       	mov	r31, r3
 724:	f0 68       	ori	r31, 0x80	; 128
 726:	3f 2e       	mov	r3, r31
 728:	82 01       	movw	r16, r4
 72a:	33 fc       	sbrc	r3, 3
 72c:	1b c0       	rjmp	.+54     	; 0x764 <vfprintf+0x1c2>
 72e:	82 2d       	mov	r24, r2
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	88 16       	cp	r8, r24
 734:	99 06       	cpc	r9, r25
 736:	b0 f4       	brcc	.+44     	; 0x764 <vfprintf+0x1c2>
 738:	b6 01       	movw	r22, r12
 73a:	80 e2       	ldi	r24, 0x20	; 32
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 742:	2a 94       	dec	r2
 744:	f4 cf       	rjmp	.-24     	; 0x72e <vfprintf+0x18c>
 746:	f5 01       	movw	r30, r10
 748:	37 fc       	sbrc	r3, 7
 74a:	85 91       	lpm	r24, Z+
 74c:	37 fe       	sbrs	r3, 7
 74e:	81 91       	ld	r24, Z+
 750:	5f 01       	movw	r10, r30
 752:	b6 01       	movw	r22, r12
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 75a:	21 10       	cpse	r2, r1
 75c:	2a 94       	dec	r2
 75e:	21 e0       	ldi	r18, 0x01	; 1
 760:	82 1a       	sub	r8, r18
 762:	91 08       	sbc	r9, r1
 764:	81 14       	cp	r8, r1
 766:	91 04       	cpc	r9, r1
 768:	71 f7       	brne	.-36     	; 0x746 <vfprintf+0x1a4>
 76a:	e8 c0       	rjmp	.+464    	; 0x93c <__stack+0x3d>
 76c:	84 36       	cpi	r24, 0x64	; 100
 76e:	11 f0       	breq	.+4      	; 0x774 <vfprintf+0x1d2>
 770:	89 36       	cpi	r24, 0x69	; 105
 772:	41 f5       	brne	.+80     	; 0x7c4 <vfprintf+0x222>
 774:	f8 01       	movw	r30, r16
 776:	37 fe       	sbrs	r3, 7
 778:	07 c0       	rjmp	.+14     	; 0x788 <vfprintf+0x1e6>
 77a:	60 81       	ld	r22, Z
 77c:	71 81       	ldd	r23, Z+1	; 0x01
 77e:	82 81       	ldd	r24, Z+2	; 0x02
 780:	93 81       	ldd	r25, Z+3	; 0x03
 782:	0c 5f       	subi	r16, 0xFC	; 252
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	08 c0       	rjmp	.+16     	; 0x798 <vfprintf+0x1f6>
 788:	60 81       	ld	r22, Z
 78a:	71 81       	ldd	r23, Z+1	; 0x01
 78c:	07 2e       	mov	r0, r23
 78e:	00 0c       	add	r0, r0
 790:	88 0b       	sbc	r24, r24
 792:	99 0b       	sbc	r25, r25
 794:	0e 5f       	subi	r16, 0xFE	; 254
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	f3 2d       	mov	r31, r3
 79a:	ff 76       	andi	r31, 0x6F	; 111
 79c:	3f 2e       	mov	r3, r31
 79e:	97 ff       	sbrs	r25, 7
 7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <vfprintf+0x212>
 7a2:	90 95       	com	r25
 7a4:	80 95       	com	r24
 7a6:	70 95       	com	r23
 7a8:	61 95       	neg	r22
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	f0 68       	ori	r31, 0x80	; 128
 7b2:	3f 2e       	mov	r3, r31
 7b4:	2a e0       	ldi	r18, 0x0A	; 10
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	a3 01       	movw	r20, r6
 7ba:	0e 94 04 05 	call	0xa08	; 0xa08 <__ultoa_invert>
 7be:	88 2e       	mov	r8, r24
 7c0:	86 18       	sub	r8, r6
 7c2:	45 c0       	rjmp	.+138    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7c4:	85 37       	cpi	r24, 0x75	; 117
 7c6:	31 f4       	brne	.+12     	; 0x7d4 <vfprintf+0x232>
 7c8:	23 2d       	mov	r18, r3
 7ca:	2f 7e       	andi	r18, 0xEF	; 239
 7cc:	b2 2e       	mov	r11, r18
 7ce:	2a e0       	ldi	r18, 0x0A	; 10
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	25 c0       	rjmp	.+74     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7d4:	93 2d       	mov	r25, r3
 7d6:	99 7f       	andi	r25, 0xF9	; 249
 7d8:	b9 2e       	mov	r11, r25
 7da:	8f 36       	cpi	r24, 0x6F	; 111
 7dc:	c1 f0       	breq	.+48     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7de:	18 f4       	brcc	.+6      	; 0x7e6 <vfprintf+0x244>
 7e0:	88 35       	cpi	r24, 0x58	; 88
 7e2:	79 f0       	breq	.+30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e4:	b5 c0       	rjmp	.+362    	; 0x950 <__stack+0x51>
 7e6:	80 37       	cpi	r24, 0x70	; 112
 7e8:	19 f0       	breq	.+6      	; 0x7f0 <vfprintf+0x24e>
 7ea:	88 37       	cpi	r24, 0x78	; 120
 7ec:	21 f0       	breq	.+8      	; 0x7f6 <vfprintf+0x254>
 7ee:	b0 c0       	rjmp	.+352    	; 0x950 <__stack+0x51>
 7f0:	e9 2f       	mov	r30, r25
 7f2:	e0 61       	ori	r30, 0x10	; 16
 7f4:	be 2e       	mov	r11, r30
 7f6:	b4 fe       	sbrs	r11, 4
 7f8:	0d c0       	rjmp	.+26     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7fa:	fb 2d       	mov	r31, r11
 7fc:	f4 60       	ori	r31, 0x04	; 4
 7fe:	bf 2e       	mov	r11, r31
 800:	09 c0       	rjmp	.+18     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 802:	34 fe       	sbrs	r3, 4
 804:	0a c0       	rjmp	.+20     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 806:	29 2f       	mov	r18, r25
 808:	26 60       	ori	r18, 0x06	; 6
 80a:	b2 2e       	mov	r11, r18
 80c:	06 c0       	rjmp	.+12     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80e:	28 e0       	ldi	r18, 0x08	; 8
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	05 c0       	rjmp	.+10     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 814:	20 e1       	ldi	r18, 0x10	; 16
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	20 e1       	ldi	r18, 0x10	; 16
 81c:	32 e0       	ldi	r19, 0x02	; 2
 81e:	f8 01       	movw	r30, r16
 820:	b7 fe       	sbrs	r11, 7
 822:	07 c0       	rjmp	.+14     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 824:	60 81       	ld	r22, Z
 826:	71 81       	ldd	r23, Z+1	; 0x01
 828:	82 81       	ldd	r24, Z+2	; 0x02
 82a:	93 81       	ldd	r25, Z+3	; 0x03
 82c:	0c 5f       	subi	r16, 0xFC	; 252
 82e:	1f 4f       	sbci	r17, 0xFF	; 255
 830:	06 c0       	rjmp	.+12     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 832:	60 81       	ld	r22, Z
 834:	71 81       	ldd	r23, Z+1	; 0x01
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 5f       	subi	r16, 0xFE	; 254
 83c:	1f 4f       	sbci	r17, 0xFF	; 255
 83e:	a3 01       	movw	r20, r6
 840:	0e 94 04 05 	call	0xa08	; 0xa08 <__ultoa_invert>
 844:	88 2e       	mov	r8, r24
 846:	86 18       	sub	r8, r6
 848:	fb 2d       	mov	r31, r11
 84a:	ff 77       	andi	r31, 0x7F	; 127
 84c:	3f 2e       	mov	r3, r31
 84e:	36 fe       	sbrs	r3, 6
 850:	0d c0       	rjmp	.+26     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 852:	23 2d       	mov	r18, r3
 854:	2e 7f       	andi	r18, 0xFE	; 254
 856:	a2 2e       	mov	r10, r18
 858:	89 14       	cp	r8, r9
 85a:	58 f4       	brcc	.+22     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 85c:	34 fe       	sbrs	r3, 4
 85e:	0b c0       	rjmp	.+22     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 860:	32 fc       	sbrc	r3, 2
 862:	09 c0       	rjmp	.+18     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 864:	83 2d       	mov	r24, r3
 866:	8e 7e       	andi	r24, 0xEE	; 238
 868:	a8 2e       	mov	r10, r24
 86a:	05 c0       	rjmp	.+10     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 86c:	b8 2c       	mov	r11, r8
 86e:	a3 2c       	mov	r10, r3
 870:	03 c0       	rjmp	.+6      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 872:	b8 2c       	mov	r11, r8
 874:	01 c0       	rjmp	.+2      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 876:	b9 2c       	mov	r11, r9
 878:	a4 fe       	sbrs	r10, 4
 87a:	0f c0       	rjmp	.+30     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 87c:	fe 01       	movw	r30, r28
 87e:	e8 0d       	add	r30, r8
 880:	f1 1d       	adc	r31, r1
 882:	80 81       	ld	r24, Z
 884:	80 33       	cpi	r24, 0x30	; 48
 886:	21 f4       	brne	.+8      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 888:	9a 2d       	mov	r25, r10
 88a:	99 7e       	andi	r25, 0xE9	; 233
 88c:	a9 2e       	mov	r10, r25
 88e:	09 c0       	rjmp	.+18     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 890:	a2 fe       	sbrs	r10, 2
 892:	06 c0       	rjmp	.+12     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 894:	b3 94       	inc	r11
 896:	b3 94       	inc	r11
 898:	04 c0       	rjmp	.+8      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89a:	8a 2d       	mov	r24, r10
 89c:	86 78       	andi	r24, 0x86	; 134
 89e:	09 f0       	breq	.+2      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 8a0:	b3 94       	inc	r11
 8a2:	a3 fc       	sbrc	r10, 3
 8a4:	11 c0       	rjmp	.+34     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8a6:	a0 fe       	sbrs	r10, 0
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8aa:	b2 14       	cp	r11, r2
 8ac:	88 f4       	brcc	.+34     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ae:	28 0c       	add	r2, r8
 8b0:	92 2c       	mov	r9, r2
 8b2:	9b 18       	sub	r9, r11
 8b4:	0e c0       	rjmp	.+28     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8b6:	b2 14       	cp	r11, r2
 8b8:	60 f4       	brcc	.+24     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8ba:	b6 01       	movw	r22, r12
 8bc:	80 e2       	ldi	r24, 0x20	; 32
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 8c4:	b3 94       	inc	r11
 8c6:	f7 cf       	rjmp	.-18     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8c8:	b2 14       	cp	r11, r2
 8ca:	18 f4       	brcc	.+6      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8cc:	2b 18       	sub	r2, r11
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8d0:	98 2c       	mov	r9, r8
 8d2:	21 2c       	mov	r2, r1
 8d4:	a4 fe       	sbrs	r10, 4
 8d6:	10 c0       	rjmp	.+32     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8d8:	b6 01       	movw	r22, r12
 8da:	80 e3       	ldi	r24, 0x30	; 48
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 8e2:	a2 fe       	sbrs	r10, 2
 8e4:	17 c0       	rjmp	.+46     	; 0x914 <__stack+0x15>
 8e6:	a1 fc       	sbrc	r10, 1
 8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8ea:	88 e7       	ldi	r24, 0x78	; 120
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8f0:	88 e5       	ldi	r24, 0x58	; 88
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	b6 01       	movw	r22, r12
 8f6:	0c c0       	rjmp	.+24     	; 0x910 <__stack+0x11>
 8f8:	8a 2d       	mov	r24, r10
 8fa:	86 78       	andi	r24, 0x86	; 134
 8fc:	59 f0       	breq	.+22     	; 0x914 <__stack+0x15>
 8fe:	a1 fe       	sbrs	r10, 1
 900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
 902:	8b e2       	ldi	r24, 0x2B	; 43
 904:	01 c0       	rjmp	.+2      	; 0x908 <__stack+0x9>
 906:	80 e2       	ldi	r24, 0x20	; 32
 908:	a7 fc       	sbrc	r10, 7
 90a:	8d e2       	ldi	r24, 0x2D	; 45
 90c:	b6 01       	movw	r22, r12
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 914:	89 14       	cp	r8, r9
 916:	38 f4       	brcc	.+14     	; 0x926 <__stack+0x27>
 918:	b6 01       	movw	r22, r12
 91a:	80 e3       	ldi	r24, 0x30	; 48
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 922:	9a 94       	dec	r9
 924:	f7 cf       	rjmp	.-18     	; 0x914 <__stack+0x15>
 926:	8a 94       	dec	r8
 928:	f3 01       	movw	r30, r6
 92a:	e8 0d       	add	r30, r8
 92c:	f1 1d       	adc	r31, r1
 92e:	80 81       	ld	r24, Z
 930:	b6 01       	movw	r22, r12
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 938:	81 10       	cpse	r8, r1
 93a:	f5 cf       	rjmp	.-22     	; 0x926 <__stack+0x27>
 93c:	22 20       	and	r2, r2
 93e:	09 f4       	brne	.+2      	; 0x942 <__stack+0x43>
 940:	42 ce       	rjmp	.-892    	; 0x5c6 <vfprintf+0x24>
 942:	b6 01       	movw	r22, r12
 944:	80 e2       	ldi	r24, 0x20	; 32
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 c8 04 	call	0x990	; 0x990 <fputc>
 94c:	2a 94       	dec	r2
 94e:	f6 cf       	rjmp	.-20     	; 0x93c <__stack+0x3d>
 950:	f6 01       	movw	r30, r12
 952:	86 81       	ldd	r24, Z+6	; 0x06
 954:	97 81       	ldd	r25, Z+7	; 0x07
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
 958:	8f ef       	ldi	r24, 0xFF	; 255
 95a:	9f ef       	ldi	r25, 0xFF	; 255
 95c:	2b 96       	adiw	r28, 0x0b	; 11
 95e:	e2 e1       	ldi	r30, 0x12	; 18
 960:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__epilogue_restores__>

00000964 <strnlen_P>:
 964:	fc 01       	movw	r30, r24
 966:	05 90       	lpm	r0, Z+
 968:	61 50       	subi	r22, 0x01	; 1
 96a:	70 40       	sbci	r23, 0x00	; 0
 96c:	01 10       	cpse	r0, r1
 96e:	d8 f7       	brcc	.-10     	; 0x966 <strnlen_P+0x2>
 970:	80 95       	com	r24
 972:	90 95       	com	r25
 974:	8e 0f       	add	r24, r30
 976:	9f 1f       	adc	r25, r31
 978:	08 95       	ret

0000097a <strnlen>:
 97a:	fc 01       	movw	r30, r24
 97c:	61 50       	subi	r22, 0x01	; 1
 97e:	70 40       	sbci	r23, 0x00	; 0
 980:	01 90       	ld	r0, Z+
 982:	01 10       	cpse	r0, r1
 984:	d8 f7       	brcc	.-10     	; 0x97c <strnlen+0x2>
 986:	80 95       	com	r24
 988:	90 95       	com	r25
 98a:	8e 0f       	add	r24, r30
 98c:	9f 1f       	adc	r25, r31
 98e:	08 95       	ret

00000990 <fputc>:
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	fb 01       	movw	r30, r22
 99a:	23 81       	ldd	r18, Z+3	; 0x03
 99c:	21 fd       	sbrc	r18, 1
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <fputc+0x16>
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	9f ef       	ldi	r25, 0xFF	; 255
 9a4:	2c c0       	rjmp	.+88     	; 0x9fe <fputc+0x6e>
 9a6:	22 ff       	sbrs	r18, 2
 9a8:	16 c0       	rjmp	.+44     	; 0x9d6 <fputc+0x46>
 9aa:	46 81       	ldd	r20, Z+6	; 0x06
 9ac:	57 81       	ldd	r21, Z+7	; 0x07
 9ae:	24 81       	ldd	r18, Z+4	; 0x04
 9b0:	35 81       	ldd	r19, Z+5	; 0x05
 9b2:	42 17       	cp	r20, r18
 9b4:	53 07       	cpc	r21, r19
 9b6:	44 f4       	brge	.+16     	; 0x9c8 <fputc+0x38>
 9b8:	a0 81       	ld	r26, Z
 9ba:	b1 81       	ldd	r27, Z+1	; 0x01
 9bc:	9d 01       	movw	r18, r26
 9be:	2f 5f       	subi	r18, 0xFF	; 255
 9c0:	3f 4f       	sbci	r19, 0xFF	; 255
 9c2:	31 83       	std	Z+1, r19	; 0x01
 9c4:	20 83       	st	Z, r18
 9c6:	8c 93       	st	X, r24
 9c8:	26 81       	ldd	r18, Z+6	; 0x06
 9ca:	37 81       	ldd	r19, Z+7	; 0x07
 9cc:	2f 5f       	subi	r18, 0xFF	; 255
 9ce:	3f 4f       	sbci	r19, 0xFF	; 255
 9d0:	37 83       	std	Z+7, r19	; 0x07
 9d2:	26 83       	std	Z+6, r18	; 0x06
 9d4:	14 c0       	rjmp	.+40     	; 0x9fe <fputc+0x6e>
 9d6:	8b 01       	movw	r16, r22
 9d8:	ec 01       	movw	r28, r24
 9da:	fb 01       	movw	r30, r22
 9dc:	00 84       	ldd	r0, Z+8	; 0x08
 9de:	f1 85       	ldd	r31, Z+9	; 0x09
 9e0:	e0 2d       	mov	r30, r0
 9e2:	09 95       	icall
 9e4:	89 2b       	or	r24, r25
 9e6:	e1 f6       	brne	.-72     	; 0x9a0 <fputc+0x10>
 9e8:	d8 01       	movw	r26, r16
 9ea:	16 96       	adiw	r26, 0x06	; 6
 9ec:	8d 91       	ld	r24, X+
 9ee:	9c 91       	ld	r25, X
 9f0:	17 97       	sbiw	r26, 0x07	; 7
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	17 96       	adiw	r26, 0x07	; 7
 9f6:	9c 93       	st	X, r25
 9f8:	8e 93       	st	-X, r24
 9fa:	16 97       	sbiw	r26, 0x06	; 6
 9fc:	ce 01       	movw	r24, r28
 9fe:	df 91       	pop	r29
 a00:	cf 91       	pop	r28
 a02:	1f 91       	pop	r17
 a04:	0f 91       	pop	r16
 a06:	08 95       	ret

00000a08 <__ultoa_invert>:
 a08:	fa 01       	movw	r30, r20
 a0a:	aa 27       	eor	r26, r26
 a0c:	28 30       	cpi	r18, 0x08	; 8
 a0e:	51 f1       	breq	.+84     	; 0xa64 <__ultoa_invert+0x5c>
 a10:	20 31       	cpi	r18, 0x10	; 16
 a12:	81 f1       	breq	.+96     	; 0xa74 <__ultoa_invert+0x6c>
 a14:	e8 94       	clt
 a16:	6f 93       	push	r22
 a18:	6e 7f       	andi	r22, 0xFE	; 254
 a1a:	6e 5f       	subi	r22, 0xFE	; 254
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	af 4f       	sbci	r26, 0xFF	; 255
 a24:	b1 e0       	ldi	r27, 0x01	; 1
 a26:	3e d0       	rcall	.+124    	; 0xaa4 <__ultoa_invert+0x9c>
 a28:	b4 e0       	ldi	r27, 0x04	; 4
 a2a:	3c d0       	rcall	.+120    	; 0xaa4 <__ultoa_invert+0x9c>
 a2c:	67 0f       	add	r22, r23
 a2e:	78 1f       	adc	r23, r24
 a30:	89 1f       	adc	r24, r25
 a32:	9a 1f       	adc	r25, r26
 a34:	a1 1d       	adc	r26, r1
 a36:	68 0f       	add	r22, r24
 a38:	79 1f       	adc	r23, r25
 a3a:	8a 1f       	adc	r24, r26
 a3c:	91 1d       	adc	r25, r1
 a3e:	a1 1d       	adc	r26, r1
 a40:	6a 0f       	add	r22, r26
 a42:	71 1d       	adc	r23, r1
 a44:	81 1d       	adc	r24, r1
 a46:	91 1d       	adc	r25, r1
 a48:	a1 1d       	adc	r26, r1
 a4a:	20 d0       	rcall	.+64     	; 0xa8c <__ultoa_invert+0x84>
 a4c:	09 f4       	brne	.+2      	; 0xa50 <__ultoa_invert+0x48>
 a4e:	68 94       	set
 a50:	3f 91       	pop	r19
 a52:	2a e0       	ldi	r18, 0x0A	; 10
 a54:	26 9f       	mul	r18, r22
 a56:	11 24       	eor	r1, r1
 a58:	30 19       	sub	r19, r0
 a5a:	30 5d       	subi	r19, 0xD0	; 208
 a5c:	31 93       	st	Z+, r19
 a5e:	de f6       	brtc	.-74     	; 0xa16 <__ultoa_invert+0xe>
 a60:	cf 01       	movw	r24, r30
 a62:	08 95       	ret
 a64:	46 2f       	mov	r20, r22
 a66:	47 70       	andi	r20, 0x07	; 7
 a68:	40 5d       	subi	r20, 0xD0	; 208
 a6a:	41 93       	st	Z+, r20
 a6c:	b3 e0       	ldi	r27, 0x03	; 3
 a6e:	0f d0       	rcall	.+30     	; 0xa8e <__ultoa_invert+0x86>
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__ultoa_invert+0x5c>
 a72:	f6 cf       	rjmp	.-20     	; 0xa60 <__ultoa_invert+0x58>
 a74:	46 2f       	mov	r20, r22
 a76:	4f 70       	andi	r20, 0x0F	; 15
 a78:	40 5d       	subi	r20, 0xD0	; 208
 a7a:	4a 33       	cpi	r20, 0x3A	; 58
 a7c:	18 f0       	brcs	.+6      	; 0xa84 <__ultoa_invert+0x7c>
 a7e:	49 5d       	subi	r20, 0xD9	; 217
 a80:	31 fd       	sbrc	r19, 1
 a82:	40 52       	subi	r20, 0x20	; 32
 a84:	41 93       	st	Z+, r20
 a86:	02 d0       	rcall	.+4      	; 0xa8c <__ultoa_invert+0x84>
 a88:	a9 f7       	brne	.-22     	; 0xa74 <__ultoa_invert+0x6c>
 a8a:	ea cf       	rjmp	.-44     	; 0xa60 <__ultoa_invert+0x58>
 a8c:	b4 e0       	ldi	r27, 0x04	; 4
 a8e:	a6 95       	lsr	r26
 a90:	97 95       	ror	r25
 a92:	87 95       	ror	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	ba 95       	dec	r27
 a9a:	c9 f7       	brne	.-14     	; 0xa8e <__ultoa_invert+0x86>
 a9c:	00 97       	sbiw	r24, 0x00	; 0
 a9e:	61 05       	cpc	r22, r1
 aa0:	71 05       	cpc	r23, r1
 aa2:	08 95       	ret
 aa4:	9b 01       	movw	r18, r22
 aa6:	ac 01       	movw	r20, r24
 aa8:	0a 2e       	mov	r0, r26
 aaa:	06 94       	lsr	r0
 aac:	57 95       	ror	r21
 aae:	47 95       	ror	r20
 ab0:	37 95       	ror	r19
 ab2:	27 95       	ror	r18
 ab4:	ba 95       	dec	r27
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__ultoa_invert+0xa2>
 ab8:	62 0f       	add	r22, r18
 aba:	73 1f       	adc	r23, r19
 abc:	84 1f       	adc	r24, r20
 abe:	95 1f       	adc	r25, r21
 ac0:	a0 1d       	adc	r26, r0
 ac2:	08 95       	ret

00000ac4 <__prologue_saves__>:
 ac4:	2f 92       	push	r2
 ac6:	3f 92       	push	r3
 ac8:	4f 92       	push	r4
 aca:	5f 92       	push	r5
 acc:	6f 92       	push	r6
 ace:	7f 92       	push	r7
 ad0:	8f 92       	push	r8
 ad2:	9f 92       	push	r9
 ad4:	af 92       	push	r10
 ad6:	bf 92       	push	r11
 ad8:	cf 92       	push	r12
 ada:	df 92       	push	r13
 adc:	ef 92       	push	r14
 ade:	ff 92       	push	r15
 ae0:	0f 93       	push	r16
 ae2:	1f 93       	push	r17
 ae4:	cf 93       	push	r28
 ae6:	df 93       	push	r29
 ae8:	cd b7       	in	r28, 0x3d	; 61
 aea:	de b7       	in	r29, 0x3e	; 62
 aec:	ca 1b       	sub	r28, r26
 aee:	db 0b       	sbc	r29, r27
 af0:	0f b6       	in	r0, 0x3f	; 63
 af2:	f8 94       	cli
 af4:	de bf       	out	0x3e, r29	; 62
 af6:	0f be       	out	0x3f, r0	; 63
 af8:	cd bf       	out	0x3d, r28	; 61
 afa:	09 94       	ijmp

00000afc <__epilogue_restores__>:
 afc:	2a 88       	ldd	r2, Y+18	; 0x12
 afe:	39 88       	ldd	r3, Y+17	; 0x11
 b00:	48 88       	ldd	r4, Y+16	; 0x10
 b02:	5f 84       	ldd	r5, Y+15	; 0x0f
 b04:	6e 84       	ldd	r6, Y+14	; 0x0e
 b06:	7d 84       	ldd	r7, Y+13	; 0x0d
 b08:	8c 84       	ldd	r8, Y+12	; 0x0c
 b0a:	9b 84       	ldd	r9, Y+11	; 0x0b
 b0c:	aa 84       	ldd	r10, Y+10	; 0x0a
 b0e:	b9 84       	ldd	r11, Y+9	; 0x09
 b10:	c8 84       	ldd	r12, Y+8	; 0x08
 b12:	df 80       	ldd	r13, Y+7	; 0x07
 b14:	ee 80       	ldd	r14, Y+6	; 0x06
 b16:	fd 80       	ldd	r15, Y+5	; 0x05
 b18:	0c 81       	ldd	r16, Y+4	; 0x04
 b1a:	1b 81       	ldd	r17, Y+3	; 0x03
 b1c:	aa 81       	ldd	r26, Y+2	; 0x02
 b1e:	b9 81       	ldd	r27, Y+1	; 0x01
 b20:	ce 0f       	add	r28, r30
 b22:	d1 1d       	adc	r29, r1
 b24:	0f b6       	in	r0, 0x3f	; 63
 b26:	f8 94       	cli
 b28:	de bf       	out	0x3e, r29	; 62
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	cd bf       	out	0x3d, r28	; 61
 b2e:	ed 01       	movw	r28, r26
 b30:	08 95       	ret

00000b32 <_exit>:
 b32:	f8 94       	cli

00000b34 <__stop_program>:
 b34:	ff cf       	rjmp	.-2      	; 0xb34 <__stop_program>
