
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a79  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000995  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000336  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000197c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004de  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 84 00 	call	0x108	; 0x108 <main>
  c4:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <adc_init>:

#define ADC_THRESHOLD 500 // Set your threshold here based on desired voltage detection

void adc_init() {
	// Set the reference voltage to AVcc (5V) and select ADC0 (PC0) as input
	ADMUX = (1 << REFS0); // AVcc with external capacitor at AREF pin
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN)  // Enable ADC
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d8:	08 95       	ret

000000da <adc_read>:
	| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler of 128 for 16 MHz
}

uint16_t adc_read() {
	ADCSRA |= (1 << ADSC); // Start conversion
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Wait for conversion to complete
  e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e8:	86 fd       	sbrc	r24, 6
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <adc_read+0xa>
	return ADC; // ADC result is a 10-bit value (0 to 1023)
  ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  f4:	08 95       	ret

000000f6 <isAuxConnected>:

uint8_t isAuxConnected() {
	uint16_t adc_value = adc_read();
  f6:	0e 94 6d 00 	call	0xda	; 0xda <adc_read>
	return (adc_value > ADC_THRESHOLD); // Return true if above threshold
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	85 3f       	cpi	r24, 0xF5	; 245
  fe:	91 40       	sbci	r25, 0x01	; 1
 100:	08 f4       	brcc	.+2      	; 0x104 <isAuxConnected+0xe>
 102:	20 e0       	ldi	r18, 0x00	; 0
}
 104:	82 2f       	mov	r24, r18
 106:	08 95       	ret

00000108 <main>:

int main() {
	adc_init();
 108:	0e 94 66 00 	call	0xcc	; 0xcc <adc_init>
	DDRB |= (1 << PB2); // Set PB2 as output for the relay control
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	84 b9       	out	0x04, r24	; 4

	while (1) {
		if (isAuxConnected()) {
 112:	0e 94 7b 00 	call	0xf6	; 0xf6 <isAuxConnected>
 116:	88 23       	and	r24, r24
 118:	21 f0       	breq	.+8      	; 0x122 <main+0x1a>
			PORTB |= (1 << PB2); // Set PB2 high to activate AUX
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	85 b9       	out	0x05, r24	; 5
 120:	03 c0       	rjmp	.+6      	; 0x128 <main+0x20>
			} else {
			PORTB &= ~(1 << PB2); // Set PB2 low to activate DAC
 122:	85 b1       	in	r24, 0x05	; 5
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	87 ea       	ldi	r24, 0xA7	; 167
 12a:	91 e6       	ldi	r25, 0x61	; 97
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x24>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x2a>
 132:	00 00       	nop
 134:	ee cf       	rjmp	.-36     	; 0x112 <main+0xa>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
