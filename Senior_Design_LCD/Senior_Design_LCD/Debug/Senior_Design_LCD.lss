
Senior_Design_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00001294  00001328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800184  00800184  000013ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bab  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d54  00000000  00000000  0000416b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000102a  00000000  00000000  00004ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00005eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b5  00000000  00000000  0000629c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000129b  00000000  00000000  00006b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00007dec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_5>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e4 e9       	ldi	r30, 0x94	; 148
      c8:	f2 e1       	ldi	r31, 0x12	; 18
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a4 38       	cpi	r26, 0x84	; 132
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a4 e8       	ldi	r26, 0x84	; 132
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a7 38       	cpi	r26, 0x87	; 135
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
      ea:	0c 94 48 09 	jmp	0x1290	; 0x1290 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_master_init>:
	}
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
      f2:	9b 01       	movw	r18, r22
      f4:	ac 01       	movw	r20, r24
      f6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	74 e2       	ldi	r23, 0x24	; 36
      fe:	84 ef       	ldi	r24, 0xF4	; 244
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 3c 06 	call	0xc78	; 0xc78 <__udivmodsi4>
     106:	da 01       	movw	r26, r20
     108:	c9 01       	movw	r24, r18
     10a:	40 97       	sbiw	r24, 0x10	; 16
     10c:	a1 09       	sbc	r26, r1
     10e:	b1 09       	sbc	r27, r1
     110:	b6 95       	lsr	r27
     112:	a7 95       	ror	r26
     114:	97 95       	ror	r25
     116:	87 95       	ror	r24
     118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     11c:	08 95       	ret

0000011e <i2c_master_start>:
     11e:	ec eb       	ldi	r30, 0xBC	; 188
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	10 82       	st	Z, r1
     124:	94 ea       	ldi	r25, 0xA4	; 164
     126:	90 83       	st	Z, r25
     128:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     12c:	99 23       	and	r25, r25
     12e:	e4 f7       	brge	.-8      	; 0x128 <i2c_master_start+0xa>
     130:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     134:	98 7f       	andi	r25, 0xF8	; 248
     136:	98 30       	cpi	r25, 0x08	; 8
     138:	11 f0       	breq	.+4      	; 0x13e <i2c_master_start+0x20>
     13a:	90 31       	cpi	r25, 0x10	; 16
     13c:	b1 f4       	brne	.+44     	; 0x16a <i2c_master_start+0x4c>
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	86 2b       	or	r24, r22
     146:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     14a:	84 e8       	ldi	r24, 0x84	; 132
     14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     154:	88 23       	and	r24, r24
     156:	e4 f7       	brge	.-8      	; 0x150 <i2c_master_start+0x32>
     158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     15c:	88 7f       	andi	r24, 0xF8	; 248
     15e:	88 31       	cpi	r24, 0x18	; 24
     160:	31 f0       	breq	.+12     	; 0x16e <i2c_master_start+0x50>
     162:	80 34       	cpi	r24, 0x40	; 64
     164:	31 f4       	brne	.+12     	; 0x172 <i2c_master_start+0x54>
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	08 95       	ret
     16a:	8a e0       	ldi	r24, 0x0A	; 10
     16c:	08 95       	ret
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	08 95       	ret
     172:	84 e1       	ldi	r24, 0x14	; 20
     174:	08 95       	ret

00000176 <i2c_master_write>:
     176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     17a:	84 e8       	ldi	r24, 0x84	; 132
     17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     184:	88 23       	and	r24, r24
     186:	e4 f7       	brge	.-8      	; 0x180 <i2c_master_write+0xa>
     188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     18c:	88 7f       	andi	r24, 0xF8	; 248
     18e:	88 32       	cpi	r24, 0x28	; 40
     190:	11 f0       	breq	.+4      	; 0x196 <i2c_master_write+0x20>
     192:	85 e1       	ldi	r24, 0x15	; 21
     194:	08 95       	ret
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	08 95       	ret

0000019a <i2c_master_stop>:
     19a:	84 e9       	ldi	r24, 0x94	; 148
     19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1a0:	08 95       	ret

000001a2 <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
     1a2:	cf 93       	push	r28
     1a4:	c6 2f       	mov	r28, r22
	uint8_t status = i2c_master_start(address, I2C_WRITE);
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_master_start>
	if (status) return status;
     1ac:	81 11       	cpse	r24, r1
     1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <i2c_master_sendByte+0x1e>

	status = i2c_master_write(data);
     1b0:	8c 2f       	mov	r24, r28
     1b2:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_master_write>
	if (status) return status;
     1b6:	81 11       	cpse	r24, r1
     1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <i2c_master_sendByte+0x1e>

	i2c_master_stop();
     1ba:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_master_stop>
	
	return I2C_STATUS_SUCCESS;
     1be:	80 e0       	ldi	r24, 0x00	; 0
};
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
     1c4:	fc 01       	movw	r30, r24
     1c6:	23 81       	ldd	r18, Z+3	; 0x03
     1c8:	62 2b       	or	r22, r18
     1ca:	80 81       	ld	r24, Z
     1cc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <i2c_master_sendByte>
     1d0:	08 95       	ret

000001d2 <lq_writeDevicePulse>:
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	8c 01       	movw	r16, r24
     1da:	c6 2f       	mov	r28, r22
     1dc:	64 60       	ori	r22, 0x04	; 4
     1de:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
     1e2:	8a e0       	ldi	r24, 0x0A	; 10
     1e4:	8a 95       	dec	r24
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lq_writeDevicePulse+0x12>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lq_writeDevicePulse+0x18>
     1ea:	6c 2f       	mov	r22, r28
     1ec:	6b 7f       	andi	r22, 0xFB	; 251
     1ee:	c8 01       	movw	r24, r16
     1f0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
     1f4:	87 ec       	ldi	r24, 0xC7	; 199
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lq_writeDevicePulse+0x26>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lq_writeDevicePulse+0x2c>
     1fe:	00 00       	nop
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	08 95       	ret

00000208 <lq_writeDevice4Bits>:
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ec 01       	movw	r28, r24
     210:	16 2f       	mov	r17, r22
     212:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
     216:	61 2f       	mov	r22, r17
     218:	ce 01       	movw	r24, r28
     21a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lq_writeDevicePulse>
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	08 95       	ret

00000226 <lq_writeDeviceByte>:
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	8c 01       	movw	r16, r24
     232:	f4 2e       	mov	r15, r20
     234:	86 2f       	mov	r24, r22
     236:	80 7f       	andi	r24, 0xF0	; 240
     238:	90 e1       	ldi	r25, 0x10	; 16
     23a:	69 9f       	mul	r22, r25
     23c:	e0 01       	movw	r28, r0
     23e:	11 24       	eor	r1, r1
     240:	68 2f       	mov	r22, r24
     242:	64 2b       	or	r22, r20
     244:	c8 01       	movw	r24, r16
     246:	0e 94 04 01 	call	0x208	; 0x208 <lq_writeDevice4Bits>
     24a:	6c 2f       	mov	r22, r28
     24c:	6f 29       	or	r22, r15
     24e:	c8 01       	movw	r24, r16
     250:	0e 94 04 01 	call	0x208	; 0x208 <lq_writeDevice4Bits>
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	08 95       	ret

00000260 <lq_print>:
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	8c 01       	movw	r16, r24
     26a:	eb 01       	movw	r28, r22
     26c:	68 81       	ld	r22, Y
     26e:	06 c0       	rjmp	.+12     	; 0x27c <lq_print+0x1c>
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	c8 01       	movw	r24, r16
     274:	0e 94 13 01 	call	0x226	; 0x226 <lq_writeDeviceByte>
     278:	21 96       	adiw	r28, 0x01	; 1
     27a:	68 81       	ld	r22, Y
     27c:	61 11       	cpse	r22, r1
     27e:	f8 cf       	rjmp	.-16     	; 0x270 <lq_print+0x10>
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	08 95       	ret

0000028a <lq_sendCommand>:
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	0e 94 13 01 	call	0x226	; 0x226 <lq_writeDeviceByte>
     290:	08 95       	ret

00000292 <lq_setCursor>:
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	00 d0       	rcall	.+0      	; 0x298 <lq_setCursor+0x6>
     298:	00 d0       	rcall	.+0      	; 0x29a <lq_setCursor+0x8>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	19 82       	std	Y+1, r1	; 0x01
     2a0:	20 e4       	ldi	r18, 0x40	; 64
     2a2:	2a 83       	std	Y+2, r18	; 0x02
     2a4:	24 e1       	ldi	r18, 0x14	; 20
     2a6:	2b 83       	std	Y+3, r18	; 0x03
     2a8:	24 e5       	ldi	r18, 0x54	; 84
     2aa:	2c 83       	std	Y+4, r18	; 0x04
     2ac:	e1 e0       	ldi	r30, 0x01	; 1
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	ec 0f       	add	r30, r28
     2b2:	fd 1f       	adc	r31, r29
     2b4:	e6 0f       	add	r30, r22
     2b6:	f1 1d       	adc	r31, r1
     2b8:	60 81       	ld	r22, Z
     2ba:	64 0f       	add	r22, r20
     2bc:	60 68       	ori	r22, 0x80	; 128
     2be:	0e 94 45 01 	call	0x28a	; 0x28a <lq_sendCommand>
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <lq_clear>:
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ec 01       	movw	r28, r24
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	0e 94 45 01 	call	0x28a	; 0x28a <lq_sendCommand>
     2dc:	8f e3       	ldi	r24, 0x3F	; 63
     2de:	9f e1       	ldi	r25, 0x1F	; 31
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lq_clear+0x10>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lq_clear+0x16>
     2e6:	00 00       	nop
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	ce 01       	movw	r24, r28
     2ee:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <lq_returnHome>:
     2f8:	62 e0       	ldi	r22, 0x02	; 2
     2fa:	0e 94 45 01 	call	0x28a	; 0x28a <lq_sendCommand>
     2fe:	8f e3       	ldi	r24, 0x3F	; 63
     300:	9f e1       	ldi	r25, 0x1F	; 31
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <lq_returnHome+0xa>
     306:	00 c0       	rjmp	.+0      	; 0x308 <lq_returnHome+0x10>
     308:	00 00       	nop
     30a:	08 95       	ret

0000030c <lq_turnOnDisplay>:
     30c:	fc 01       	movw	r30, r24
     30e:	65 81       	ldd	r22, Z+5	; 0x05
     310:	26 2f       	mov	r18, r22
     312:	24 60       	ori	r18, 0x04	; 4
     314:	25 83       	std	Z+5, r18	; 0x05
     316:	6c 60       	ori	r22, 0x0C	; 12
     318:	0e 94 45 01 	call	0x28a	; 0x28a <lq_sendCommand>
     31c:	08 95       	ret

0000031e <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	2e 97       	sbiw	r28, 0x0e	; 14
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
     332:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
     334:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
     336:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
     338:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
     33a:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     33c:	84 e0       	ldi	r24, 0x04	; 4
     33e:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
     344:	42 30       	cpi	r20, 0x02	; 2
     346:	18 f0       	brcs	.+6      	; 0x34e <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
     348:	82 2f       	mov	r24, r18
     34a:	88 60       	ori	r24, 0x08	; 8
     34c:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
     34e:	22 23       	and	r18, r18
     350:	29 f0       	breq	.+10     	; 0x35c <lq_init+0x3e>
     352:	41 30       	cpi	r20, 0x01	; 1
     354:	19 f4       	brne	.+6      	; 0x35c <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
     356:	8c 85       	ldd	r24, Y+12	; 0x0c
     358:	84 60       	ori	r24, 0x04	; 4
     35a:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	81 ee       	ldi	r24, 0xE1	; 225
     360:	94 e0       	ldi	r25, 0x04	; 4
     362:	21 50       	subi	r18, 0x01	; 1
     364:	80 40       	sbci	r24, 0x00	; 0
     366:	90 40       	sbci	r25, 0x00	; 0
     368:	e1 f7       	brne	.-8      	; 0x362 <lq_init+0x44>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <lq_init+0x4e>
     36c:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	ce 01       	movw	r24, r28
     372:	08 96       	adiw	r24, 0x08	; 8
     374:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
     378:	2f ef       	ldi	r18, 0xFF	; 255
     37a:	83 ed       	ldi	r24, 0xD3	; 211
     37c:	90 e3       	ldi	r25, 0x30	; 48
     37e:	21 50       	subi	r18, 0x01	; 1
     380:	80 40       	sbci	r24, 0x00	; 0
     382:	90 40       	sbci	r25, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <lq_init+0x60>
     386:	00 c0       	rjmp	.+0      	; 0x388 <lq_init+0x6a>
     388:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
     38a:	60 e3       	ldi	r22, 0x30	; 48
     38c:	ce 01       	movw	r24, r28
     38e:	08 96       	adiw	r24, 0x08	; 8
     390:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     394:	8f e4       	ldi	r24, 0x4F	; 79
     396:	96 e4       	ldi	r25, 0x46	; 70
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <lq_init+0x7a>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <lq_init+0x80>
     39e:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
     3a0:	60 e3       	ldi	r22, 0x30	; 48
     3a2:	ce 01       	movw	r24, r28
     3a4:	08 96       	adiw	r24, 0x08	; 8
     3a6:	0e 94 04 01 	call	0x208	; 0x208 <lq_writeDevice4Bits>
     3aa:	8f e4       	ldi	r24, 0x4F	; 79
     3ac:	96 e4       	ldi	r25, 0x46	; 70
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <lq_init+0x90>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lq_init+0x96>
     3b4:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
     3b6:	60 e3       	ldi	r22, 0x30	; 48
     3b8:	ce 01       	movw	r24, r28
     3ba:	08 96       	adiw	r24, 0x08	; 8
     3bc:	0e 94 04 01 	call	0x208	; 0x208 <lq_writeDevice4Bits>
     3c0:	87 e5       	ldi	r24, 0x57	; 87
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <lq_init+0xa6>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <lq_init+0xac>
     3ca:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
     3cc:	60 e2       	ldi	r22, 0x20	; 32
     3ce:	ce 01       	movw	r24, r28
     3d0:	08 96       	adiw	r24, 0x08	; 8
     3d2:	0e 94 04 01 	call	0x208	; 0x208 <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
     3d6:	6c 85       	ldd	r22, Y+12	; 0x0c
     3d8:	60 62       	ori	r22, 0x20	; 32
     3da:	ce 01       	movw	r24, r28
     3dc:	08 96       	adiw	r24, 0x08	; 8
     3de:	0e 94 45 01 	call	0x28a	; 0x28a <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
     3e2:	ce 01       	movw	r24, r28
     3e4:	08 96       	adiw	r24, 0x08	; 8
     3e6:	0e 94 86 01 	call	0x30c	; 0x30c <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
     3ea:	ce 01       	movw	r24, r28
     3ec:	08 96       	adiw	r24, 0x08	; 8
     3ee:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
     3f2:	6e 85       	ldd	r22, Y+14	; 0x0e
     3f4:	64 60       	ori	r22, 0x04	; 4
     3f6:	ce 01       	movw	r24, r28
     3f8:	08 96       	adiw	r24, 0x08	; 8
     3fa:	0e 94 45 01 	call	0x28a	; 0x28a <lq_sendCommand>
	
	lq_returnHome(&device);
     3fe:	ce 01       	movw	r24, r28
     400:	08 96       	adiw	r24, 0x08	; 8
     402:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lq_returnHome>

	return device;
     406:	87 e0       	ldi	r24, 0x07	; 7
     408:	fe 01       	movw	r30, r28
     40a:	38 96       	adiw	r30, 0x08	; 8
     40c:	de 01       	movw	r26, r28
     40e:	11 96       	adiw	r26, 0x01	; 1
     410:	01 90       	ld	r0, Z+
     412:	0d 92       	st	X+, r0
     414:	8a 95       	dec	r24
     416:	e1 f7       	brne	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     418:	29 81       	ldd	r18, Y+1	; 0x01
     41a:	3a 81       	ldd	r19, Y+2	; 0x02
     41c:	4b 81       	ldd	r20, Y+3	; 0x03
     41e:	5c 81       	ldd	r21, Y+4	; 0x04
     420:	6d 81       	ldd	r22, Y+5	; 0x05
     422:	7e 81       	ldd	r23, Y+6	; 0x06
};
     424:	8f 81       	ldd	r24, Y+7	; 0x07
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	2e 96       	adiw	r28, 0x0e	; 14
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <main>:

volatile uint8_t selectPressed = 0;
volatile uint8_t upPressed = 0;
volatile uint8_t downPressed = 0;
int main(void)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	ef 97       	sbiw	r28, 0x3f	; 63
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRD &= (1<<2);		//select button
     44e:	8a b1       	in	r24, 0x0a	; 10
     450:	84 70       	andi	r24, 0x04	; 4
     452:	8a b9       	out	0x0a, r24	; 10
	DDRD &= (1<<4);		//up button
     454:	8a b1       	in	r24, 0x0a	; 10
     456:	80 71       	andi	r24, 0x10	; 16
     458:	8a b9       	out	0x0a, r24	; 10
	DDRD &= (1<<7);		//down button
     45a:	8a b1       	in	r24, 0x0a	; 10
     45c:	80 78       	andi	r24, 0x80	; 128
     45e:	8a b9       	out	0x0a, r24	; 10
	
	uint8_t vol_num = 50;		//amplitude of the tone generator
	uint8_t fsm = 0;			//state machine that determines what setting the user is on
	char vol_str[4];
	char freq_str[5];
	char waveform[3][9] = {"Sine", "Square", "Triangle"};
     460:	8b e1       	ldi	r24, 0x1B	; 27
     462:	e0 e0       	ldi	r30, 0x00	; 0
     464:	f1 e0       	ldi	r31, 0x01	; 1
     466:	de 01       	movw	r26, r28
     468:	1a 96       	adiw	r26, 0x0a	; 10
     46a:	01 90       	ld	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	8a 95       	dec	r24
     470:	e1 f7       	brne	.-8      	; 0x46a <main+0x30>
	uint8_t waveform_id = 0;
	const uint16_t frequency[] = {20, 50, 100, 200, 300, 500, 700, 1000, 1200, 1500};
     472:	84 e1       	ldi	r24, 0x14	; 20
     474:	eb e1       	ldi	r30, 0x1B	; 27
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	de 01       	movw	r26, r28
     47a:	95 96       	adiw	r26, 0x25	; 37
     47c:	01 90       	ld	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	8a 95       	dec	r24
     482:	e1 f7       	brne	.-8      	; 0x47c <main+0x42>
	uint8_t freq_id = 0;
	uint8_t screen = 0;
	
	i2c_master_init(I2C_SCL_FREQUENCY_100);					//SET LCD TO I2C0 PINS
     484:	60 ea       	ldi	r22, 0xA0	; 160
     486:	76 e8       	ldi	r23, 0x86	; 134
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_master_init>
	LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	44 e0       	ldi	r20, 0x04	; 4
     494:	64 e1       	ldi	r22, 0x14	; 20
     496:	87 e2       	ldi	r24, 0x27	; 39
     498:	0e 94 8f 01 	call	0x31e	; 0x31e <lq_init>
     49c:	29 af       	std	Y+57, r18	; 0x39
     49e:	3a af       	std	Y+58, r19	; 0x3a
     4a0:	4b af       	std	Y+59, r20	; 0x3b
     4a2:	5c af       	std	Y+60, r21	; 0x3c
     4a4:	6d af       	std	Y+61, r22	; 0x3d
     4a6:	7e af       	std	Y+62, r23	; 0x3e
     4a8:	8f af       	std	Y+63, r24	; 0x3f
	
	 lq_setCursor(&device, 0, 0);
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	ce 01       	movw	r24, r28
     4b0:	c9 96       	adiw	r24, 0x39	; 57
     4b2:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
	 lq_print(&device, "Amplitude");
     4b6:	6f e2       	ldi	r22, 0x2F	; 47
     4b8:	71 e0       	ldi	r23, 0x01	; 1
     4ba:	ce 01       	movw	r24, r28
     4bc:	c9 96       	adiw	r24, 0x39	; 57
     4be:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
	 lq_setCursor(&device, 1, 0);
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	ce 01       	movw	r24, r28
     4c8:	c9 96       	adiw	r24, 0x39	; 57
     4ca:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
	 lq_print(&device, "Frequency");
     4ce:	69 e3       	ldi	r22, 0x39	; 57
     4d0:	71 e0       	ldi	r23, 0x01	; 1
     4d2:	ce 01       	movw	r24, r28
     4d4:	c9 96       	adiw	r24, 0x39	; 57
     4d6:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
	 lq_setCursor(&device, 2, 0);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	ce 01       	movw	r24, r28
     4e0:	c9 96       	adiw	r24, 0x39	; 57
     4e2:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
	 lq_print(&device, "Waveform");
     4e6:	63 e4       	ldi	r22, 0x43	; 67
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	ce 01       	movw	r24, r28
     4ec:	c9 96       	adiw	r24, 0x39	; 57
     4ee:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
	 
	 PCICR |= (1 << PCIE2);  // Enable Pin Change Interrupt for PCINT16-23 group (Port D)
     4f2:	e8 e6       	ldi	r30, 0x68	; 104
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	84 60       	ori	r24, 0x04	; 4
     4fa:	80 83       	st	Z, r24
	 PCMSK2 |= (1 << PCINT18) | (1 << PCINT20) | (1 << PCINT23); //Enables interrupts for PD2, PD4, and PD7
     4fc:	ed e6       	ldi	r30, 0x6D	; 109
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	84 69       	ori	r24, 0x94	; 148
     504:	80 83       	st	Z, r24
	 sei();
     506:	78 94       	sei
	
     
	 // Display Frequency
	 

	 lq_setCursor(&device, 1, 14);
     508:	4e e0       	ldi	r20, 0x0E	; 14
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	ce 01       	movw	r24, r28
     50e:	c9 96       	adiw	r24, 0x39	; 57
     510:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
	 lq_print(&device, "  ");
     514:	64 e5       	ldi	r22, 0x54	; 84
     516:	71 e0       	ldi	r23, 0x01	; 1
     518:	ce 01       	movw	r24, r28
     51a:	c9 96       	adiw	r24, 0x39	; 57
     51c:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
	 sprintf(freq_str, "%d", frequency[freq_id]);
     520:	8e a1       	ldd	r24, Y+38	; 0x26
     522:	8f 93       	push	r24
     524:	8d a1       	ldd	r24, Y+37	; 0x25
     526:	8f 93       	push	r24
     528:	8c e4       	ldi	r24, 0x4C	; 76
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	8e 01       	movw	r16, r28
     532:	0b 5f       	subi	r16, 0xFB	; 251
     534:	1f 4f       	sbci	r17, 0xFF	; 255
     536:	1f 93       	push	r17
     538:	0f 93       	push	r16
     53a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sprintf>
	 lq_print(&device, freq_str);
     53e:	b8 01       	movw	r22, r16
     540:	ce 01       	movw	r24, r28
     542:	c9 96       	adiw	r24, 0x39	; 57
     544:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
	 
	 lq_setCursor(&device, 1, 18);
     548:	42 e1       	ldi	r20, 0x12	; 18
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	ce 01       	movw	r24, r28
     54e:	c9 96       	adiw	r24, 0x39	; 57
     550:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
	 lq_print(&device, "Hz");
     554:	6f e4       	ldi	r22, 0x4F	; 79
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	ce 01       	movw	r24, r28
     55a:	c9 96       	adiw	r24, 0x39	; 57
     55c:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
	 
	 //Display Waveform
	 lq_setCursor(&device, 2, 12);    
     560:	4c e0       	ldi	r20, 0x0C	; 12
     562:	62 e0       	ldi	r22, 0x02	; 2
     564:	ce 01       	movw	r24, r28
     566:	c9 96       	adiw	r24, 0x39	; 57
     568:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
     lq_print(&device, "    ");  
     56c:	62 e5       	ldi	r22, 0x52	; 82
     56e:	71 e0       	ldi	r23, 0x01	; 1
     570:	ce 01       	movw	r24, r28
     572:	c9 96       	adiw	r24, 0x39	; 57
     574:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
     lq_print(&device, waveform[waveform_id]);
     578:	be 01       	movw	r22, r28
     57a:	66 5f       	subi	r22, 0xF6	; 246
     57c:	7f 4f       	sbci	r23, 0xFF	; 255
     57e:	ce 01       	movw	r24, r28
     580:	c9 96       	adiw	r24, 0x39	; 57
     582:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
	char vol_str[4];
	char freq_str[5];
	char waveform[3][9] = {"Sine", "Square", "Triangle"};
	uint8_t waveform_id = 0;
	const uint16_t frequency[] = {20, 50, 100, 200, 300, 500, 700, 1000, 1200, 1500};
	uint8_t freq_id = 0;
     592:	f1 2c       	mov	r15, r1
	uint8_t vol_num = 50;		//amplitude of the tone generator
	uint8_t fsm = 0;			//state machine that determines what setting the user is on
	char vol_str[4];
	char freq_str[5];
	char waveform[3][9] = {"Sine", "Square", "Triangle"};
	uint8_t waveform_id = 0;
     594:	00 e0       	ldi	r16, 0x00	; 0
	DDRD &= (1<<2);		//select button
	DDRD &= (1<<4);		//up button
	DDRD &= (1<<7);		//down button
	
	uint8_t vol_num = 50;		//amplitude of the tone generator
	uint8_t fsm = 0;			//state machine that determines what setting the user is on
     596:	10 e0       	ldi	r17, 0x00	; 0
    /* Replace with your application code */
	DDRD &= (1<<2);		//select button
	DDRD &= (1<<4);		//up button
	DDRD &= (1<<7);		//down button
	
	uint8_t vol_num = 50;		//amplitude of the tone generator
     598:	0f 2e       	mov	r0, r31
     59a:	f2 e3       	ldi	r31, 0x32	; 50
     59c:	ef 2e       	mov	r14, r31
     59e:	f0 2d       	mov	r31, r0
	while (1) 
    {
		/*
				Switch Case for Waveform ID that generates waveforms using the DAC
		*/
		if(selectPressed){
     5a0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <selectPressed>
     5a4:	88 23       	and	r24, r24
     5a6:	09 f4       	brne	.+2      	; 0x5aa <main+0x170>
     5a8:	f7 c0       	rjmp	.+494    	; 0x798 <main+0x35e>
			switch(fsm){
     5aa:	12 30       	cpi	r17, 0x02	; 2
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <main+0x176>
     5ae:	5b c0       	rjmp	.+182    	; 0x666 <main+0x22c>
     5b0:	28 f4       	brcc	.+10     	; 0x5bc <main+0x182>
     5b2:	11 23       	and	r17, r17
     5b4:	61 f0       	breq	.+24     	; 0x5ce <main+0x194>
     5b6:	11 30       	cpi	r17, 0x01	; 1
     5b8:	81 f1       	breq	.+96     	; 0x61a <main+0x1e0>
     5ba:	ec c0       	rjmp	.+472    	; 0x794 <main+0x35a>
     5bc:	14 30       	cpi	r17, 0x04	; 4
     5be:	09 f4       	brne	.+2      	; 0x5c2 <main+0x188>
     5c0:	9e c0       	rjmp	.+316    	; 0x6fe <main+0x2c4>
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <main+0x18c>
     5c4:	76 c0       	rjmp	.+236    	; 0x6b2 <main+0x278>
     5c6:	15 30       	cpi	r17, 0x05	; 5
     5c8:	09 f4       	brne	.+2      	; 0x5cc <main+0x192>
     5ca:	bf c0       	rjmp	.+382    	; 0x74a <main+0x310>
     5cc:	e3 c0       	rjmp	.+454    	; 0x794 <main+0x35a>
				case 0:
					fsm = 3;
					lq_setCursor(&device, 0, 16);
     5ce:	40 e1       	ldi	r20, 0x10	; 16
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	ce 01       	movw	r24, r28
     5d4:	c9 96       	adiw	r24, 0x39	; 57
     5d6:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, ">");
     5da:	67 e5       	ldi	r22, 0x57	; 87
     5dc:	71 e0       	ldi	r23, 0x01	; 1
     5de:	ce 01       	movw	r24, r28
     5e0:	c9 96       	adiw	r24, 0x39	; 57
     5e2:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 0, 9);
     5e6:	49 e0       	ldi	r20, 0x09	; 9
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	ce 01       	movw	r24, r28
     5ec:	c9 96       	adiw	r24, 0x39	; 57
     5ee:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     5f2:	65 e5       	ldi	r22, 0x55	; 85
     5f4:	71 e0       	ldi	r23, 0x01	; 1
     5f6:	ce 01       	movw	r24, r28
     5f8:	c9 96       	adiw	r24, 0x39	; 57
     5fa:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 3, 0);
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	63 e0       	ldi	r22, 0x03	; 3
     602:	ce 01       	movw	r24, r28
     604:	c9 96       	adiw	r24, 0x39	; 57
     606:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "Up    Down    Back");
     60a:	69 e5       	ldi	r22, 0x59	; 89
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	ce 01       	movw	r24, r28
     610:	c9 96       	adiw	r24, 0x39	; 57
     612:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
				Switch Case for Waveform ID that generates waveforms using the DAC
		*/
		if(selectPressed){
			switch(fsm){
				case 0:
					fsm = 3;
     616:	13 e0       	ldi	r17, 0x03	; 3
					lq_print(&device, ">");
					lq_setCursor(&device, 0, 9);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Back");
				break;
     618:	bd c0       	rjmp	.+378    	; 0x794 <main+0x35a>
				
				case 1:
					fsm = 4;
					lq_setCursor(&device, 1, 12);
     61a:	4c e0       	ldi	r20, 0x0C	; 12
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	ce 01       	movw	r24, r28
     620:	c9 96       	adiw	r24, 0x39	; 57
     622:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, ">");
     626:	67 e5       	ldi	r22, 0x57	; 87
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	ce 01       	movw	r24, r28
     62c:	c9 96       	adiw	r24, 0x39	; 57
     62e:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 1, 9);
     632:	49 e0       	ldi	r20, 0x09	; 9
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	ce 01       	movw	r24, r28
     638:	c9 96       	adiw	r24, 0x39	; 57
     63a:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     63e:	65 e5       	ldi	r22, 0x55	; 85
     640:	71 e0       	ldi	r23, 0x01	; 1
     642:	ce 01       	movw	r24, r28
     644:	c9 96       	adiw	r24, 0x39	; 57
     646:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 3, 0);
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	63 e0       	ldi	r22, 0x03	; 3
     64e:	ce 01       	movw	r24, r28
     650:	c9 96       	adiw	r24, 0x39	; 57
     652:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "Up    Down    Back");
     656:	69 e5       	ldi	r22, 0x59	; 89
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	ce 01       	movw	r24, r28
     65c:	c9 96       	adiw	r24, 0x39	; 57
     65e:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Back");
				break;
				
				case 1:
					fsm = 4;
     662:	14 e0       	ldi	r17, 0x04	; 4
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Back");
					
					
					
				break;
     664:	97 c0       	rjmp	.+302    	; 0x794 <main+0x35a>
				
				case 2:
					fsm = 5;
					lq_setCursor(&device, 2, 11);
     666:	4b e0       	ldi	r20, 0x0B	; 11
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	ce 01       	movw	r24, r28
     66c:	c9 96       	adiw	r24, 0x39	; 57
     66e:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, ">");
     672:	67 e5       	ldi	r22, 0x57	; 87
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	ce 01       	movw	r24, r28
     678:	c9 96       	adiw	r24, 0x39	; 57
     67a:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 2, 8);
     67e:	48 e0       	ldi	r20, 0x08	; 8
     680:	62 e0       	ldi	r22, 0x02	; 2
     682:	ce 01       	movw	r24, r28
     684:	c9 96       	adiw	r24, 0x39	; 57
     686:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     68a:	65 e5       	ldi	r22, 0x55	; 85
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	ce 01       	movw	r24, r28
     690:	c9 96       	adiw	r24, 0x39	; 57
     692:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 3, 0);
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	63 e0       	ldi	r22, 0x03	; 3
     69a:	ce 01       	movw	r24, r28
     69c:	c9 96       	adiw	r24, 0x39	; 57
     69e:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "Up    Down    Back");
     6a2:	69 e5       	ldi	r22, 0x59	; 89
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	ce 01       	movw	r24, r28
     6a8:	c9 96       	adiw	r24, 0x39	; 57
     6aa:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					
					
				break;
				
				case 2:
					fsm = 5;
     6ae:	15 e0       	ldi	r17, 0x05	; 5
					lq_setCursor(&device, 2, 8);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Back");
				
				break;
     6b0:	71 c0       	rjmp	.+226    	; 0x794 <main+0x35a>
				
				case 3:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
     6b2:	49 e0       	ldi	r20, 0x09	; 9
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	ce 01       	movw	r24, r28
     6b8:	c9 96       	adiw	r24, 0x39	; 57
     6ba:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     6be:	6c e6       	ldi	r22, 0x6C	; 108
     6c0:	71 e0       	ldi	r23, 0x01	; 1
     6c2:	ce 01       	movw	r24, r28
     6c4:	c9 96       	adiw	r24, 0x39	; 57
     6c6:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					
					lq_setCursor(&device, 0, 16);
     6ca:	40 e1       	ldi	r20, 0x10	; 16
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	ce 01       	movw	r24, r28
     6d0:	c9 96       	adiw	r24, 0x39	; 57
     6d2:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     6d6:	65 e5       	ldi	r22, 0x55	; 85
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	ce 01       	movw	r24, r28
     6dc:	c9 96       	adiw	r24, 0x39	; 57
     6de:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 3, 0);
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	63 e0       	ldi	r22, 0x03	; 3
     6e6:	ce 01       	movw	r24, r28
     6e8:	c9 96       	adiw	r24, 0x39	; 57
     6ea:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "Up    Down    Select");
     6ee:	6e e6       	ldi	r22, 0x6E	; 110
     6f0:	71 e0       	ldi	r23, 0x01	; 1
     6f2:	ce 01       	movw	r24, r28
     6f4:	c9 96       	adiw	r24, 0x39	; 57
     6f6:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_print(&device, "Up    Down    Back");
				
				break;
				
				case 3:
					fsm = 0;
     6fa:	10 e0       	ldi	r17, 0x00	; 0
					lq_setCursor(&device, 0, 16);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Select");
					
				break;
     6fc:	4b c0       	rjmp	.+150    	; 0x794 <main+0x35a>
				
				case 4:
					fsm = 1;
					lq_setCursor(&device, 1, 9);
     6fe:	49 e0       	ldi	r20, 0x09	; 9
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	ce 01       	movw	r24, r28
     704:	c9 96       	adiw	r24, 0x39	; 57
     706:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     70a:	6c e6       	ldi	r22, 0x6C	; 108
     70c:	71 e0       	ldi	r23, 0x01	; 1
     70e:	ce 01       	movw	r24, r28
     710:	c9 96       	adiw	r24, 0x39	; 57
     712:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					
					lq_setCursor(&device, 1, 12);
     716:	4c e0       	ldi	r20, 0x0C	; 12
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	ce 01       	movw	r24, r28
     71c:	c9 96       	adiw	r24, 0x39	; 57
     71e:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     722:	65 e5       	ldi	r22, 0x55	; 85
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	ce 01       	movw	r24, r28
     728:	c9 96       	adiw	r24, 0x39	; 57
     72a:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 3, 0);
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	63 e0       	ldi	r22, 0x03	; 3
     732:	ce 01       	movw	r24, r28
     734:	c9 96       	adiw	r24, 0x39	; 57
     736:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "Up    Down    Select");
     73a:	6e e6       	ldi	r22, 0x6E	; 110
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	ce 01       	movw	r24, r28
     740:	c9 96       	adiw	r24, 0x39	; 57
     742:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_print(&device, "Up    Down    Select");
					
				break;
				
				case 4:
					fsm = 1;
     746:	11 e0       	ldi	r17, 0x01	; 1
					
					lq_setCursor(&device, 1, 12);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Select");
				break;
     748:	25 c0       	rjmp	.+74     	; 0x794 <main+0x35a>
				
				case 5:
					fsm = 2;
					
					lq_setCursor(&device, 2, 8);
     74a:	48 e0       	ldi	r20, 0x08	; 8
     74c:	62 e0       	ldi	r22, 0x02	; 2
     74e:	ce 01       	movw	r24, r28
     750:	c9 96       	adiw	r24, 0x39	; 57
     752:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     756:	6c e6       	ldi	r22, 0x6C	; 108
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	ce 01       	movw	r24, r28
     75c:	c9 96       	adiw	r24, 0x39	; 57
     75e:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 2, 11);
     762:	4b e0       	ldi	r20, 0x0B	; 11
     764:	62 e0       	ldi	r22, 0x02	; 2
     766:	ce 01       	movw	r24, r28
     768:	c9 96       	adiw	r24, 0x39	; 57
     76a:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     76e:	65 e5       	ldi	r22, 0x55	; 85
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	ce 01       	movw	r24, r28
     774:	c9 96       	adiw	r24, 0x39	; 57
     776:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 3, 0);
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	63 e0       	ldi	r22, 0x03	; 3
     77e:	ce 01       	movw	r24, r28
     780:	c9 96       	adiw	r24, 0x39	; 57
     782:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "Up    Down    Select");
     786:	6e e6       	ldi	r22, 0x6E	; 110
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	ce 01       	movw	r24, r28
     78c:	c9 96       	adiw	r24, 0x39	; 57
     78e:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Select");
				break;
				
				case 5:
					fsm = 2;
     792:	12 e0       	ldi	r17, 0x02	; 2
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Select");
				break;
			}
		
			selectPressed = 0;
     794:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <selectPressed>
		}
		
		
		if(upPressed){
     798:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <upPressed>
     79c:	88 23       	and	r24, r24
     79e:	09 f4       	brne	.+2      	; 0x7a2 <main+0x368>
     7a0:	12 c1       	rjmp	.+548    	; 0x9c6 <__stack+0xc7>
			switch(fsm){
     7a2:	12 30       	cpi	r17, 0x02	; 2
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <main+0x36e>
     7a6:	43 c0       	rjmp	.+134    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     7a8:	28 f4       	brcc	.+10     	; 0x7b4 <main+0x37a>
     7aa:	11 23       	and	r17, r17
     7ac:	61 f0       	breq	.+24     	; 0x7c6 <main+0x38c>
     7ae:	11 30       	cpi	r17, 0x01	; 1
     7b0:	21 f1       	breq	.+72     	; 0x7fa <main+0x3c0>
     7b2:	07 c1       	rjmp	.+526    	; 0x9c2 <__stack+0xc3>
     7b4:	14 30       	cpi	r17, 0x04	; 4
     7b6:	09 f4       	brne	.+2      	; 0x7ba <main+0x380>
     7b8:	8c c0       	rjmp	.+280    	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     7ba:	08 f4       	brcc	.+2      	; 0x7be <main+0x384>
     7bc:	52 c0       	rjmp	.+164    	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     7be:	15 30       	cpi	r17, 0x05	; 5
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <main+0x38a>
     7c2:	cd c0       	rjmp	.+410    	; 0x95e <__stack+0x5f>
     7c4:	fe c0       	rjmp	.+508    	; 0x9c2 <__stack+0xc3>
				case 0:
					fsm = 2;
					lq_setCursor(&device, 0, 9);
     7c6:	49 e0       	ldi	r20, 0x09	; 9
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	ce 01       	movw	r24, r28
     7cc:	c9 96       	adiw	r24, 0x39	; 57
     7ce:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     7d2:	65 e5       	ldi	r22, 0x55	; 85
     7d4:	71 e0       	ldi	r23, 0x01	; 1
     7d6:	ce 01       	movw	r24, r28
     7d8:	c9 96       	adiw	r24, 0x39	; 57
     7da:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					
					lq_setCursor(&device, 2, 8);
     7de:	48 e0       	ldi	r20, 0x08	; 8
     7e0:	62 e0       	ldi	r22, 0x02	; 2
     7e2:	ce 01       	movw	r24, r28
     7e4:	c9 96       	adiw	r24, 0x39	; 57
     7e6:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     7ea:	6c e6       	ldi	r22, 0x6C	; 108
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	ce 01       	movw	r24, r28
     7f0:	c9 96       	adiw	r24, 0x39	; 57
     7f2:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
		
		
		if(upPressed){
			switch(fsm){
				case 0:
					fsm = 2;
     7f6:	12 e0       	ldi	r17, 0x02	; 2
					lq_print(&device, " ");
					
					lq_setCursor(&device, 2, 8);
					lq_print(&device, "<");
					
				break;
     7f8:	e4 c0       	rjmp	.+456    	; 0x9c2 <__stack+0xc3>
				
				case 1:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
     7fa:	49 e0       	ldi	r20, 0x09	; 9
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	ce 01       	movw	r24, r28
     800:	c9 96       	adiw	r24, 0x39	; 57
     802:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     806:	6c e6       	ldi	r22, 0x6C	; 108
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	ce 01       	movw	r24, r28
     80c:	c9 96       	adiw	r24, 0x39	; 57
     80e:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 1, 9);
     812:	49 e0       	ldi	r20, 0x09	; 9
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	ce 01       	movw	r24, r28
     818:	c9 96       	adiw	r24, 0x39	; 57
     81a:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     81e:	65 e5       	ldi	r22, 0x55	; 85
     820:	71 e0       	ldi	r23, 0x01	; 1
     822:	ce 01       	movw	r24, r28
     824:	c9 96       	adiw	r24, 0x39	; 57
     826:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_print(&device, "<");
					
				break;
				
				case 1:
					fsm = 0;
     82a:	10 e0       	ldi	r17, 0x00	; 0
					lq_setCursor(&device, 0, 9);
					lq_print(&device, "<");
					lq_setCursor(&device, 1, 9);
					lq_print(&device, " ");
					
				break;
     82c:	ca c0       	rjmp	.+404    	; 0x9c2 <__stack+0xc3>
				
				case 2:
					fsm = 1;
					
					lq_setCursor(&device, 1, 9);
     82e:	49 e0       	ldi	r20, 0x09	; 9
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	ce 01       	movw	r24, r28
     834:	c9 96       	adiw	r24, 0x39	; 57
     836:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     83a:	6c e6       	ldi	r22, 0x6C	; 108
     83c:	71 e0       	ldi	r23, 0x01	; 1
     83e:	ce 01       	movw	r24, r28
     840:	c9 96       	adiw	r24, 0x39	; 57
     842:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 2, 8);
     846:	48 e0       	ldi	r20, 0x08	; 8
     848:	62 e0       	ldi	r22, 0x02	; 2
     84a:	ce 01       	movw	r24, r28
     84c:	c9 96       	adiw	r24, 0x39	; 57
     84e:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     852:	65 e5       	ldi	r22, 0x55	; 85
     854:	71 e0       	ldi	r23, 0x01	; 1
     856:	ce 01       	movw	r24, r28
     858:	c9 96       	adiw	r24, 0x39	; 57
     85a:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_print(&device, " ");
					
				break;
				
				case 2:
					fsm = 1;
     85e:	11 e0       	ldi	r17, 0x01	; 1
					lq_print(&device, "<");
					lq_setCursor(&device, 2, 8);
					lq_print(&device, " ");
					
				
				break;
     860:	b0 c0       	rjmp	.+352    	; 0x9c2 <__stack+0xc3>
				
				case 3:
					if(vol_num<100){
     862:	83 e6       	ldi	r24, 0x63	; 99
     864:	8e 15       	cp	r24, r14
     866:	08 f4       	brcc	.+2      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     868:	ac c0       	rjmp	.+344    	; 0x9c2 <__stack+0xc3>
						vol_num += 1;
     86a:	e3 94       	inc	r14
						lq_setCursor(&device, 0, 17);
     86c:	41 e1       	ldi	r20, 0x11	; 17
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	ce 01       	movw	r24, r28
     872:	c9 96       	adiw	r24, 0x39	; 57
     874:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
						sprintf(vol_str, "%d", vol_num);
     878:	1f 92       	push	r1
     87a:	ef 92       	push	r14
     87c:	8c e4       	ldi	r24, 0x4C	; 76
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	9f 93       	push	r25
     882:	8f 93       	push	r24
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	6c 01       	movw	r12, r24
     88a:	9f 93       	push	r25
     88c:	8f 93       	push	r24
     88e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sprintf>
						lq_print(&device, vol_str);
     892:	b6 01       	movw	r22, r12
     894:	ce 01       	movw	r24, r28
     896:	c9 96       	adiw	r24, 0x39	; 57
     898:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						if (vol_num < 10) {
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	99 e0       	ldi	r25, 0x09	; 9
     8aa:	9e 15       	cp	r25, r14
     8ac:	38 f0       	brcs	.+14     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
							lq_print(&device, "  ");
     8ae:	64 e5       	ldi	r22, 0x54	; 84
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	ce 01       	movw	r24, r28
     8b4:	c9 96       	adiw	r24, 0x39	; 57
     8b6:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
     8ba:	83 c0       	rjmp	.+262    	; 0x9c2 <__stack+0xc3>
							} else if (vol_num < 100) {
     8bc:	83 e6       	ldi	r24, 0x63	; 99
     8be:	8e 15       	cp	r24, r14
     8c0:	08 f4       	brcc	.+2      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     8c2:	7f c0       	rjmp	.+254    	; 0x9c2 <__stack+0xc3>
							lq_print(&device, " ");
     8c4:	65 e5       	ldi	r22, 0x55	; 85
     8c6:	71 e0       	ldi	r23, 0x01	; 1
     8c8:	ce 01       	movw	r24, r28
     8ca:	c9 96       	adiw	r24, 0x39	; 57
     8cc:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
     8d0:	78 c0       	rjmp	.+240    	; 0x9c2 <__stack+0xc3>
					
				break;
				
				case 4:
					
					if (freq_id == 9) {
     8d2:	99 e0       	ldi	r25, 0x09	; 9
     8d4:	f9 16       	cp	r15, r25
     8d6:	11 f0       	breq	.+4      	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
						freq_id = 0;
						} else {
							freq_id += 1;
     8d8:	f3 94       	inc	r15
     8da:	01 c0       	rjmp	.+2      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
				break;
				
				case 4:
					
					if (freq_id == 9) {
						freq_id = 0;
     8dc:	f1 2c       	mov	r15, r1
						} else {
							freq_id += 1;
						}
					lq_setCursor(&device, 1, 14);
     8de:	4e e0       	ldi	r20, 0x0E	; 14
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	ce 01       	movw	r24, r28
     8e4:	c9 96       	adiw	r24, 0x39	; 57
     8e6:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					switch(freq_id) {
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	8f 15       	cp	r24, r15
     8ee:	20 f4       	brcc	.+8      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     8f0:	96 e0       	ldi	r25, 0x06	; 6
     8f2:	9f 15       	cp	r25, r15
     8f4:	70 f0       	brcs	.+28     	; 0x912 <__stack+0x13>
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <__stack+0x7>
						case 0: case 1:
						lq_print(&device, "  ");
     8f8:	64 e5       	ldi	r22, 0x54	; 84
     8fa:	71 e0       	ldi	r23, 0x01	; 1
     8fc:	ce 01       	movw	r24, r28
     8fe:	c9 96       	adiw	r24, 0x39	; 57
     900:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						break;
     904:	06 c0       	rjmp	.+12     	; 0x912 <__stack+0x13>
						case 2: case 3: case 4: case 5: case 6:
						lq_print(&device, " ");
     906:	65 e5       	ldi	r22, 0x55	; 85
     908:	71 e0       	ldi	r23, 0x01	; 1
     90a:	ce 01       	movw	r24, r28
     90c:	c9 96       	adiw	r24, 0x39	; 57
     90e:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						break;
						
					}
					sprintf(freq_str, "%d", frequency[freq_id]);
     912:	ef 2d       	mov	r30, r15
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	8c 0f       	add	r24, r28
     920:	9d 1f       	adc	r25, r29
     922:	e8 0f       	add	r30, r24
     924:	f9 1f       	adc	r31, r25
     926:	85 a1       	ldd	r24, Z+37	; 0x25
     928:	8f 93       	push	r24
     92a:	84 a1       	ldd	r24, Z+36	; 0x24
     92c:	8f 93       	push	r24
     92e:	8c e4       	ldi	r24, 0x4C	; 76
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	6e 01       	movw	r12, r28
     938:	95 e0       	ldi	r25, 0x05	; 5
     93a:	c9 0e       	add	r12, r25
     93c:	d1 1c       	adc	r13, r1
     93e:	df 92       	push	r13
     940:	cf 92       	push	r12
     942:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sprintf>
					lq_print(&device, freq_str);
     946:	b6 01       	movw	r22, r12
     948:	ce 01       	movw	r24, r28
     94a:	c9 96       	adiw	r24, 0x39	; 57
     94c:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						
					
				break;
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	32 c0       	rjmp	.+100    	; 0x9c2 <__stack+0xc3>
				
				case 5:
					if (waveform_id == 2) {
     95e:	02 30       	cpi	r16, 0x02	; 2
     960:	11 f0       	breq	.+4      	; 0x966 <__stack+0x67>
						waveform_id = 0;
						} else {
						waveform_id += 1;
     962:	0f 5f       	subi	r16, 0xFF	; 255
     964:	01 c0       	rjmp	.+2      	; 0x968 <__stack+0x69>
					
				break;
				
				case 5:
					if (waveform_id == 2) {
						waveform_id = 0;
     966:	00 e0       	ldi	r16, 0x00	; 0
						} else {
						waveform_id += 1;
					}
					
					lq_setCursor(&device, 2, 12);
     968:	4c e0       	ldi	r20, 0x0C	; 12
     96a:	62 e0       	ldi	r22, 0x02	; 2
     96c:	ce 01       	movw	r24, r28
     96e:	c9 96       	adiw	r24, 0x39	; 57
     970:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					
					switch(waveform_id) {
     974:	00 23       	and	r16, r16
     976:	19 f0       	breq	.+6      	; 0x97e <__stack+0x7f>
     978:	01 30       	cpi	r16, 0x01	; 1
     97a:	41 f0       	breq	.+16     	; 0x98c <__stack+0x8d>
     97c:	0d c0       	rjmp	.+26     	; 0x998 <__stack+0x99>
						case 0:  // Sine
							lq_print(&device, "    ");
     97e:	62 e5       	ldi	r22, 0x52	; 82
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	ce 01       	movw	r24, r28
     984:	c9 96       	adiw	r24, 0x39	; 57
     986:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
							break;
     98a:	06 c0       	rjmp	.+12     	; 0x998 <__stack+0x99>
						case 1:  // Square
							lq_print(&device, "  ");
     98c:	64 e5       	ldi	r22, 0x54	; 84
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	ce 01       	movw	r24, r28
     992:	c9 96       	adiw	r24, 0x39	; 57
     994:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
							break;
					
					}
					
					lq_print(&device, waveform[waveform_id]);
     998:	80 2f       	mov	r24, r16
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	bc 01       	movw	r22, r24
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	66 0f       	add	r22, r22
     9a4:	77 1f       	adc	r23, r23
     9a6:	66 0f       	add	r22, r22
     9a8:	77 1f       	adc	r23, r23
     9aa:	68 0f       	add	r22, r24
     9ac:	79 1f       	adc	r23, r25
     9ae:	8a e0       	ldi	r24, 0x0A	; 10
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	8c 0f       	add	r24, r28
     9b4:	9d 1f       	adc	r25, r29
     9b6:	68 0f       	add	r22, r24
     9b8:	79 1f       	adc	r23, r25
     9ba:	ce 01       	movw	r24, r28
     9bc:	c9 96       	adiw	r24, 0x39	; 57
     9be:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
				break;
				
			}
			
			upPressed = 0;
     9c2:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <upPressed>
		}
		
		
		if(downPressed){
     9c6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     9ca:	88 23       	and	r24, r24
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <__stack+0xd1>
     9ce:	e8 cd       	rjmp	.-1072   	; 0x5a0 <main+0x166>
			switch(fsm){
     9d0:	12 30       	cpi	r17, 0x02	; 2
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	43 c0       	rjmp	.+134    	; 0xa5c <__stack+0x15d>
     9d6:	28 f4       	brcc	.+10     	; 0x9e2 <__stack+0xe3>
     9d8:	11 23       	and	r17, r17
     9da:	61 f0       	breq	.+24     	; 0x9f4 <__stack+0xf5>
     9dc:	11 30       	cpi	r17, 0x01	; 1
     9de:	21 f1       	breq	.+72     	; 0xa28 <__stack+0x129>
     9e0:	08 c1       	rjmp	.+528    	; 0xbf2 <__stack+0x2f3>
     9e2:	14 30       	cpi	r17, 0x04	; 4
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__stack+0xe9>
     9e6:	8b c0       	rjmp	.+278    	; 0xafe <__stack+0x1ff>
     9e8:	08 f4       	brcc	.+2      	; 0x9ec <__stack+0xed>
     9ea:	52 c0       	rjmp	.+164    	; 0xa90 <__stack+0x191>
     9ec:	15 30       	cpi	r17, 0x05	; 5
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	ce c0       	rjmp	.+412    	; 0xb8e <__stack+0x28f>
     9f2:	ff c0       	rjmp	.+510    	; 0xbf2 <__stack+0x2f3>
				case 0:
					fsm = 1;
					lq_setCursor(&device, 0, 9);
     9f4:	49 e0       	ldi	r20, 0x09	; 9
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	ce 01       	movw	r24, r28
     9fa:	c9 96       	adiw	r24, 0x39	; 57
     9fc:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     a00:	65 e5       	ldi	r22, 0x55	; 85
     a02:	71 e0       	ldi	r23, 0x01	; 1
     a04:	ce 01       	movw	r24, r28
     a06:	c9 96       	adiw	r24, 0x39	; 57
     a08:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 1, 9);
     a0c:	49 e0       	ldi	r20, 0x09	; 9
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	ce 01       	movw	r24, r28
     a12:	c9 96       	adiw	r24, 0x39	; 57
     a14:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     a18:	6c e6       	ldi	r22, 0x6C	; 108
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	ce 01       	movw	r24, r28
     a1e:	c9 96       	adiw	r24, 0x39	; 57
     a20:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
		
		
		if(downPressed){
			switch(fsm){
				case 0:
					fsm = 1;
     a24:	11 e0       	ldi	r17, 0x01	; 1
					lq_setCursor(&device, 0, 9);
					lq_print(&device, " ");
					lq_setCursor(&device, 1, 9);
					lq_print(&device, "<");
					
				break;
     a26:	e5 c0       	rjmp	.+458    	; 0xbf2 <__stack+0x2f3>
				
				case 1:
					fsm = 2;
					
					lq_setCursor(&device, 1, 9);
     a28:	49 e0       	ldi	r20, 0x09	; 9
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	ce 01       	movw	r24, r28
     a2e:	c9 96       	adiw	r24, 0x39	; 57
     a30:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     a34:	65 e5       	ldi	r22, 0x55	; 85
     a36:	71 e0       	ldi	r23, 0x01	; 1
     a38:	ce 01       	movw	r24, r28
     a3a:	c9 96       	adiw	r24, 0x39	; 57
     a3c:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_setCursor(&device, 2, 8);
     a40:	48 e0       	ldi	r20, 0x08	; 8
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	ce 01       	movw	r24, r28
     a46:	c9 96       	adiw	r24, 0x39	; 57
     a48:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     a4c:	6c e6       	ldi	r22, 0x6C	; 108
     a4e:	71 e0       	ldi	r23, 0x01	; 1
     a50:	ce 01       	movw	r24, r28
     a52:	c9 96       	adiw	r24, 0x39	; 57
     a54:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_print(&device, "<");
					
				break;
				
				case 1:
					fsm = 2;
     a58:	12 e0       	ldi	r17, 0x02	; 2
					lq_setCursor(&device, 1, 9);
					lq_print(&device, " ");
					lq_setCursor(&device, 2, 8);
					lq_print(&device, "<");
					
				break;
     a5a:	cb c0       	rjmp	.+406    	; 0xbf2 <__stack+0x2f3>
				
				case 2:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
     a5c:	49 e0       	ldi	r20, 0x09	; 9
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	ce 01       	movw	r24, r28
     a62:	c9 96       	adiw	r24, 0x39	; 57
     a64:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, "<");
     a68:	6c e6       	ldi	r22, 0x6C	; 108
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	ce 01       	movw	r24, r28
     a6e:	c9 96       	adiw	r24, 0x39	; 57
     a70:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					
					lq_setCursor(&device, 2, 8);
     a74:	48 e0       	ldi	r20, 0x08	; 8
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	ce 01       	movw	r24, r28
     a7a:	c9 96       	adiw	r24, 0x39	; 57
     a7c:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					lq_print(&device, " ");
     a80:	65 e5       	ldi	r22, 0x55	; 85
     a82:	71 e0       	ldi	r23, 0x01	; 1
     a84:	ce 01       	movw	r24, r28
     a86:	c9 96       	adiw	r24, 0x39	; 57
     a88:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
					lq_print(&device, "<");
					
				break;
				
				case 2:
					fsm = 0;
     a8c:	10 e0       	ldi	r17, 0x00	; 0
					
					lq_setCursor(&device, 2, 8);
					lq_print(&device, " ");
					
				
				break;
     a8e:	b1 c0       	rjmp	.+354    	; 0xbf2 <__stack+0x2f3>
				
				case 3:
					if(vol_num > 0){
     a90:	ee 20       	and	r14, r14
     a92:	09 f4       	brne	.+2      	; 0xa96 <__stack+0x197>
     a94:	ae c0       	rjmp	.+348    	; 0xbf2 <__stack+0x2f3>
						vol_num -= 1;
     a96:	ea 94       	dec	r14
						lq_setCursor(&device, 0, 17);
     a98:	41 e1       	ldi	r20, 0x11	; 17
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	ce 01       	movw	r24, r28
     a9e:	c9 96       	adiw	r24, 0x39	; 57
     aa0:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
						sprintf(vol_str, "%d", vol_num);
     aa4:	1f 92       	push	r1
     aa6:	ef 92       	push	r14
     aa8:	8c e4       	ldi	r24, 0x4C	; 76
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	6c 01       	movw	r12, r24
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sprintf>
						lq_print(&device, vol_str);
     abe:	b6 01       	movw	r22, r12
     ac0:	ce 01       	movw	r24, r28
     ac2:	c9 96       	adiw	r24, 0x39	; 57
     ac4:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						if (vol_num < 10) {
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	99 e0       	ldi	r25, 0x09	; 9
     ad6:	9e 15       	cp	r25, r14
     ad8:	38 f0       	brcs	.+14     	; 0xae8 <__stack+0x1e9>
							lq_print(&device, "  ");
     ada:	64 e5       	ldi	r22, 0x54	; 84
     adc:	71 e0       	ldi	r23, 0x01	; 1
     ade:	ce 01       	movw	r24, r28
     ae0:	c9 96       	adiw	r24, 0x39	; 57
     ae2:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
     ae6:	85 c0       	rjmp	.+266    	; 0xbf2 <__stack+0x2f3>
							} else if (vol_num < 100) {
     ae8:	83 e6       	ldi	r24, 0x63	; 99
     aea:	8e 15       	cp	r24, r14
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <__stack+0x1f1>
     aee:	81 c0       	rjmp	.+258    	; 0xbf2 <__stack+0x2f3>
							lq_print(&device, " ");
     af0:	65 e5       	ldi	r22, 0x55	; 85
     af2:	71 e0       	ldi	r23, 0x01	; 1
     af4:	ce 01       	movw	r24, r28
     af6:	c9 96       	adiw	r24, 0x39	; 57
     af8:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
     afc:	7a c0       	rjmp	.+244    	; 0xbf2 <__stack+0x2f3>
					
					
				break;
				
				case 4:
					if (freq_id == 0) {
     afe:	ff 20       	and	r15, r15
     b00:	11 f0       	breq	.+4      	; 0xb06 <__stack+0x207>
						freq_id = 9;
						} else {
						freq_id -= 1;
     b02:	fa 94       	dec	r15
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <__stack+0x20f>
					
				break;
				
				case 4:
					if (freq_id == 0) {
						freq_id = 9;
     b06:	0f 2e       	mov	r0, r31
     b08:	f9 e0       	ldi	r31, 0x09	; 9
     b0a:	ff 2e       	mov	r15, r31
     b0c:	f0 2d       	mov	r31, r0
						} else {
						freq_id -= 1;
					}
					lq_setCursor(&device, 1, 14);
     b0e:	4e e0       	ldi	r20, 0x0E	; 14
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	ce 01       	movw	r24, r28
     b14:	c9 96       	adiw	r24, 0x39	; 57
     b16:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					switch(freq_id) {
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	9f 15       	cp	r25, r15
     b1e:	20 f4       	brcc	.+8      	; 0xb28 <__stack+0x229>
     b20:	86 e0       	ldi	r24, 0x06	; 6
     b22:	8f 15       	cp	r24, r15
     b24:	70 f0       	brcs	.+28     	; 0xb42 <__stack+0x243>
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <__stack+0x237>
						case 0: case 1:
						lq_print(&device, "  ");
     b28:	64 e5       	ldi	r22, 0x54	; 84
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	ce 01       	movw	r24, r28
     b2e:	c9 96       	adiw	r24, 0x39	; 57
     b30:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						break;
     b34:	06 c0       	rjmp	.+12     	; 0xb42 <__stack+0x243>
						case 2: case 3: case 4: case 5: case 6:
						lq_print(&device, " ");
     b36:	65 e5       	ldi	r22, 0x55	; 85
     b38:	71 e0       	ldi	r23, 0x01	; 1
     b3a:	ce 01       	movw	r24, r28
     b3c:	c9 96       	adiw	r24, 0x39	; 57
     b3e:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						break;
						
					}
					sprintf(freq_str, "%d", frequency[freq_id]);
     b42:	ef 2d       	mov	r30, r15
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	8c 0f       	add	r24, r28
     b50:	9d 1f       	adc	r25, r29
     b52:	e8 0f       	add	r30, r24
     b54:	f9 1f       	adc	r31, r25
     b56:	85 a1       	ldd	r24, Z+37	; 0x25
     b58:	8f 93       	push	r24
     b5a:	84 a1       	ldd	r24, Z+36	; 0x24
     b5c:	8f 93       	push	r24
     b5e:	8c e4       	ldi	r24, 0x4C	; 76
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	9f 93       	push	r25
     b64:	8f 93       	push	r24
     b66:	6e 01       	movw	r12, r28
     b68:	95 e0       	ldi	r25, 0x05	; 5
     b6a:	c9 0e       	add	r12, r25
     b6c:	d1 1c       	adc	r13, r1
     b6e:	df 92       	push	r13
     b70:	cf 92       	push	r12
     b72:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sprintf>
					lq_print(&device, freq_str);
     b76:	b6 01       	movw	r22, r12
     b78:	ce 01       	movw	r24, r28
     b7a:	c9 96       	adiw	r24, 0x39	; 57
     b7c:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
				break;
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	32 c0       	rjmp	.+100    	; 0xbf2 <__stack+0x2f3>
				
				case 5:
					if (waveform_id == 0) {
     b8e:	00 23       	and	r16, r16
     b90:	11 f0       	breq	.+4      	; 0xb96 <__stack+0x297>
						waveform_id = 2;
						} else {
						waveform_id -= 1;
     b92:	01 50       	subi	r16, 0x01	; 1
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <__stack+0x299>
					lq_print(&device, freq_str);
				break;
				
				case 5:
					if (waveform_id == 0) {
						waveform_id = 2;
     b96:	02 e0       	ldi	r16, 0x02	; 2
						} else {
						waveform_id -= 1;
					}
					
					lq_setCursor(&device, 2, 12);
     b98:	4c e0       	ldi	r20, 0x0C	; 12
     b9a:	62 e0       	ldi	r22, 0x02	; 2
     b9c:	ce 01       	movw	r24, r28
     b9e:	c9 96       	adiw	r24, 0x39	; 57
     ba0:	0e 94 49 01 	call	0x292	; 0x292 <lq_setCursor>
					
					switch(waveform_id) {
     ba4:	00 23       	and	r16, r16
     ba6:	19 f0       	breq	.+6      	; 0xbae <__stack+0x2af>
     ba8:	01 30       	cpi	r16, 0x01	; 1
     baa:	41 f0       	breq	.+16     	; 0xbbc <__stack+0x2bd>
     bac:	0d c0       	rjmp	.+26     	; 0xbc8 <__stack+0x2c9>
						case 0:  // Sine
						lq_print(&device, "    ");
     bae:	62 e5       	ldi	r22, 0x52	; 82
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	ce 01       	movw	r24, r28
     bb4:	c9 96       	adiw	r24, 0x39	; 57
     bb6:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						break;
     bba:	06 c0       	rjmp	.+12     	; 0xbc8 <__stack+0x2c9>
						case 1:  // Square
						lq_print(&device, "  ");
     bbc:	64 e5       	ldi	r22, 0x54	; 84
     bbe:	71 e0       	ldi	r23, 0x01	; 1
     bc0:	ce 01       	movw	r24, r28
     bc2:	c9 96       	adiw	r24, 0x39	; 57
     bc4:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
						break;
						
					}
					
					lq_print(&device, waveform[waveform_id]);
     bc8:	80 2f       	mov	r24, r16
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	bc 01       	movw	r22, r24
     bce:	66 0f       	add	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	66 0f       	add	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	66 0f       	add	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	68 0f       	add	r22, r24
     bdc:	79 1f       	adc	r23, r25
     bde:	8a e0       	ldi	r24, 0x0A	; 10
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	8c 0f       	add	r24, r28
     be4:	9d 1f       	adc	r25, r29
     be6:	68 0f       	add	r22, r24
     be8:	79 1f       	adc	r23, r25
     bea:	ce 01       	movw	r24, r28
     bec:	c9 96       	adiw	r24, 0x39	; 57
     bee:	0e 94 30 01 	call	0x260	; 0x260 <lq_print>
				break;
				
			}
			
			downPressed = 0;
     bf2:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
     bf6:	d4 cc       	rjmp	.-1624   	; 0x5a0 <main+0x166>

00000bf8 <__vector_5>:
}




ISR(PCINT2_vect) {
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	2f 93       	push	r18
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
	
	if  (PIND & (1 << 2)) {
     c08:	4a 9b       	sbis	0x09, 2	; 9
     c0a:	0e c0       	rjmp	.+28     	; 0xc28 <__vector_5+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	80 e7       	ldi	r24, 0x70	; 112
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	21 50       	subi	r18, 0x01	; 1
     c14:	80 40       	sbci	r24, 0x00	; 0
     c16:	90 40       	sbci	r25, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <__vector_5+0x1a>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <__vector_5+0x24>
     c1c:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << 2)) {}
     c1e:	4a 99       	sbic	0x09, 2	; 9
     c20:	fe cf       	rjmp	.-4      	; 0xc1e <__vector_5+0x26>
		selectPressed = 1;  // Set flag for PD2 button press
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <selectPressed>
	}
	
	if  (PIND & (1 << 4)) {
     c28:	4c 9b       	sbis	0x09, 4	; 9
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <__vector_5+0x50>
     c2c:	2f ef       	ldi	r18, 0xFF	; 255
     c2e:	80 e7       	ldi	r24, 0x70	; 112
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	21 50       	subi	r18, 0x01	; 1
     c34:	80 40       	sbci	r24, 0x00	; 0
     c36:	90 40       	sbci	r25, 0x00	; 0
     c38:	e1 f7       	brne	.-8      	; 0xc32 <__vector_5+0x3a>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <__vector_5+0x44>
     c3c:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << 4)) {}
     c3e:	4c 99       	sbic	0x09, 4	; 9
     c40:	fe cf       	rjmp	.-4      	; 0xc3e <__vector_5+0x46>
		upPressed = 1;  // Set flag for PD4 button press
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <upPressed>
	}
	
	if  (PIND & (1 << 7)) {
     c48:	4f 9b       	sbis	0x09, 7	; 9
     c4a:	0e c0       	rjmp	.+28     	; 0xc68 <__vector_5+0x70>
     c4c:	2f ef       	ldi	r18, 0xFF	; 255
     c4e:	80 e7       	ldi	r24, 0x70	; 112
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	21 50       	subi	r18, 0x01	; 1
     c54:	80 40       	sbci	r24, 0x00	; 0
     c56:	90 40       	sbci	r25, 0x00	; 0
     c58:	e1 f7       	brne	.-8      	; 0xc52 <__vector_5+0x5a>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <__vector_5+0x64>
     c5c:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << 7)) {}
     c5e:	4f 99       	sbic	0x09, 7	; 9
     c60:	fe cf       	rjmp	.-4      	; 0xc5e <__vector_5+0x66>
		downPressed = 1;  // Set flag for PD7 button press
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
	}
}
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__udivmodsi4>:
     c78:	a1 e2       	ldi	r26, 0x21	; 33
     c7a:	1a 2e       	mov	r1, r26
     c7c:	aa 1b       	sub	r26, r26
     c7e:	bb 1b       	sub	r27, r27
     c80:	fd 01       	movw	r30, r26
     c82:	0d c0       	rjmp	.+26     	; 0xc9e <__udivmodsi4_ep>

00000c84 <__udivmodsi4_loop>:
     c84:	aa 1f       	adc	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	ee 1f       	adc	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	a2 17       	cp	r26, r18
     c8e:	b3 07       	cpc	r27, r19
     c90:	e4 07       	cpc	r30, r20
     c92:	f5 07       	cpc	r31, r21
     c94:	20 f0       	brcs	.+8      	; 0xc9e <__udivmodsi4_ep>
     c96:	a2 1b       	sub	r26, r18
     c98:	b3 0b       	sbc	r27, r19
     c9a:	e4 0b       	sbc	r30, r20
     c9c:	f5 0b       	sbc	r31, r21

00000c9e <__udivmodsi4_ep>:
     c9e:	66 1f       	adc	r22, r22
     ca0:	77 1f       	adc	r23, r23
     ca2:	88 1f       	adc	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	1a 94       	dec	r1
     ca8:	69 f7       	brne	.-38     	; 0xc84 <__udivmodsi4_loop>
     caa:	60 95       	com	r22
     cac:	70 95       	com	r23
     cae:	80 95       	com	r24
     cb0:	90 95       	com	r25
     cb2:	9b 01       	movw	r18, r22
     cb4:	ac 01       	movw	r20, r24
     cb6:	bd 01       	movw	r22, r26
     cb8:	cf 01       	movw	r24, r30
     cba:	08 95       	ret

00000cbc <sprintf>:
     cbc:	ae e0       	ldi	r26, 0x0E	; 14
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e4 e6       	ldi	r30, 0x64	; 100
     cc2:	f6 e0       	ldi	r31, 0x06	; 6
     cc4:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__prologue_saves__+0x1c>
     cc8:	0d 89       	ldd	r16, Y+21	; 0x15
     cca:	1e 89       	ldd	r17, Y+22	; 0x16
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	8c 83       	std	Y+4, r24	; 0x04
     cd0:	1a 83       	std	Y+2, r17	; 0x02
     cd2:	09 83       	std	Y+1, r16	; 0x01
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	9f e7       	ldi	r25, 0x7F	; 127
     cd8:	9e 83       	std	Y+6, r25	; 0x06
     cda:	8d 83       	std	Y+5, r24	; 0x05
     cdc:	ae 01       	movw	r20, r28
     cde:	47 5e       	subi	r20, 0xE7	; 231
     ce0:	5f 4f       	sbci	r21, 0xFF	; 255
     ce2:	6f 89       	ldd	r22, Y+23	; 0x17
     ce4:	78 8d       	ldd	r23, Y+24	; 0x18
     ce6:	ce 01       	movw	r24, r28
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	0e 94 80 06 	call	0xd00	; 0xd00 <vfprintf>
     cee:	ef 81       	ldd	r30, Y+7	; 0x07
     cf0:	f8 85       	ldd	r31, Y+8	; 0x08
     cf2:	e0 0f       	add	r30, r16
     cf4:	f1 1f       	adc	r31, r17
     cf6:	10 82       	st	Z, r1
     cf8:	2e 96       	adiw	r28, 0x0e	; 14
     cfa:	e4 e0       	ldi	r30, 0x04	; 4
     cfc:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__epilogue_restores__+0x1c>

00000d00 <vfprintf>:
     d00:	ab e0       	ldi	r26, 0x0B	; 11
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e6 e8       	ldi	r30, 0x86	; 134
     d06:	f6 e0       	ldi	r31, 0x06	; 6
     d08:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__prologue_saves__>
     d0c:	6c 01       	movw	r12, r24
     d0e:	7b 01       	movw	r14, r22
     d10:	8a 01       	movw	r16, r20
     d12:	fc 01       	movw	r30, r24
     d14:	17 82       	std	Z+7, r1	; 0x07
     d16:	16 82       	std	Z+6, r1	; 0x06
     d18:	83 81       	ldd	r24, Z+3	; 0x03
     d1a:	81 ff       	sbrs	r24, 1
     d1c:	cc c1       	rjmp	.+920    	; 0x10b6 <vfprintf+0x3b6>
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	3c 01       	movw	r6, r24
     d24:	f6 01       	movw	r30, r12
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	f7 01       	movw	r30, r14
     d2a:	93 fd       	sbrc	r25, 3
     d2c:	85 91       	lpm	r24, Z+
     d2e:	93 ff       	sbrs	r25, 3
     d30:	81 91       	ld	r24, Z+
     d32:	7f 01       	movw	r14, r30
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <vfprintf+0x3a>
     d38:	ba c1       	rjmp	.+884    	; 0x10ae <vfprintf+0x3ae>
     d3a:	85 32       	cpi	r24, 0x25	; 37
     d3c:	39 f4       	brne	.+14     	; 0xd4c <vfprintf+0x4c>
     d3e:	93 fd       	sbrc	r25, 3
     d40:	85 91       	lpm	r24, Z+
     d42:	93 ff       	sbrs	r25, 3
     d44:	81 91       	ld	r24, Z+
     d46:	7f 01       	movw	r14, r30
     d48:	85 32       	cpi	r24, 0x25	; 37
     d4a:	29 f4       	brne	.+10     	; 0xd56 <vfprintf+0x56>
     d4c:	b6 01       	movw	r22, r12
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
     d54:	e7 cf       	rjmp	.-50     	; 0xd24 <vfprintf+0x24>
     d56:	91 2c       	mov	r9, r1
     d58:	21 2c       	mov	r2, r1
     d5a:	31 2c       	mov	r3, r1
     d5c:	ff e1       	ldi	r31, 0x1F	; 31
     d5e:	f3 15       	cp	r31, r3
     d60:	d8 f0       	brcs	.+54     	; 0xd98 <vfprintf+0x98>
     d62:	8b 32       	cpi	r24, 0x2B	; 43
     d64:	79 f0       	breq	.+30     	; 0xd84 <vfprintf+0x84>
     d66:	38 f4       	brcc	.+14     	; 0xd76 <vfprintf+0x76>
     d68:	80 32       	cpi	r24, 0x20	; 32
     d6a:	79 f0       	breq	.+30     	; 0xd8a <vfprintf+0x8a>
     d6c:	83 32       	cpi	r24, 0x23	; 35
     d6e:	a1 f4       	brne	.+40     	; 0xd98 <vfprintf+0x98>
     d70:	23 2d       	mov	r18, r3
     d72:	20 61       	ori	r18, 0x10	; 16
     d74:	1d c0       	rjmp	.+58     	; 0xdb0 <vfprintf+0xb0>
     d76:	8d 32       	cpi	r24, 0x2D	; 45
     d78:	61 f0       	breq	.+24     	; 0xd92 <vfprintf+0x92>
     d7a:	80 33       	cpi	r24, 0x30	; 48
     d7c:	69 f4       	brne	.+26     	; 0xd98 <vfprintf+0x98>
     d7e:	23 2d       	mov	r18, r3
     d80:	21 60       	ori	r18, 0x01	; 1
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <vfprintf+0xb0>
     d84:	83 2d       	mov	r24, r3
     d86:	82 60       	ori	r24, 0x02	; 2
     d88:	38 2e       	mov	r3, r24
     d8a:	e3 2d       	mov	r30, r3
     d8c:	e4 60       	ori	r30, 0x04	; 4
     d8e:	3e 2e       	mov	r3, r30
     d90:	2a c0       	rjmp	.+84     	; 0xde6 <vfprintf+0xe6>
     d92:	f3 2d       	mov	r31, r3
     d94:	f8 60       	ori	r31, 0x08	; 8
     d96:	1d c0       	rjmp	.+58     	; 0xdd2 <vfprintf+0xd2>
     d98:	37 fc       	sbrc	r3, 7
     d9a:	2d c0       	rjmp	.+90     	; 0xdf6 <vfprintf+0xf6>
     d9c:	20 ed       	ldi	r18, 0xD0	; 208
     d9e:	28 0f       	add	r18, r24
     da0:	2a 30       	cpi	r18, 0x0A	; 10
     da2:	40 f0       	brcs	.+16     	; 0xdb4 <vfprintf+0xb4>
     da4:	8e 32       	cpi	r24, 0x2E	; 46
     da6:	b9 f4       	brne	.+46     	; 0xdd6 <vfprintf+0xd6>
     da8:	36 fc       	sbrc	r3, 6
     daa:	81 c1       	rjmp	.+770    	; 0x10ae <vfprintf+0x3ae>
     dac:	23 2d       	mov	r18, r3
     dae:	20 64       	ori	r18, 0x40	; 64
     db0:	32 2e       	mov	r3, r18
     db2:	19 c0       	rjmp	.+50     	; 0xde6 <vfprintf+0xe6>
     db4:	36 fe       	sbrs	r3, 6
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0xc4>
     db8:	8a e0       	ldi	r24, 0x0A	; 10
     dba:	98 9e       	mul	r9, r24
     dbc:	20 0d       	add	r18, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	92 2e       	mov	r9, r18
     dc2:	11 c0       	rjmp	.+34     	; 0xde6 <vfprintf+0xe6>
     dc4:	ea e0       	ldi	r30, 0x0A	; 10
     dc6:	2e 9e       	mul	r2, r30
     dc8:	20 0d       	add	r18, r0
     dca:	11 24       	eor	r1, r1
     dcc:	22 2e       	mov	r2, r18
     dce:	f3 2d       	mov	r31, r3
     dd0:	f0 62       	ori	r31, 0x20	; 32
     dd2:	3f 2e       	mov	r3, r31
     dd4:	08 c0       	rjmp	.+16     	; 0xde6 <vfprintf+0xe6>
     dd6:	8c 36       	cpi	r24, 0x6C	; 108
     dd8:	21 f4       	brne	.+8      	; 0xde2 <vfprintf+0xe2>
     dda:	83 2d       	mov	r24, r3
     ddc:	80 68       	ori	r24, 0x80	; 128
     dde:	38 2e       	mov	r3, r24
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <vfprintf+0xe6>
     de2:	88 36       	cpi	r24, 0x68	; 104
     de4:	41 f4       	brne	.+16     	; 0xdf6 <vfprintf+0xf6>
     de6:	f7 01       	movw	r30, r14
     de8:	93 fd       	sbrc	r25, 3
     dea:	85 91       	lpm	r24, Z+
     dec:	93 ff       	sbrs	r25, 3
     dee:	81 91       	ld	r24, Z+
     df0:	7f 01       	movw	r14, r30
     df2:	81 11       	cpse	r24, r1
     df4:	b3 cf       	rjmp	.-154    	; 0xd5c <vfprintf+0x5c>
     df6:	98 2f       	mov	r25, r24
     df8:	9f 7d       	andi	r25, 0xDF	; 223
     dfa:	95 54       	subi	r25, 0x45	; 69
     dfc:	93 30       	cpi	r25, 0x03	; 3
     dfe:	28 f4       	brcc	.+10     	; 0xe0a <vfprintf+0x10a>
     e00:	0c 5f       	subi	r16, 0xFC	; 252
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	9f e3       	ldi	r25, 0x3F	; 63
     e06:	99 83       	std	Y+1, r25	; 0x01
     e08:	0d c0       	rjmp	.+26     	; 0xe24 <vfprintf+0x124>
     e0a:	83 36       	cpi	r24, 0x63	; 99
     e0c:	31 f0       	breq	.+12     	; 0xe1a <vfprintf+0x11a>
     e0e:	83 37       	cpi	r24, 0x73	; 115
     e10:	71 f0       	breq	.+28     	; 0xe2e <vfprintf+0x12e>
     e12:	83 35       	cpi	r24, 0x53	; 83
     e14:	09 f0       	breq	.+2      	; 0xe18 <vfprintf+0x118>
     e16:	59 c0       	rjmp	.+178    	; 0xeca <vfprintf+0x1ca>
     e18:	21 c0       	rjmp	.+66     	; 0xe5c <vfprintf+0x15c>
     e1a:	f8 01       	movw	r30, r16
     e1c:	80 81       	ld	r24, Z
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	0e 5f       	subi	r16, 0xFE	; 254
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	88 24       	eor	r8, r8
     e26:	83 94       	inc	r8
     e28:	91 2c       	mov	r9, r1
     e2a:	53 01       	movw	r10, r6
     e2c:	13 c0       	rjmp	.+38     	; 0xe54 <vfprintf+0x154>
     e2e:	28 01       	movw	r4, r16
     e30:	f2 e0       	ldi	r31, 0x02	; 2
     e32:	4f 0e       	add	r4, r31
     e34:	51 1c       	adc	r5, r1
     e36:	f8 01       	movw	r30, r16
     e38:	a0 80       	ld	r10, Z
     e3a:	b1 80       	ldd	r11, Z+1	; 0x01
     e3c:	36 fe       	sbrs	r3, 6
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <vfprintf+0x146>
     e40:	69 2d       	mov	r22, r9
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x14a>
     e46:	6f ef       	ldi	r22, 0xFF	; 255
     e48:	7f ef       	ldi	r23, 0xFF	; 255
     e4a:	c5 01       	movw	r24, r10
     e4c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <strnlen>
     e50:	4c 01       	movw	r8, r24
     e52:	82 01       	movw	r16, r4
     e54:	f3 2d       	mov	r31, r3
     e56:	ff 77       	andi	r31, 0x7F	; 127
     e58:	3f 2e       	mov	r3, r31
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <vfprintf+0x188>
     e5c:	28 01       	movw	r4, r16
     e5e:	22 e0       	ldi	r18, 0x02	; 2
     e60:	42 0e       	add	r4, r18
     e62:	51 1c       	adc	r5, r1
     e64:	f8 01       	movw	r30, r16
     e66:	a0 80       	ld	r10, Z
     e68:	b1 80       	ldd	r11, Z+1	; 0x01
     e6a:	36 fe       	sbrs	r3, 6
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <vfprintf+0x174>
     e6e:	69 2d       	mov	r22, r9
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <vfprintf+0x178>
     e74:	6f ef       	ldi	r22, 0xFF	; 255
     e76:	7f ef       	ldi	r23, 0xFF	; 255
     e78:	c5 01       	movw	r24, r10
     e7a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <strnlen_P>
     e7e:	4c 01       	movw	r8, r24
     e80:	f3 2d       	mov	r31, r3
     e82:	f0 68       	ori	r31, 0x80	; 128
     e84:	3f 2e       	mov	r3, r31
     e86:	82 01       	movw	r16, r4
     e88:	33 fc       	sbrc	r3, 3
     e8a:	1b c0       	rjmp	.+54     	; 0xec2 <vfprintf+0x1c2>
     e8c:	82 2d       	mov	r24, r2
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	88 16       	cp	r8, r24
     e92:	99 06       	cpc	r9, r25
     e94:	b0 f4       	brcc	.+44     	; 0xec2 <vfprintf+0x1c2>
     e96:	b6 01       	movw	r22, r12
     e98:	80 e2       	ldi	r24, 0x20	; 32
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
     ea0:	2a 94       	dec	r2
     ea2:	f4 cf       	rjmp	.-24     	; 0xe8c <vfprintf+0x18c>
     ea4:	f5 01       	movw	r30, r10
     ea6:	37 fc       	sbrc	r3, 7
     ea8:	85 91       	lpm	r24, Z+
     eaa:	37 fe       	sbrs	r3, 7
     eac:	81 91       	ld	r24, Z+
     eae:	5f 01       	movw	r10, r30
     eb0:	b6 01       	movw	r22, r12
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
     eb8:	21 10       	cpse	r2, r1
     eba:	2a 94       	dec	r2
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	82 1a       	sub	r8, r18
     ec0:	91 08       	sbc	r9, r1
     ec2:	81 14       	cp	r8, r1
     ec4:	91 04       	cpc	r9, r1
     ec6:	71 f7       	brne	.-36     	; 0xea4 <vfprintf+0x1a4>
     ec8:	e8 c0       	rjmp	.+464    	; 0x109a <vfprintf+0x39a>
     eca:	84 36       	cpi	r24, 0x64	; 100
     ecc:	11 f0       	breq	.+4      	; 0xed2 <vfprintf+0x1d2>
     ece:	89 36       	cpi	r24, 0x69	; 105
     ed0:	41 f5       	brne	.+80     	; 0xf22 <vfprintf+0x222>
     ed2:	f8 01       	movw	r30, r16
     ed4:	37 fe       	sbrs	r3, 7
     ed6:	07 c0       	rjmp	.+14     	; 0xee6 <vfprintf+0x1e6>
     ed8:	60 81       	ld	r22, Z
     eda:	71 81       	ldd	r23, Z+1	; 0x01
     edc:	82 81       	ldd	r24, Z+2	; 0x02
     ede:	93 81       	ldd	r25, Z+3	; 0x03
     ee0:	0c 5f       	subi	r16, 0xFC	; 252
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <vfprintf+0x1f6>
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	07 2e       	mov	r0, r23
     eec:	00 0c       	add	r0, r0
     eee:	88 0b       	sbc	r24, r24
     ef0:	99 0b       	sbc	r25, r25
     ef2:	0e 5f       	subi	r16, 0xFE	; 254
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	f3 2d       	mov	r31, r3
     ef8:	ff 76       	andi	r31, 0x6F	; 111
     efa:	3f 2e       	mov	r3, r31
     efc:	97 ff       	sbrs	r25, 7
     efe:	09 c0       	rjmp	.+18     	; 0xf12 <vfprintf+0x212>
     f00:	90 95       	com	r25
     f02:	80 95       	com	r24
     f04:	70 95       	com	r23
     f06:	61 95       	neg	r22
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	f0 68       	ori	r31, 0x80	; 128
     f10:	3f 2e       	mov	r3, r31
     f12:	2a e0       	ldi	r18, 0x0A	; 10
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	a3 01       	movw	r20, r6
     f18:	0e 94 b3 08 	call	0x1166	; 0x1166 <__ultoa_invert>
     f1c:	88 2e       	mov	r8, r24
     f1e:	86 18       	sub	r8, r6
     f20:	45 c0       	rjmp	.+138    	; 0xfac <vfprintf+0x2ac>
     f22:	85 37       	cpi	r24, 0x75	; 117
     f24:	31 f4       	brne	.+12     	; 0xf32 <vfprintf+0x232>
     f26:	23 2d       	mov	r18, r3
     f28:	2f 7e       	andi	r18, 0xEF	; 239
     f2a:	b2 2e       	mov	r11, r18
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	25 c0       	rjmp	.+74     	; 0xf7c <vfprintf+0x27c>
     f32:	93 2d       	mov	r25, r3
     f34:	99 7f       	andi	r25, 0xF9	; 249
     f36:	b9 2e       	mov	r11, r25
     f38:	8f 36       	cpi	r24, 0x6F	; 111
     f3a:	c1 f0       	breq	.+48     	; 0xf6c <vfprintf+0x26c>
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <vfprintf+0x244>
     f3e:	88 35       	cpi	r24, 0x58	; 88
     f40:	79 f0       	breq	.+30     	; 0xf60 <vfprintf+0x260>
     f42:	b5 c0       	rjmp	.+362    	; 0x10ae <vfprintf+0x3ae>
     f44:	80 37       	cpi	r24, 0x70	; 112
     f46:	19 f0       	breq	.+6      	; 0xf4e <vfprintf+0x24e>
     f48:	88 37       	cpi	r24, 0x78	; 120
     f4a:	21 f0       	breq	.+8      	; 0xf54 <vfprintf+0x254>
     f4c:	b0 c0       	rjmp	.+352    	; 0x10ae <vfprintf+0x3ae>
     f4e:	e9 2f       	mov	r30, r25
     f50:	e0 61       	ori	r30, 0x10	; 16
     f52:	be 2e       	mov	r11, r30
     f54:	b4 fe       	sbrs	r11, 4
     f56:	0d c0       	rjmp	.+26     	; 0xf72 <vfprintf+0x272>
     f58:	fb 2d       	mov	r31, r11
     f5a:	f4 60       	ori	r31, 0x04	; 4
     f5c:	bf 2e       	mov	r11, r31
     f5e:	09 c0       	rjmp	.+18     	; 0xf72 <vfprintf+0x272>
     f60:	34 fe       	sbrs	r3, 4
     f62:	0a c0       	rjmp	.+20     	; 0xf78 <vfprintf+0x278>
     f64:	29 2f       	mov	r18, r25
     f66:	26 60       	ori	r18, 0x06	; 6
     f68:	b2 2e       	mov	r11, r18
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <vfprintf+0x278>
     f6c:	28 e0       	ldi	r18, 0x08	; 8
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <vfprintf+0x27c>
     f72:	20 e1       	ldi	r18, 0x10	; 16
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <vfprintf+0x27c>
     f78:	20 e1       	ldi	r18, 0x10	; 16
     f7a:	32 e0       	ldi	r19, 0x02	; 2
     f7c:	f8 01       	movw	r30, r16
     f7e:	b7 fe       	sbrs	r11, 7
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <vfprintf+0x290>
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	0c 5f       	subi	r16, 0xFC	; 252
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <vfprintf+0x29c>
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 5f       	subi	r16, 0xFE	; 254
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	a3 01       	movw	r20, r6
     f9e:	0e 94 b3 08 	call	0x1166	; 0x1166 <__ultoa_invert>
     fa2:	88 2e       	mov	r8, r24
     fa4:	86 18       	sub	r8, r6
     fa6:	fb 2d       	mov	r31, r11
     fa8:	ff 77       	andi	r31, 0x7F	; 127
     faa:	3f 2e       	mov	r3, r31
     fac:	36 fe       	sbrs	r3, 6
     fae:	0d c0       	rjmp	.+26     	; 0xfca <vfprintf+0x2ca>
     fb0:	23 2d       	mov	r18, r3
     fb2:	2e 7f       	andi	r18, 0xFE	; 254
     fb4:	a2 2e       	mov	r10, r18
     fb6:	89 14       	cp	r8, r9
     fb8:	58 f4       	brcc	.+22     	; 0xfd0 <vfprintf+0x2d0>
     fba:	34 fe       	sbrs	r3, 4
     fbc:	0b c0       	rjmp	.+22     	; 0xfd4 <vfprintf+0x2d4>
     fbe:	32 fc       	sbrc	r3, 2
     fc0:	09 c0       	rjmp	.+18     	; 0xfd4 <vfprintf+0x2d4>
     fc2:	83 2d       	mov	r24, r3
     fc4:	8e 7e       	andi	r24, 0xEE	; 238
     fc6:	a8 2e       	mov	r10, r24
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <vfprintf+0x2d4>
     fca:	b8 2c       	mov	r11, r8
     fcc:	a3 2c       	mov	r10, r3
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <vfprintf+0x2d6>
     fd0:	b8 2c       	mov	r11, r8
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <vfprintf+0x2d6>
     fd4:	b9 2c       	mov	r11, r9
     fd6:	a4 fe       	sbrs	r10, 4
     fd8:	0f c0       	rjmp	.+30     	; 0xff8 <vfprintf+0x2f8>
     fda:	fe 01       	movw	r30, r28
     fdc:	e8 0d       	add	r30, r8
     fde:	f1 1d       	adc	r31, r1
     fe0:	80 81       	ld	r24, Z
     fe2:	80 33       	cpi	r24, 0x30	; 48
     fe4:	21 f4       	brne	.+8      	; 0xfee <vfprintf+0x2ee>
     fe6:	9a 2d       	mov	r25, r10
     fe8:	99 7e       	andi	r25, 0xE9	; 233
     fea:	a9 2e       	mov	r10, r25
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <vfprintf+0x300>
     fee:	a2 fe       	sbrs	r10, 2
     ff0:	06 c0       	rjmp	.+12     	; 0xffe <vfprintf+0x2fe>
     ff2:	b3 94       	inc	r11
     ff4:	b3 94       	inc	r11
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <vfprintf+0x300>
     ff8:	8a 2d       	mov	r24, r10
     ffa:	86 78       	andi	r24, 0x86	; 134
     ffc:	09 f0       	breq	.+2      	; 0x1000 <vfprintf+0x300>
     ffe:	b3 94       	inc	r11
    1000:	a3 fc       	sbrc	r10, 3
    1002:	11 c0       	rjmp	.+34     	; 0x1026 <vfprintf+0x326>
    1004:	a0 fe       	sbrs	r10, 0
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <vfprintf+0x314>
    1008:	b2 14       	cp	r11, r2
    100a:	88 f4       	brcc	.+34     	; 0x102e <vfprintf+0x32e>
    100c:	28 0c       	add	r2, r8
    100e:	92 2c       	mov	r9, r2
    1010:	9b 18       	sub	r9, r11
    1012:	0e c0       	rjmp	.+28     	; 0x1030 <vfprintf+0x330>
    1014:	b2 14       	cp	r11, r2
    1016:	60 f4       	brcc	.+24     	; 0x1030 <vfprintf+0x330>
    1018:	b6 01       	movw	r22, r12
    101a:	80 e2       	ldi	r24, 0x20	; 32
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
    1022:	b3 94       	inc	r11
    1024:	f7 cf       	rjmp	.-18     	; 0x1014 <vfprintf+0x314>
    1026:	b2 14       	cp	r11, r2
    1028:	18 f4       	brcc	.+6      	; 0x1030 <vfprintf+0x330>
    102a:	2b 18       	sub	r2, r11
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <vfprintf+0x332>
    102e:	98 2c       	mov	r9, r8
    1030:	21 2c       	mov	r2, r1
    1032:	a4 fe       	sbrs	r10, 4
    1034:	10 c0       	rjmp	.+32     	; 0x1056 <vfprintf+0x356>
    1036:	b6 01       	movw	r22, r12
    1038:	80 e3       	ldi	r24, 0x30	; 48
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
    1040:	a2 fe       	sbrs	r10, 2
    1042:	17 c0       	rjmp	.+46     	; 0x1072 <vfprintf+0x372>
    1044:	a1 fc       	sbrc	r10, 1
    1046:	03 c0       	rjmp	.+6      	; 0x104e <vfprintf+0x34e>
    1048:	88 e7       	ldi	r24, 0x78	; 120
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <vfprintf+0x352>
    104e:	88 e5       	ldi	r24, 0x58	; 88
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	b6 01       	movw	r22, r12
    1054:	0c c0       	rjmp	.+24     	; 0x106e <vfprintf+0x36e>
    1056:	8a 2d       	mov	r24, r10
    1058:	86 78       	andi	r24, 0x86	; 134
    105a:	59 f0       	breq	.+22     	; 0x1072 <vfprintf+0x372>
    105c:	a1 fe       	sbrs	r10, 1
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <vfprintf+0x364>
    1060:	8b e2       	ldi	r24, 0x2B	; 43
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <vfprintf+0x366>
    1064:	80 e2       	ldi	r24, 0x20	; 32
    1066:	a7 fc       	sbrc	r10, 7
    1068:	8d e2       	ldi	r24, 0x2D	; 45
    106a:	b6 01       	movw	r22, r12
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
    1072:	89 14       	cp	r8, r9
    1074:	38 f4       	brcc	.+14     	; 0x1084 <vfprintf+0x384>
    1076:	b6 01       	movw	r22, r12
    1078:	80 e3       	ldi	r24, 0x30	; 48
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
    1080:	9a 94       	dec	r9
    1082:	f7 cf       	rjmp	.-18     	; 0x1072 <vfprintf+0x372>
    1084:	8a 94       	dec	r8
    1086:	f3 01       	movw	r30, r6
    1088:	e8 0d       	add	r30, r8
    108a:	f1 1d       	adc	r31, r1
    108c:	80 81       	ld	r24, Z
    108e:	b6 01       	movw	r22, r12
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
    1096:	81 10       	cpse	r8, r1
    1098:	f5 cf       	rjmp	.-22     	; 0x1084 <vfprintf+0x384>
    109a:	22 20       	and	r2, r2
    109c:	09 f4       	brne	.+2      	; 0x10a0 <vfprintf+0x3a0>
    109e:	42 ce       	rjmp	.-892    	; 0xd24 <vfprintf+0x24>
    10a0:	b6 01       	movw	r22, r12
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 77 08 	call	0x10ee	; 0x10ee <fputc>
    10aa:	2a 94       	dec	r2
    10ac:	f6 cf       	rjmp	.-20     	; 0x109a <vfprintf+0x39a>
    10ae:	f6 01       	movw	r30, r12
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	97 81       	ldd	r25, Z+7	; 0x07
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <vfprintf+0x3ba>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
    10ba:	2b 96       	adiw	r28, 0x0b	; 11
    10bc:	e2 e1       	ldi	r30, 0x12	; 18
    10be:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__epilogue_restores__>

000010c2 <strnlen_P>:
    10c2:	fc 01       	movw	r30, r24
    10c4:	05 90       	lpm	r0, Z+
    10c6:	61 50       	subi	r22, 0x01	; 1
    10c8:	70 40       	sbci	r23, 0x00	; 0
    10ca:	01 10       	cpse	r0, r1
    10cc:	d8 f7       	brcc	.-10     	; 0x10c4 <strnlen_P+0x2>
    10ce:	80 95       	com	r24
    10d0:	90 95       	com	r25
    10d2:	8e 0f       	add	r24, r30
    10d4:	9f 1f       	adc	r25, r31
    10d6:	08 95       	ret

000010d8 <strnlen>:
    10d8:	fc 01       	movw	r30, r24
    10da:	61 50       	subi	r22, 0x01	; 1
    10dc:	70 40       	sbci	r23, 0x00	; 0
    10de:	01 90       	ld	r0, Z+
    10e0:	01 10       	cpse	r0, r1
    10e2:	d8 f7       	brcc	.-10     	; 0x10da <strnlen+0x2>
    10e4:	80 95       	com	r24
    10e6:	90 95       	com	r25
    10e8:	8e 0f       	add	r24, r30
    10ea:	9f 1f       	adc	r25, r31
    10ec:	08 95       	ret

000010ee <fputc>:
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	fb 01       	movw	r30, r22
    10f8:	23 81       	ldd	r18, Z+3	; 0x03
    10fa:	21 fd       	sbrc	r18, 1
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <fputc+0x16>
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	2c c0       	rjmp	.+88     	; 0x115c <fputc+0x6e>
    1104:	22 ff       	sbrs	r18, 2
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <fputc+0x46>
    1108:	46 81       	ldd	r20, Z+6	; 0x06
    110a:	57 81       	ldd	r21, Z+7	; 0x07
    110c:	24 81       	ldd	r18, Z+4	; 0x04
    110e:	35 81       	ldd	r19, Z+5	; 0x05
    1110:	42 17       	cp	r20, r18
    1112:	53 07       	cpc	r21, r19
    1114:	44 f4       	brge	.+16     	; 0x1126 <fputc+0x38>
    1116:	a0 81       	ld	r26, Z
    1118:	b1 81       	ldd	r27, Z+1	; 0x01
    111a:	9d 01       	movw	r18, r26
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	31 83       	std	Z+1, r19	; 0x01
    1122:	20 83       	st	Z, r18
    1124:	8c 93       	st	X, r24
    1126:	26 81       	ldd	r18, Z+6	; 0x06
    1128:	37 81       	ldd	r19, Z+7	; 0x07
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	37 83       	std	Z+7, r19	; 0x07
    1130:	26 83       	std	Z+6, r18	; 0x06
    1132:	14 c0       	rjmp	.+40     	; 0x115c <fputc+0x6e>
    1134:	8b 01       	movw	r16, r22
    1136:	ec 01       	movw	r28, r24
    1138:	fb 01       	movw	r30, r22
    113a:	00 84       	ldd	r0, Z+8	; 0x08
    113c:	f1 85       	ldd	r31, Z+9	; 0x09
    113e:	e0 2d       	mov	r30, r0
    1140:	09 95       	icall
    1142:	89 2b       	or	r24, r25
    1144:	e1 f6       	brne	.-72     	; 0x10fe <fputc+0x10>
    1146:	d8 01       	movw	r26, r16
    1148:	16 96       	adiw	r26, 0x06	; 6
    114a:	8d 91       	ld	r24, X+
    114c:	9c 91       	ld	r25, X
    114e:	17 97       	sbiw	r26, 0x07	; 7
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	17 96       	adiw	r26, 0x07	; 7
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	16 97       	sbiw	r26, 0x06	; 6
    115a:	ce 01       	movw	r24, r28
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <__ultoa_invert>:
    1166:	fa 01       	movw	r30, r20
    1168:	aa 27       	eor	r26, r26
    116a:	28 30       	cpi	r18, 0x08	; 8
    116c:	51 f1       	breq	.+84     	; 0x11c2 <__ultoa_invert+0x5c>
    116e:	20 31       	cpi	r18, 0x10	; 16
    1170:	81 f1       	breq	.+96     	; 0x11d2 <__ultoa_invert+0x6c>
    1172:	e8 94       	clt
    1174:	6f 93       	push	r22
    1176:	6e 7f       	andi	r22, 0xFE	; 254
    1178:	6e 5f       	subi	r22, 0xFE	; 254
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	af 4f       	sbci	r26, 0xFF	; 255
    1182:	b1 e0       	ldi	r27, 0x01	; 1
    1184:	3e d0       	rcall	.+124    	; 0x1202 <__ultoa_invert+0x9c>
    1186:	b4 e0       	ldi	r27, 0x04	; 4
    1188:	3c d0       	rcall	.+120    	; 0x1202 <__ultoa_invert+0x9c>
    118a:	67 0f       	add	r22, r23
    118c:	78 1f       	adc	r23, r24
    118e:	89 1f       	adc	r24, r25
    1190:	9a 1f       	adc	r25, r26
    1192:	a1 1d       	adc	r26, r1
    1194:	68 0f       	add	r22, r24
    1196:	79 1f       	adc	r23, r25
    1198:	8a 1f       	adc	r24, r26
    119a:	91 1d       	adc	r25, r1
    119c:	a1 1d       	adc	r26, r1
    119e:	6a 0f       	add	r22, r26
    11a0:	71 1d       	adc	r23, r1
    11a2:	81 1d       	adc	r24, r1
    11a4:	91 1d       	adc	r25, r1
    11a6:	a1 1d       	adc	r26, r1
    11a8:	20 d0       	rcall	.+64     	; 0x11ea <__ultoa_invert+0x84>
    11aa:	09 f4       	brne	.+2      	; 0x11ae <__ultoa_invert+0x48>
    11ac:	68 94       	set
    11ae:	3f 91       	pop	r19
    11b0:	2a e0       	ldi	r18, 0x0A	; 10
    11b2:	26 9f       	mul	r18, r22
    11b4:	11 24       	eor	r1, r1
    11b6:	30 19       	sub	r19, r0
    11b8:	30 5d       	subi	r19, 0xD0	; 208
    11ba:	31 93       	st	Z+, r19
    11bc:	de f6       	brtc	.-74     	; 0x1174 <__ultoa_invert+0xe>
    11be:	cf 01       	movw	r24, r30
    11c0:	08 95       	ret
    11c2:	46 2f       	mov	r20, r22
    11c4:	47 70       	andi	r20, 0x07	; 7
    11c6:	40 5d       	subi	r20, 0xD0	; 208
    11c8:	41 93       	st	Z+, r20
    11ca:	b3 e0       	ldi	r27, 0x03	; 3
    11cc:	0f d0       	rcall	.+30     	; 0x11ec <__ultoa_invert+0x86>
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <__ultoa_invert+0x5c>
    11d0:	f6 cf       	rjmp	.-20     	; 0x11be <__ultoa_invert+0x58>
    11d2:	46 2f       	mov	r20, r22
    11d4:	4f 70       	andi	r20, 0x0F	; 15
    11d6:	40 5d       	subi	r20, 0xD0	; 208
    11d8:	4a 33       	cpi	r20, 0x3A	; 58
    11da:	18 f0       	brcs	.+6      	; 0x11e2 <__ultoa_invert+0x7c>
    11dc:	49 5d       	subi	r20, 0xD9	; 217
    11de:	31 fd       	sbrc	r19, 1
    11e0:	40 52       	subi	r20, 0x20	; 32
    11e2:	41 93       	st	Z+, r20
    11e4:	02 d0       	rcall	.+4      	; 0x11ea <__ultoa_invert+0x84>
    11e6:	a9 f7       	brne	.-22     	; 0x11d2 <__ultoa_invert+0x6c>
    11e8:	ea cf       	rjmp	.-44     	; 0x11be <__ultoa_invert+0x58>
    11ea:	b4 e0       	ldi	r27, 0x04	; 4
    11ec:	a6 95       	lsr	r26
    11ee:	97 95       	ror	r25
    11f0:	87 95       	ror	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	ba 95       	dec	r27
    11f8:	c9 f7       	brne	.-14     	; 0x11ec <__ultoa_invert+0x86>
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	61 05       	cpc	r22, r1
    11fe:	71 05       	cpc	r23, r1
    1200:	08 95       	ret
    1202:	9b 01       	movw	r18, r22
    1204:	ac 01       	movw	r20, r24
    1206:	0a 2e       	mov	r0, r26
    1208:	06 94       	lsr	r0
    120a:	57 95       	ror	r21
    120c:	47 95       	ror	r20
    120e:	37 95       	ror	r19
    1210:	27 95       	ror	r18
    1212:	ba 95       	dec	r27
    1214:	c9 f7       	brne	.-14     	; 0x1208 <__ultoa_invert+0xa2>
    1216:	62 0f       	add	r22, r18
    1218:	73 1f       	adc	r23, r19
    121a:	84 1f       	adc	r24, r20
    121c:	95 1f       	adc	r25, r21
    121e:	a0 1d       	adc	r26, r0
    1220:	08 95       	ret

00001222 <__prologue_saves__>:
    1222:	2f 92       	push	r2
    1224:	3f 92       	push	r3
    1226:	4f 92       	push	r4
    1228:	5f 92       	push	r5
    122a:	6f 92       	push	r6
    122c:	7f 92       	push	r7
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	ca 1b       	sub	r28, r26
    124c:	db 0b       	sbc	r29, r27
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	09 94       	ijmp

0000125a <__epilogue_restores__>:
    125a:	2a 88       	ldd	r2, Y+18	; 0x12
    125c:	39 88       	ldd	r3, Y+17	; 0x11
    125e:	48 88       	ldd	r4, Y+16	; 0x10
    1260:	5f 84       	ldd	r5, Y+15	; 0x0f
    1262:	6e 84       	ldd	r6, Y+14	; 0x0e
    1264:	7d 84       	ldd	r7, Y+13	; 0x0d
    1266:	8c 84       	ldd	r8, Y+12	; 0x0c
    1268:	9b 84       	ldd	r9, Y+11	; 0x0b
    126a:	aa 84       	ldd	r10, Y+10	; 0x0a
    126c:	b9 84       	ldd	r11, Y+9	; 0x09
    126e:	c8 84       	ldd	r12, Y+8	; 0x08
    1270:	df 80       	ldd	r13, Y+7	; 0x07
    1272:	ee 80       	ldd	r14, Y+6	; 0x06
    1274:	fd 80       	ldd	r15, Y+5	; 0x05
    1276:	0c 81       	ldd	r16, Y+4	; 0x04
    1278:	1b 81       	ldd	r17, Y+3	; 0x03
    127a:	aa 81       	ldd	r26, Y+2	; 0x02
    127c:	b9 81       	ldd	r27, Y+1	; 0x01
    127e:	ce 0f       	add	r28, r30
    1280:	d1 1d       	adc	r29, r1
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	ed 01       	movw	r28, r26
    128e:	08 95       	ret

00001290 <_exit>:
    1290:	f8 94       	cli

00001292 <__stop_program>:
    1292:	ff cf       	rjmp	.-2      	; 0x1292 <__stop_program>
