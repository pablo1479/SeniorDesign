
SquareTone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000170c  000017a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000170c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800150  00800150  000017f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000293b  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d43  00000000  00000000  00004367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001071  00000000  00000000  000050aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  0000611c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e0  00000000  00000000  00006570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001427  00000000  00000000  00006e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008277  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__vector_5>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__vector_11>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ec e0       	ldi	r30, 0x0C	; 12
      c8:	f7 e1       	ldi	r31, 0x17	; 23
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a0 35       	cpi	r26, 0x50	; 80
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a0 e5       	ldi	r26, 0x50	; 80
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a6 35       	cpi	r26, 0x56	; 86
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
      ea:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_master_init>:
	data[(length-1)] = i2c_master_readNack();
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
      f2:	9b 01       	movw	r18, r22
      f4:	ac 01       	movw	r20, r24
      f6:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	74 e2       	ldi	r23, 0x24	; 36
      fe:	84 ef       	ldi	r24, 0xF4	; 244
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__udivmodsi4>
     106:	da 01       	movw	r26, r20
     108:	c9 01       	movw	r24, r18
     10a:	40 97       	sbiw	r24, 0x10	; 16
     10c:	a1 09       	sbc	r26, r1
     10e:	b1 09       	sbc	r27, r1
     110:	b6 95       	lsr	r27
     112:	a7 95       	ror	r26
     114:	97 95       	ror	r25
     116:	87 95       	ror	r24
     118:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     11c:	08 95       	ret

0000011e <i2c_master_start>:
     11e:	ec ed       	ldi	r30, 0xDC	; 220
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	10 82       	st	Z, r1
     124:	94 ea       	ldi	r25, 0xA4	; 164
     126:	90 83       	st	Z, r25
     128:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     12c:	99 23       	and	r25, r25
     12e:	e4 f7       	brge	.-8      	; 0x128 <i2c_master_start+0xa>
     130:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     134:	98 7f       	andi	r25, 0xF8	; 248
     136:	98 30       	cpi	r25, 0x08	; 8
     138:	11 f0       	breq	.+4      	; 0x13e <i2c_master_start+0x20>
     13a:	90 31       	cpi	r25, 0x10	; 16
     13c:	b1 f4       	brne	.+44     	; 0x16a <i2c_master_start+0x4c>
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	86 2b       	or	r24, r22
     146:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     14a:	84 e8       	ldi	r24, 0x84	; 132
     14c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     150:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     154:	88 23       	and	r24, r24
     156:	e4 f7       	brge	.-8      	; 0x150 <i2c_master_start+0x32>
     158:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     15c:	88 7f       	andi	r24, 0xF8	; 248
     15e:	88 31       	cpi	r24, 0x18	; 24
     160:	31 f0       	breq	.+12     	; 0x16e <i2c_master_start+0x50>
     162:	80 34       	cpi	r24, 0x40	; 64
     164:	31 f4       	brne	.+12     	; 0x172 <i2c_master_start+0x54>
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	08 95       	ret
     16a:	8a e0       	ldi	r24, 0x0A	; 10
     16c:	08 95       	ret
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	08 95       	ret
     172:	84 e1       	ldi	r24, 0x14	; 20
     174:	08 95       	ret

00000176 <i2c_master_write>:
     176:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     17a:	84 e8       	ldi	r24, 0x84	; 132
     17c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     180:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     184:	88 23       	and	r24, r24
     186:	e4 f7       	brge	.-8      	; 0x180 <i2c_master_write+0xa>
     188:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     18c:	88 7f       	andi	r24, 0xF8	; 248
     18e:	88 32       	cpi	r24, 0x28	; 40
     190:	11 f0       	breq	.+4      	; 0x196 <i2c_master_write+0x20>
     192:	85 e1       	ldi	r24, 0x15	; 21
     194:	08 95       	ret
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	08 95       	ret

0000019a <i2c_master_stop>:
     19a:	84 e9       	ldi	r24, 0x94	; 148
     19c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     1a0:	08 95       	ret

000001a2 <i2c_master_sendByte>:
     1a2:	cf 93       	push	r28
     1a4:	c6 2f       	mov	r28, r22
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_master_start>
     1ac:	81 11       	cpse	r24, r1
     1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <i2c_master_sendByte+0x1e>
     1b0:	8c 2f       	mov	r24, r28
     1b2:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_master_write>
     1b6:	81 11       	cpse	r24, r1
     1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <i2c_master_sendByte+0x1e>
     1ba:	0e 94 cd 00 	call	0x19a	; 0x19a <i2c_master_stop>
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <I2C_Init>:

//																	DAC FUNCTIONS

void I2C_Init(void) {
	// Set the bit rate for 400 kHz I2C
	TWSR0 = 0x00;  // Prescaler set to 1
     1c4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR0 = ((F_CPU / SCL_CLOCK) - 16) / 2;  // Set bit rate register for 400kHz
     1c8:	8c e0       	ldi	r24, 0x0C	; 12
     1ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     1ce:	08 95       	ret

000001d0 <I2C_Start>:
}

void I2C_Start(void) {
	TWCR0 = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);  // Send start condition
     1d0:	84 ea       	ldi	r24, 0xA4	; 164
     1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));  // Wait for transmission to complete
     1d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1da:	88 23       	and	r24, r24
     1dc:	e4 f7       	brge	.-8      	; 0x1d6 <I2C_Start+0x6>
}
     1de:	08 95       	ret

000001e0 <I2C_Stop>:

// I2C Stop condition
void I2C_Stop(void) {
	TWCR0 = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);  // Send stop condition
     1e0:	84 e9       	ldi	r24, 0x94	; 148
     1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1e6:	08 95       	ret

000001e8 <I2C_Write>:
}

// I2C Write byte
void I2C_Write(uint8_t data) {
	TWDR0 = data;  // Load data to data register
     1e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWINT) | (1<<TWEN);  // Start transmission
     1ec:	84 e8       	ldi	r24, 0x84	; 132
     1ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
     1f2:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     1f6:	88 23       	and	r24, r24
     1f8:	e4 f7       	brge	.-8      	; 0x1f2 <I2C_Write+0xa>
}
     1fa:	08 95       	ret

000001fc <MCP4725_SetValue>:

void MCP4725_SetValue(uint16_t value) {
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	c8 2f       	mov	r28, r24
     202:	d9 2f       	mov	r29, r25
	I2C_Start();
     204:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Start>
	I2C_Write(MCP4725_ADDR << 1);  // Write address with write bit (0)
     208:	84 ec       	ldi	r24, 0xC4	; 196
     20a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_Write>
	I2C_Write((value >> 8) & 0x0F);  // Send upper data bits (D11-D8)
     20e:	8d 2f       	mov	r24, r29
     210:	8f 70       	andi	r24, 0x0F	; 15
     212:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_Write>
	I2C_Write(value & 0xFF);  // Send lower data bits (D7-D0)
     216:	8c 2f       	mov	r24, r28
     218:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_Write>
	I2C_Stop();
     21c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Stop>
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
     226:	fc 01       	movw	r30, r24
     228:	23 81       	ldd	r18, Z+3	; 0x03
     22a:	62 2b       	or	r22, r18
     22c:	80 81       	ld	r24, Z
     22e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <i2c_master_sendByte>
     232:	08 95       	ret

00000234 <lq_turnOnBacklight>:
     234:	28 e0       	ldi	r18, 0x08	; 8
     236:	fc 01       	movw	r30, r24
     238:	23 83       	std	Z+3, r18	; 0x03
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	0e 94 13 01 	call	0x226	; 0x226 <lq_transmitI2C>
     240:	08 95       	ret

00000242 <lq_writeDevicePulse>:
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	8c 01       	movw	r16, r24
     24a:	c6 2f       	mov	r28, r22
     24c:	64 60       	ori	r22, 0x04	; 4
     24e:	0e 94 13 01 	call	0x226	; 0x226 <lq_transmitI2C>
     252:	8a e0       	ldi	r24, 0x0A	; 10
     254:	8a 95       	dec	r24
     256:	f1 f7       	brne	.-4      	; 0x254 <lq_writeDevicePulse+0x12>
     258:	00 c0       	rjmp	.+0      	; 0x25a <lq_writeDevicePulse+0x18>
     25a:	6c 2f       	mov	r22, r28
     25c:	6b 7f       	andi	r22, 0xFB	; 251
     25e:	c8 01       	movw	r24, r16
     260:	0e 94 13 01 	call	0x226	; 0x226 <lq_transmitI2C>
     264:	87 ec       	ldi	r24, 0xC7	; 199
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lq_writeDevicePulse+0x26>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lq_writeDevicePulse+0x2c>
     26e:	00 00       	nop
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	08 95       	ret

00000278 <lq_writeDevice4Bits>:
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	ec 01       	movw	r28, r24
     280:	16 2f       	mov	r17, r22
     282:	0e 94 13 01 	call	0x226	; 0x226 <lq_transmitI2C>
     286:	61 2f       	mov	r22, r17
     288:	ce 01       	movw	r24, r28
     28a:	0e 94 21 01 	call	0x242	; 0x242 <lq_writeDevicePulse>
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	08 95       	ret

00000296 <lq_writeDeviceByte>:
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	8c 01       	movw	r16, r24
     2a2:	f4 2e       	mov	r15, r20
     2a4:	86 2f       	mov	r24, r22
     2a6:	80 7f       	andi	r24, 0xF0	; 240
     2a8:	90 e1       	ldi	r25, 0x10	; 16
     2aa:	69 9f       	mul	r22, r25
     2ac:	e0 01       	movw	r28, r0
     2ae:	11 24       	eor	r1, r1
     2b0:	68 2f       	mov	r22, r24
     2b2:	64 2b       	or	r22, r20
     2b4:	c8 01       	movw	r24, r16
     2b6:	0e 94 3c 01 	call	0x278	; 0x278 <lq_writeDevice4Bits>
     2ba:	6c 2f       	mov	r22, r28
     2bc:	6f 29       	or	r22, r15
     2be:	c8 01       	movw	r24, r16
     2c0:	0e 94 3c 01 	call	0x278	; 0x278 <lq_writeDevice4Bits>
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	08 95       	ret

000002d0 <lq_print>:
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	8c 01       	movw	r16, r24
     2da:	eb 01       	movw	r28, r22
     2dc:	68 81       	ld	r22, Y
     2de:	06 c0       	rjmp	.+12     	; 0x2ec <lq_print+0x1c>
     2e0:	41 e0       	ldi	r20, 0x01	; 1
     2e2:	c8 01       	movw	r24, r16
     2e4:	0e 94 4b 01 	call	0x296	; 0x296 <lq_writeDeviceByte>
     2e8:	21 96       	adiw	r28, 0x01	; 1
     2ea:	68 81       	ld	r22, Y
     2ec:	61 11       	cpse	r22, r1
     2ee:	f8 cf       	rjmp	.-16     	; 0x2e0 <lq_print+0x10>
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	08 95       	ret

000002fa <lq_sendCommand>:
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	0e 94 4b 01 	call	0x296	; 0x296 <lq_writeDeviceByte>
     300:	08 95       	ret

00000302 <lq_setCursor>:
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	00 d0       	rcall	.+0      	; 0x308 <lq_setCursor+0x6>
     308:	00 d0       	rcall	.+0      	; 0x30a <lq_setCursor+0x8>
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	19 82       	std	Y+1, r1	; 0x01
     310:	20 e4       	ldi	r18, 0x40	; 64
     312:	2a 83       	std	Y+2, r18	; 0x02
     314:	24 e1       	ldi	r18, 0x14	; 20
     316:	2b 83       	std	Y+3, r18	; 0x03
     318:	24 e5       	ldi	r18, 0x54	; 84
     31a:	2c 83       	std	Y+4, r18	; 0x04
     31c:	e1 e0       	ldi	r30, 0x01	; 1
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	ec 0f       	add	r30, r28
     322:	fd 1f       	adc	r31, r29
     324:	e6 0f       	add	r30, r22
     326:	f1 1d       	adc	r31, r1
     328:	60 81       	ld	r22, Z
     32a:	64 0f       	add	r22, r20
     32c:	60 68       	ori	r22, 0x80	; 128
     32e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lq_sendCommand>
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <lq_clear>:
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	ec 01       	movw	r28, r24
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lq_sendCommand>
     34c:	8f e3       	ldi	r24, 0x3F	; 63
     34e:	9f e1       	ldi	r25, 0x1F	; 31
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <lq_clear+0x10>
     354:	00 c0       	rjmp	.+0      	; 0x356 <lq_clear+0x16>
     356:	00 00       	nop
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	ce 01       	movw	r24, r28
     35e:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <lq_returnHome>:
     368:	62 e0       	ldi	r22, 0x02	; 2
     36a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lq_sendCommand>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lq_returnHome+0xa>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lq_returnHome+0x10>
     378:	00 00       	nop
     37a:	08 95       	ret

0000037c <lq_turnOnDisplay>:
     37c:	fc 01       	movw	r30, r24
     37e:	65 81       	ldd	r22, Z+5	; 0x05
     380:	26 2f       	mov	r18, r22
     382:	24 60       	ori	r18, 0x04	; 4
     384:	25 83       	std	Z+5, r18	; 0x05
     386:	6c 60       	ori	r22, 0x0C	; 12
     388:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lq_sendCommand>
     38c:	08 95       	ret

0000038e <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	2e 97       	sbiw	r28, 0x0e	; 14
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
     3a2:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
     3a4:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
     3a6:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
     3a8:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
     3aa:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     3ac:	84 e0       	ldi	r24, 0x04	; 4
     3ae:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
     3b4:	42 30       	cpi	r20, 0x02	; 2
     3b6:	18 f0       	brcs	.+6      	; 0x3be <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
     3b8:	82 2f       	mov	r24, r18
     3ba:	88 60       	ori	r24, 0x08	; 8
     3bc:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
     3be:	22 23       	and	r18, r18
     3c0:	29 f0       	breq	.+10     	; 0x3cc <lq_init+0x3e>
     3c2:	41 30       	cpi	r20, 0x01	; 1
     3c4:	19 f4       	brne	.+6      	; 0x3cc <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
     3c6:	8c 85       	ldd	r24, Y+12	; 0x0c
     3c8:	84 60       	ori	r24, 0x04	; 4
     3ca:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3cc:	2f ef       	ldi	r18, 0xFF	; 255
     3ce:	81 ee       	ldi	r24, 0xE1	; 225
     3d0:	94 e0       	ldi	r25, 0x04	; 4
     3d2:	21 50       	subi	r18, 0x01	; 1
     3d4:	80 40       	sbci	r24, 0x00	; 0
     3d6:	90 40       	sbci	r25, 0x00	; 0
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <lq_init+0x44>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <lq_init+0x4e>
     3dc:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	ce 01       	movw	r24, r28
     3e2:	08 96       	adiw	r24, 0x08	; 8
     3e4:	0e 94 13 01 	call	0x226	; 0x226 <lq_transmitI2C>
     3e8:	2f ef       	ldi	r18, 0xFF	; 255
     3ea:	83 ed       	ldi	r24, 0xD3	; 211
     3ec:	90 e3       	ldi	r25, 0x30	; 48
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	80 40       	sbci	r24, 0x00	; 0
     3f2:	90 40       	sbci	r25, 0x00	; 0
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <lq_init+0x60>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <lq_init+0x6a>
     3f8:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
     3fa:	60 e3       	ldi	r22, 0x30	; 48
     3fc:	ce 01       	movw	r24, r28
     3fe:	08 96       	adiw	r24, 0x08	; 8
     400:	0e 94 13 01 	call	0x226	; 0x226 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     404:	8f e4       	ldi	r24, 0x4F	; 79
     406:	96 e4       	ldi	r25, 0x46	; 70
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
     410:	60 e3       	ldi	r22, 0x30	; 48
     412:	ce 01       	movw	r24, r28
     414:	08 96       	adiw	r24, 0x08	; 8
     416:	0e 94 3c 01 	call	0x278	; 0x278 <lq_writeDevice4Bits>
     41a:	8f e4       	ldi	r24, 0x4F	; 79
     41c:	96 e4       	ldi	r25, 0x46	; 70
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     424:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
     426:	60 e3       	ldi	r22, 0x30	; 48
     428:	ce 01       	movw	r24, r28
     42a:	08 96       	adiw	r24, 0x08	; 8
     42c:	0e 94 3c 01 	call	0x278	; 0x278 <lq_writeDevice4Bits>
     430:	87 e5       	ldi	r24, 0x57	; 87
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     43a:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
     43c:	60 e2       	ldi	r22, 0x20	; 32
     43e:	ce 01       	movw	r24, r28
     440:	08 96       	adiw	r24, 0x08	; 8
     442:	0e 94 3c 01 	call	0x278	; 0x278 <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
     446:	6c 85       	ldd	r22, Y+12	; 0x0c
     448:	60 62       	ori	r22, 0x20	; 32
     44a:	ce 01       	movw	r24, r28
     44c:	08 96       	adiw	r24, 0x08	; 8
     44e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
     452:	ce 01       	movw	r24, r28
     454:	08 96       	adiw	r24, 0x08	; 8
     456:	0e 94 be 01 	call	0x37c	; 0x37c <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
     45a:	ce 01       	movw	r24, r28
     45c:	08 96       	adiw	r24, 0x08	; 8
     45e:	0e 94 a0 01 	call	0x340	; 0x340 <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
     462:	6e 85       	ldd	r22, Y+14	; 0x0e
     464:	64 60       	ori	r22, 0x04	; 4
     466:	ce 01       	movw	r24, r28
     468:	08 96       	adiw	r24, 0x08	; 8
     46a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lq_sendCommand>
	
	lq_returnHome(&device);
     46e:	ce 01       	movw	r24, r28
     470:	08 96       	adiw	r24, 0x08	; 8
     472:	0e 94 b4 01 	call	0x368	; 0x368 <lq_returnHome>

	return device;
     476:	87 e0       	ldi	r24, 0x07	; 7
     478:	fe 01       	movw	r30, r28
     47a:	38 96       	adiw	r30, 0x08	; 8
     47c:	de 01       	movw	r26, r28
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	01 90       	ld	r0, Z+
     482:	0d 92       	st	X+, r0
     484:	8a 95       	dec	r24
     486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     488:	29 81       	ldd	r18, Y+1	; 0x01
     48a:	3a 81       	ldd	r19, Y+2	; 0x02
     48c:	4b 81       	ldd	r20, Y+3	; 0x03
     48e:	5c 81       	ldd	r21, Y+4	; 0x04
     490:	6d 81       	ldd	r22, Y+5	; 0x05
     492:	7e 81       	ldd	r23, Y+6	; 0x06
};
     494:	8f 81       	ldd	r24, Y+7	; 0x07
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	2e 96       	adiw	r28, 0x0e	; 14
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <main>:
volatile uint8_t dac_state = 0;

uint8_t vol_num = 50;
volatile uint16_t vol_sq;
int main(void)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	a4 97       	sbiw	r28, 0x24	; 36
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRD &= (1<<select);		//select button
     4be:	8a b1       	in	r24, 0x0a	; 10
     4c0:	84 70       	andi	r24, 0x04	; 4
     4c2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= (1<<up);		//up button
     4c4:	8a b1       	in	r24, 0x0a	; 10
     4c6:	80 71       	andi	r24, 0x10	; 16
     4c8:	8a b9       	out	0x0a, r24	; 10
	DDRD &= (1<<down);		//down button
     4ca:	8a b1       	in	r24, 0x0a	; 10
     4cc:	80 78       	andi	r24, 0x80	; 128
     4ce:	8a b9       	out	0x0a, r24	; 10
	
	
	//amplitude of the tone generator
	uint8_t fsm = 0;			//state machine that determines what setting the user is on
	char vol_str[4];
	vol_sq = (vol_num * 40.95);
     4d0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 7f 07 	call	0xefe	; 0xefe <__floatsisf>
     4de:	2d ec       	ldi	r18, 0xCD	; 205
     4e0:	3c ec       	ldi	r19, 0xCC	; 204
     4e2:	43 e2       	ldi	r20, 0x23	; 35
     4e4:	52 e4       	ldi	r21, 0x42	; 66
     4e6:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     4ea:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fixunssfsi>
     4ee:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <vol_sq+0x1>
     4f2:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <vol_sq>
	
	char freq_str[5];
	
	
	const uint16_t frequency[] = {20, 120, 220, 320, 420, 520, 620, 720, 820, 1000};
     4f6:	84 e1       	ldi	r24, 0x14	; 20
     4f8:	e1 e0       	ldi	r30, 0x01	; 1
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
     4fc:	de 01       	movw	r26, r28
     4fe:	1a 96       	adiw	r26, 0x0a	; 10
     500:	01 90       	ld	r0, Z+
     502:	0d 92       	st	X+, r0
     504:	8a 95       	dec	r24
     506:	e1 f7       	brne	.-8      	; 0x500 <main+0x56>
	uint8_t freq_id = 0;
	
													
	
	i2c_master_init(I2C_SCL_FREQUENCY_100);					//SET LCD TO I2C1 PINS
     508:	60 ea       	ldi	r22, 0xA0	; 160
     50a:	76 e8       	ldi	r23, 0x86	; 134
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_master_init>
	LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	44 e0       	ldi	r20, 0x04	; 4
     518:	64 e1       	ldi	r22, 0x14	; 20
     51a:	87 e2       	ldi	r24, 0x27	; 39
     51c:	0e 94 c7 01 	call	0x38e	; 0x38e <lq_init>
     520:	2e 8f       	std	Y+30, r18	; 0x1e
     522:	3f 8f       	std	Y+31, r19	; 0x1f
     524:	48 a3       	std	Y+32, r20	; 0x20
     526:	59 a3       	std	Y+33, r21	; 0x21
     528:	6a a3       	std	Y+34, r22	; 0x22
     52a:	7b a3       	std	Y+35, r23	; 0x23
     52c:	8c a3       	std	Y+36, r24	; 0x24
	lq_turnOnBacklight(&device);
     52e:	ce 01       	movw	r24, r28
     530:	4e 96       	adiw	r24, 0x1e	; 30
     532:	0e 94 1a 01 	call	0x234	; 0x234 <lq_turnOnBacklight>
	  
	 
	
	 
	PCICR |= (1 << PCIE2);  // Enable Pin Change Interrupt for PCINT16-23 group (Port D)
     536:	e8 e6       	ldi	r30, 0x68	; 104
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	84 60       	ori	r24, 0x04	; 4
     53e:	80 83       	st	Z, r24
	
	PCMSK2 |=  (1 << PCINT18) | (1 << PCINT20) | (1 << PCINT23); //Enables interrupts for PD2, PD4, and PD7		UPDATE: PD1
     540:	ed e6       	ldi	r30, 0x6D	; 109
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	84 69       	ori	r24, 0x94	; 148
     548:	80 83       	st	Z, r24
	sei();
     54a:	78 94       	sei
	
	I2C_Init(); //initiates the DAC 
     54c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Init>
	TCCR1B |= (1 << WGM12);	
     550:	e1 e8       	ldi	r30, 0x81	; 129
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	88 60       	ori	r24, 0x08	; 8
     558:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
     55a:	af e6       	ldi	r26, 0x6F	; 111
     55c:	b0 e0       	ldi	r27, 0x00	; 0
     55e:	8c 91       	ld	r24, X
     560:	82 60       	ori	r24, 0x02	; 2
     562:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12); // Prescaler 256
     564:	80 81       	ld	r24, Z
     566:	84 60       	ori	r24, 0x04	; 4
     568:	80 83       	st	Z, r24
	sei();
     56a:	78 94       	sei
	 uint16_t timer = period *(8000000.0 / 256.0) - 1;
	
	

	
	freq_sq = frequency[freq_id];
     56c:	6a 85       	ldd	r22, Y+10	; 0x0a
     56e:	7b 85       	ldd	r23, Y+11	; 0x0b
	period = (1.0/freq_sq)/2;
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 7d 07 	call	0xefa	; 0xefa <__floatunsisf>
     578:	9b 01       	movw	r18, r22
     57a:	ac 01       	movw	r20, r24
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	80 e8       	ldi	r24, 0x80	; 128
     582:	9f e3       	ldi	r25, 0x3F	; 63
     584:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divsf3>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	5f e3       	ldi	r21, 0x3F	; 63
     590:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
	timer = period *(8000000.0 / 256.0) - 1;
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	34 e2       	ldi	r19, 0x24	; 36
     598:	44 ef       	ldi	r20, 0xF4	; 244
     59a:	56 e4       	ldi	r21, 0x46	; 70
     59c:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e8       	ldi	r20, 0x80	; 128
     5a6:	5f e3       	ldi	r21, 0x3F	; 63
     5a8:	0e 94 6f 06 	call	0xcde	; 0xcde <__subsf3>
     5ac:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fixunssfsi>
	OCR1A = timer;
     5b0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     5b4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//SETTINGS
	lq_setCursor(&device, 0, 0);
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	ce 01       	movw	r24, r28
     5be:	4e 96       	adiw	r24, 0x1e	; 30
     5c0:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
	lq_print(&device, "Amplitude");
     5c4:	65 e1       	ldi	r22, 0x15	; 21
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	ce 01       	movw	r24, r28
     5ca:	4e 96       	adiw	r24, 0x1e	; 30
     5cc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
	lq_setCursor(&device, 1, 0);
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	ce 01       	movw	r24, r28
     5d6:	4e 96       	adiw	r24, 0x1e	; 30
     5d8:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
	lq_print(&device, "Frequency");
     5dc:	6f e1       	ldi	r22, 0x1F	; 31
     5de:	71 e0       	ldi	r23, 0x01	; 1
     5e0:	ce 01       	movw	r24, r28
     5e2:	4e 96       	adiw	r24, 0x1e	; 30
     5e4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
	
	
	//AMPLITUDE
	vol_num = 50;
     5e8:	82 e3       	ldi	r24, 0x32	; 50
     5ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	lq_setCursor(&device, 0, 17);
     5ee:	41 e1       	ldi	r20, 0x11	; 17
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	ce 01       	movw	r24, r28
     5f4:	4e 96       	adiw	r24, 0x1e	; 30
     5f6:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
	sprintf(vol_str, "%d", vol_num);
     5fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5fe:	1f 92       	push	r1
     600:	8f 93       	push	r24
     602:	09 e2       	ldi	r16, 0x29	; 41
     604:	11 e0       	ldi	r17, 0x01	; 1
     606:	1f 93       	push	r17
     608:	0f 93       	push	r16
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	7c 01       	movw	r14, r24
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	0e 94 9a 08 	call	0x1134	; 0x1134 <sprintf>
	lq_print(&device, vol_str);
     618:	b7 01       	movw	r22, r14
     61a:	ce 01       	movw	r24, r28
     61c:	4e 96       	adiw	r24, 0x1e	; 30
     61e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
	lq_print(&device, " ");
     622:	6f e2       	ldi	r22, 0x2F	; 47
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	ce 01       	movw	r24, r28
     628:	4e 96       	adiw	r24, 0x1e	; 30
     62a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
	
	//CURSOR
	lq_setCursor(&device, 0, 9);
     62e:	49 e0       	ldi	r20, 0x09	; 9
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	ce 01       	movw	r24, r28
     634:	4e 96       	adiw	r24, 0x1e	; 30
     636:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
	lq_print(&device, "<");
     63a:	6c e2       	ldi	r22, 0x2C	; 44
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	ce 01       	movw	r24, r28
     640:	4e 96       	adiw	r24, 0x1e	; 30
     642:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
	
	//FREQUENCY
	freq_id = 0;
	lq_setCursor(&device, 1, 14);
     646:	4e e0       	ldi	r20, 0x0E	; 14
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	ce 01       	movw	r24, r28
     64c:	4e 96       	adiw	r24, 0x1e	; 30
     64e:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
	lq_print(&device, "  ");
     652:	6e e2       	ldi	r22, 0x2E	; 46
     654:	71 e0       	ldi	r23, 0x01	; 1
     656:	ce 01       	movw	r24, r28
     658:	4e 96       	adiw	r24, 0x1e	; 30
     65a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
	sprintf(freq_str, "%d", frequency[freq_id]);
     65e:	8b 85       	ldd	r24, Y+11	; 0x0b
     660:	8f 93       	push	r24
     662:	8a 85       	ldd	r24, Y+10	; 0x0a
     664:	8f 93       	push	r24
     666:	1f 93       	push	r17
     668:	0f 93       	push	r16
     66a:	8e 01       	movw	r16, r28
     66c:	0b 5f       	subi	r16, 0xFB	; 251
     66e:	1f 4f       	sbci	r17, 0xFF	; 255
     670:	1f 93       	push	r17
     672:	0f 93       	push	r16
     674:	0e 94 9a 08 	call	0x1134	; 0x1134 <sprintf>
	lq_print(&device, freq_str);
     678:	b8 01       	movw	r22, r16
     67a:	ce 01       	movw	r24, r28
     67c:	4e 96       	adiw	r24, 0x1e	; 30
     67e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
	
	lq_setCursor(&device, 1, 18);
     682:	42 e1       	ldi	r20, 0x12	; 18
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	ce 01       	movw	r24, r28
     688:	4e 96       	adiw	r24, 0x1e	; 30
     68a:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
	lq_print(&device, "Hz");
     68e:	61 e3       	ldi	r22, 0x31	; 49
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	ce 01       	movw	r24, r28
     694:	4e 96       	adiw	r24, 0x1e	; 30
     696:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
	
	
	lq_print(&device, "Up    Down    Select");
     69a:	64 e3       	ldi	r22, 0x34	; 52
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	ce 01       	movw	r24, r28
     6a0:	4e 96       	adiw	r24, 0x1e	; 30
     6a2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
	//CURSOR
	lq_setCursor(&device, 0, 9);
	lq_print(&device, "<");
	
	//FREQUENCY
	freq_id = 0;
     6b0:	00 e0       	ldi	r16, 0x00	; 0
	DDRD &= (1<<down);		//down button
	
	
	
	//amplitude of the tone generator
	uint8_t fsm = 0;			//state machine that determines what setting the user is on
     6b2:	10 e0       	ldi	r17, 0x00	; 0
	
	
	while (1) 
    {
				
		if(selectPressed){
     6b4:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <selectPressed>
     6b8:	88 23       	and	r24, r24
     6ba:	09 f4       	brne	.+2      	; 0x6be <main+0x214>
     6bc:	a3 c0       	rjmp	.+326    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			switch(fsm){
     6be:	11 30       	cpi	r17, 0x01	; 1
     6c0:	71 f1       	breq	.+92     	; 0x71e <main+0x274>
     6c2:	38 f0       	brcs	.+14     	; 0x6d2 <main+0x228>
     6c4:	12 30       	cpi	r17, 0x02	; 2
     6c6:	09 f4       	brne	.+2      	; 0x6ca <main+0x220>
     6c8:	50 c0       	rjmp	.+160    	; 0x76a <main+0x2c0>
     6ca:	13 30       	cpi	r17, 0x03	; 3
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <main+0x226>
     6ce:	73 c0       	rjmp	.+230    	; 0x7b6 <main+0x30c>
     6d0:	97 c0       	rjmp	.+302    	; 0x800 <__DATA_REGION_LENGTH__>
				case 0:
					fsm = 2;
					lq_setCursor(&device, 0, 16);
     6d2:	40 e1       	ldi	r20, 0x10	; 16
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	ce 01       	movw	r24, r28
     6d8:	4e 96       	adiw	r24, 0x1e	; 30
     6da:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, ">");
     6de:	69 e4       	ldi	r22, 0x49	; 73
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	ce 01       	movw	r24, r28
     6e4:	4e 96       	adiw	r24, 0x1e	; 30
     6e6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 0, 9);
     6ea:	49 e0       	ldi	r20, 0x09	; 9
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	ce 01       	movw	r24, r28
     6f0:	4e 96       	adiw	r24, 0x1e	; 30
     6f2:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, " ");
     6f6:	6f e2       	ldi	r22, 0x2F	; 47
     6f8:	71 e0       	ldi	r23, 0x01	; 1
     6fa:	ce 01       	movw	r24, r28
     6fc:	4e 96       	adiw	r24, 0x1e	; 30
     6fe:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 3, 16);
     702:	40 e1       	ldi	r20, 0x10	; 16
     704:	63 e0       	ldi	r22, 0x03	; 3
     706:	ce 01       	movw	r24, r28
     708:	4e 96       	adiw	r24, 0x1e	; 30
     70a:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "Back");
     70e:	6b e4       	ldi	r22, 0x4B	; 75
     710:	71 e0       	ldi	r23, 0x01	; 1
     712:	ce 01       	movw	r24, r28
     714:	4e 96       	adiw	r24, 0x1e	; 30
     716:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
    {
				
		if(selectPressed){
			switch(fsm){
				case 0:
					fsm = 2;
     71a:	12 e0       	ldi	r17, 0x02	; 2
					lq_print(&device, ">");
					lq_setCursor(&device, 0, 9);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 16);
					lq_print(&device, "Back");
				break;
     71c:	71 c0       	rjmp	.+226    	; 0x800 <__DATA_REGION_LENGTH__>
				
				case 1:
					fsm = 3;
					lq_setCursor(&device, 1, 12);
     71e:	4c e0       	ldi	r20, 0x0C	; 12
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	ce 01       	movw	r24, r28
     724:	4e 96       	adiw	r24, 0x1e	; 30
     726:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, ">");
     72a:	69 e4       	ldi	r22, 0x49	; 73
     72c:	71 e0       	ldi	r23, 0x01	; 1
     72e:	ce 01       	movw	r24, r28
     730:	4e 96       	adiw	r24, 0x1e	; 30
     732:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 1, 9);
     736:	49 e0       	ldi	r20, 0x09	; 9
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	ce 01       	movw	r24, r28
     73c:	4e 96       	adiw	r24, 0x1e	; 30
     73e:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, " ");
     742:	6f e2       	ldi	r22, 0x2F	; 47
     744:	71 e0       	ldi	r23, 0x01	; 1
     746:	ce 01       	movw	r24, r28
     748:	4e 96       	adiw	r24, 0x1e	; 30
     74a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 3, 16);
     74e:	40 e1       	ldi	r20, 0x10	; 16
     750:	63 e0       	ldi	r22, 0x03	; 3
     752:	ce 01       	movw	r24, r28
     754:	4e 96       	adiw	r24, 0x1e	; 30
     756:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "Back");
     75a:	6b e4       	ldi	r22, 0x4B	; 75
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	ce 01       	movw	r24, r28
     760:	4e 96       	adiw	r24, 0x1e	; 30
     762:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 3, 16);
					lq_print(&device, "Back");
				break;
				
				case 1:
					fsm = 3;
     766:	13 e0       	ldi	r17, 0x03	; 3
					lq_setCursor(&device, 3, 16);
					lq_print(&device, "Back");
					
					
					
				break;
     768:	4b c0       	rjmp	.+150    	; 0x800 <__DATA_REGION_LENGTH__>
				
				
				
				case 2:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
     76a:	49 e0       	ldi	r20, 0x09	; 9
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	ce 01       	movw	r24, r28
     770:	4e 96       	adiw	r24, 0x1e	; 30
     772:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "<");
     776:	6c e2       	ldi	r22, 0x2C	; 44
     778:	71 e0       	ldi	r23, 0x01	; 1
     77a:	ce 01       	movw	r24, r28
     77c:	4e 96       	adiw	r24, 0x1e	; 30
     77e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					
					lq_setCursor(&device, 0, 16);
     782:	40 e1       	ldi	r20, 0x10	; 16
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	ce 01       	movw	r24, r28
     788:	4e 96       	adiw	r24, 0x1e	; 30
     78a:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, " ");
     78e:	6f e2       	ldi	r22, 0x2F	; 47
     790:	71 e0       	ldi	r23, 0x01	; 1
     792:	ce 01       	movw	r24, r28
     794:	4e 96       	adiw	r24, 0x1e	; 30
     796:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 3, 14);
     79a:	4e e0       	ldi	r20, 0x0E	; 14
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	ce 01       	movw	r24, r28
     7a0:	4e 96       	adiw	r24, 0x1e	; 30
     7a2:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "Select");
     7a6:	62 e4       	ldi	r22, 0x42	; 66
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	ce 01       	movw	r24, r28
     7ac:	4e 96       	adiw	r24, 0x1e	; 30
     7ae:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
				break;
				
				
				
				case 2:
					fsm = 0;
     7b2:	10 e0       	ldi	r17, 0x00	; 0
					lq_setCursor(&device, 0, 16);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 14);
					lq_print(&device, "Select");
					
				break;
     7b4:	25 c0       	rjmp	.+74     	; 0x800 <__DATA_REGION_LENGTH__>
				
				case 3:
					fsm = 1;
					lq_setCursor(&device, 1, 9);
     7b6:	49 e0       	ldi	r20, 0x09	; 9
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	ce 01       	movw	r24, r28
     7bc:	4e 96       	adiw	r24, 0x1e	; 30
     7be:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "<");
     7c2:	6c e2       	ldi	r22, 0x2C	; 44
     7c4:	71 e0       	ldi	r23, 0x01	; 1
     7c6:	ce 01       	movw	r24, r28
     7c8:	4e 96       	adiw	r24, 0x1e	; 30
     7ca:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					
					lq_setCursor(&device, 1, 12);
     7ce:	4c e0       	ldi	r20, 0x0C	; 12
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	ce 01       	movw	r24, r28
     7d4:	4e 96       	adiw	r24, 0x1e	; 30
     7d6:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, " ");
     7da:	6f e2       	ldi	r22, 0x2F	; 47
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	ce 01       	movw	r24, r28
     7e0:	4e 96       	adiw	r24, 0x1e	; 30
     7e2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 3, 14);
     7e6:	4e e0       	ldi	r20, 0x0E	; 14
     7e8:	63 e0       	ldi	r22, 0x03	; 3
     7ea:	ce 01       	movw	r24, r28
     7ec:	4e 96       	adiw	r24, 0x1e	; 30
     7ee:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "Select");
     7f2:	62 e4       	ldi	r22, 0x42	; 66
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	ce 01       	movw	r24, r28
     7f8:	4e 96       	adiw	r24, 0x1e	; 30
     7fa:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_print(&device, "Select");
					
				break;
				
				case 3:
					fsm = 1;
     7fe:	11 e0       	ldi	r17, 0x01	; 1
				break;
				

			}
		
			selectPressed = 0;
     800:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <selectPressed>
		}
		
		
		if(upPressed){
     804:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <upPressed>
     808:	88 23       	and	r24, r24
     80a:	09 f4       	brne	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	f4 c0       	rjmp	.+488    	; 0x9f6 <__stack+0xf7>
			switch(fsm){
     80e:	11 30       	cpi	r17, 0x01	; 1
     810:	09 f1       	breq	.+66     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     812:	30 f0       	brcs	.+12     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     814:	12 30       	cpi	r17, 0x02	; 2
     816:	c1 f1       	breq	.+112    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     818:	13 30       	cpi	r17, 0x03	; 3
     81a:	09 f4       	brne	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81c:	83 c0       	rjmp	.+262    	; 0x924 <__stack+0x25>
     81e:	e9 c0       	rjmp	.+466    	; 0x9f2 <__stack+0xf3>
				case 0:
					fsm = 1;
					lq_setCursor(&device, 0, 9);
     820:	49 e0       	ldi	r20, 0x09	; 9
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	ce 01       	movw	r24, r28
     826:	4e 96       	adiw	r24, 0x1e	; 30
     828:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, " ");
     82c:	6f e2       	ldi	r22, 0x2F	; 47
     82e:	71 e0       	ldi	r23, 0x01	; 1
     830:	ce 01       	movw	r24, r28
     832:	4e 96       	adiw	r24, 0x1e	; 30
     834:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					
					lq_setCursor(&device, 1, 9);
     838:	49 e0       	ldi	r20, 0x09	; 9
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	ce 01       	movw	r24, r28
     83e:	4e 96       	adiw	r24, 0x1e	; 30
     840:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "<");
     844:	6c e2       	ldi	r22, 0x2C	; 44
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	ce 01       	movw	r24, r28
     84a:	4e 96       	adiw	r24, 0x1e	; 30
     84c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
		
		
		if(upPressed){
			switch(fsm){
				case 0:
					fsm = 1;
     850:	11 e0       	ldi	r17, 0x01	; 1
					lq_print(&device, " ");
					
					lq_setCursor(&device, 1, 9);
					lq_print(&device, "<");
					
				break;
     852:	cf c0       	rjmp	.+414    	; 0x9f2 <__stack+0xf3>
				
				case 1:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
     854:	49 e0       	ldi	r20, 0x09	; 9
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	ce 01       	movw	r24, r28
     85a:	4e 96       	adiw	r24, 0x1e	; 30
     85c:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "<");
     860:	6c e2       	ldi	r22, 0x2C	; 44
     862:	71 e0       	ldi	r23, 0x01	; 1
     864:	ce 01       	movw	r24, r28
     866:	4e 96       	adiw	r24, 0x1e	; 30
     868:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 1, 9);
     86c:	49 e0       	ldi	r20, 0x09	; 9
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	ce 01       	movw	r24, r28
     872:	4e 96       	adiw	r24, 0x1e	; 30
     874:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, " ");
     878:	6f e2       	ldi	r22, 0x2F	; 47
     87a:	71 e0       	ldi	r23, 0x01	; 1
     87c:	ce 01       	movw	r24, r28
     87e:	4e 96       	adiw	r24, 0x1e	; 30
     880:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_print(&device, "<");
					
				break;
				
				case 1:
					fsm = 0;
     884:	10 e0       	ldi	r17, 0x00	; 0
					lq_setCursor(&device, 0, 9);
					lq_print(&device, "<");
					lq_setCursor(&device, 1, 9);
					lq_print(&device, " ");
					
				break;
     886:	b5 c0       	rjmp	.+362    	; 0x9f2 <__stack+0xf3>
				
				
				case 2:
					if(vol_num<100){
     888:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     88c:	84 36       	cpi	r24, 0x64	; 100
     88e:	b0 f5       	brcc	.+108    	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
						vol_num += 1;
     890:	8f 5f       	subi	r24, 0xFF	; 255
     892:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
						lq_setCursor(&device, 0, 17);
     896:	41 e1       	ldi	r20, 0x11	; 17
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	ce 01       	movw	r24, r28
     89c:	4e 96       	adiw	r24, 0x1e	; 30
     89e:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
						sprintf(vol_str, "%d", vol_num);
     8a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8a6:	1f 92       	push	r1
     8a8:	8f 93       	push	r24
     8aa:	89 e2       	ldi	r24, 0x29	; 41
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	7c 01       	movw	r14, r24
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	0e 94 9a 08 	call	0x1134	; 0x1134 <sprintf>
						lq_print(&device, vol_str);
     8c0:	b7 01       	movw	r22, r14
     8c2:	ce 01       	movw	r24, r28
     8c4:	4e 96       	adiw	r24, 0x1e	; 30
     8c6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
						if (vol_num < 10) {
     8ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	8a 30       	cpi	r24, 0x0A	; 10
     8dc:	38 f4       	brcc	.+14     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
							lq_print(&device, "  ");
     8de:	6e e2       	ldi	r22, 0x2E	; 46
     8e0:	71 e0       	ldi	r23, 0x01	; 1
     8e2:	ce 01       	movw	r24, r28
     8e4:	4e 96       	adiw	r24, 0x1e	; 30
     8e6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
     8ea:	08 c0       	rjmp	.+16     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
							} else if (vol_num < 100) {
     8ec:	84 36       	cpi	r24, 0x64	; 100
     8ee:	30 f4       	brcc	.+12     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
									lq_print(&device, " ");
     8f0:	6f e2       	ldi	r22, 0x2F	; 47
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	ce 01       	movw	r24, r28
     8f6:	4e 96       	adiw	r24, 0x1e	; 30
     8f8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
						}
					}
					vol_sq = (uint16_t)(vol_num * 40.95);
     8fc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 7f 07 	call	0xefe	; 0xefe <__floatsisf>
     90a:	2d ec       	ldi	r18, 0xCD	; 205
     90c:	3c ec       	ldi	r19, 0xCC	; 204
     90e:	43 e2       	ldi	r20, 0x23	; 35
     910:	52 e4       	ldi	r21, 0x42	; 66
     912:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     916:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fixunssfsi>
     91a:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <vol_sq+0x1>
     91e:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <vol_sq>
					
					
					
					
				break;
     922:	67 c0       	rjmp	.+206    	; 0x9f2 <__stack+0xf3>
				
				case 3:
					
					if (freq_id == 9) {
     924:	09 30       	cpi	r16, 0x09	; 9
     926:	11 f0       	breq	.+4      	; 0x92c <__stack+0x2d>
						freq_id = 0;
						} else {
							freq_id += 1;
     928:	0f 5f       	subi	r16, 0xFF	; 255
     92a:	01 c0       	rjmp	.+2      	; 0x92e <__stack+0x2f>
				break;
				
				case 3:
					
					if (freq_id == 9) {
						freq_id = 0;
     92c:	00 e0       	ldi	r16, 0x00	; 0
						} else {
							freq_id += 1;
						}
					lq_setCursor(&device, 1, 14);
     92e:	4e e0       	ldi	r20, 0x0E	; 14
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	ce 01       	movw	r24, r28
     934:	4e 96       	adiw	r24, 0x1e	; 30
     936:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					
					switch(freq_id) {
     93a:	00 23       	and	r16, r16
     93c:	19 f0       	breq	.+6      	; 0x944 <__stack+0x45>
     93e:	09 30       	cpi	r16, 0x09	; 9
     940:	70 f4       	brcc	.+28     	; 0x95e <__stack+0x5f>
     942:	07 c0       	rjmp	.+14     	; 0x952 <__stack+0x53>
						case 0:
						lq_print(&device, "  ");
     944:	6e e2       	ldi	r22, 0x2E	; 46
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	ce 01       	movw	r24, r28
     94a:	4e 96       	adiw	r24, 0x1e	; 30
     94c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
						break;
     950:	06 c0       	rjmp	.+12     	; 0x95e <__stack+0x5f>
						case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: 
						lq_print(&device, " ");
     952:	6f e2       	ldi	r22, 0x2F	; 47
     954:	71 e0       	ldi	r23, 0x01	; 1
     956:	ce 01       	movw	r24, r28
     958:	4e 96       	adiw	r24, 0x1e	; 30
     95a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
						break;
						
					}
					sprintf(freq_str, "%d", frequency[freq_id]);
     95e:	e0 2f       	mov	r30, r16
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	8c 0f       	add	r24, r28
     96c:	9d 1f       	adc	r25, r29
     96e:	e8 0f       	add	r30, r24
     970:	f9 1f       	adc	r31, r25
     972:	e1 84       	ldd	r14, Z+9	; 0x09
     974:	f2 84       	ldd	r15, Z+10	; 0x0a
     976:	ff 92       	push	r15
     978:	ef 92       	push	r14
     97a:	89 e2       	ldi	r24, 0x29	; 41
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	9f 93       	push	r25
     980:	8f 93       	push	r24
     982:	6e 01       	movw	r12, r28
     984:	95 e0       	ldi	r25, 0x05	; 5
     986:	c9 0e       	add	r12, r25
     988:	d1 1c       	adc	r13, r1
     98a:	df 92       	push	r13
     98c:	cf 92       	push	r12
     98e:	0e 94 9a 08 	call	0x1134	; 0x1134 <sprintf>
					lq_print(&device, freq_str);
     992:	b6 01       	movw	r22, r12
     994:	ce 01       	movw	r24, r28
     996:	4e 96       	adiw	r24, 0x1e	; 30
     998:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					
							
					freq_sq = frequency[freq_id];
					period = (1.0/freq_sq)/2;
     99c:	b7 01       	movw	r22, r14
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 7d 07 	call	0xefa	; 0xefa <__floatunsisf>
     9a6:	9b 01       	movw	r18, r22
     9a8:	ac 01       	movw	r20, r24
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	9f e3       	ldi	r25, 0x3F	; 63
     9b2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divsf3>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	5f e3       	ldi	r21, 0x3F	; 63
     9be:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
					timer = period *(16000000.0 / 256.0) - 1;
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	34 e2       	ldi	r19, 0x24	; 36
     9c6:	44 e7       	ldi	r20, 0x74	; 116
     9c8:	57 e4       	ldi	r21, 0x47	; 71
     9ca:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e8       	ldi	r20, 0x80	; 128
     9d4:	5f e3       	ldi	r21, 0x3F	; 63
     9d6:	0e 94 6f 06 	call	0xcde	; 0xcde <__subsf3>
     9da:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fixunssfsi>
					OCR1A = timer;	
     9de:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     9e2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					
				break;
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
				
				
			
			
		}
		upPressed = 0;
     9f2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <upPressed>
		}
		
		
		if(downPressed){
     9f6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <downPressed>
     9fa:	88 23       	and	r24, r24
     9fc:	09 f4       	brne	.+2      	; 0xa00 <__stack+0x101>
     9fe:	5a ce       	rjmp	.-844    	; 0x6b4 <main+0x20a>
			switch(fsm){
     a00:	11 30       	cpi	r17, 0x01	; 1
     a02:	09 f1       	breq	.+66     	; 0xa46 <__stack+0x147>
     a04:	30 f0       	brcs	.+12     	; 0xa12 <__stack+0x113>
     a06:	12 30       	cpi	r17, 0x02	; 2
     a08:	c1 f1       	breq	.+112    	; 0xa7a <__stack+0x17b>
     a0a:	13 30       	cpi	r17, 0x03	; 3
     a0c:	09 f4       	brne	.+2      	; 0xa10 <__stack+0x111>
     a0e:	83 c0       	rjmp	.+262    	; 0xb16 <__stack+0x217>
     a10:	e9 c0       	rjmp	.+466    	; 0xbe4 <__stack+0x2e5>
				case 0:
					fsm = 1;
					lq_setCursor(&device, 0, 9);
     a12:	49 e0       	ldi	r20, 0x09	; 9
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	ce 01       	movw	r24, r28
     a18:	4e 96       	adiw	r24, 0x1e	; 30
     a1a:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, " ");
     a1e:	6f e2       	ldi	r22, 0x2F	; 47
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	ce 01       	movw	r24, r28
     a24:	4e 96       	adiw	r24, 0x1e	; 30
     a26:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					
					lq_setCursor(&device, 1, 9);
     a2a:	49 e0       	ldi	r20, 0x09	; 9
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	ce 01       	movw	r24, r28
     a30:	4e 96       	adiw	r24, 0x1e	; 30
     a32:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "<");
     a36:	6c e2       	ldi	r22, 0x2C	; 44
     a38:	71 e0       	ldi	r23, 0x01	; 1
     a3a:	ce 01       	movw	r24, r28
     a3c:	4e 96       	adiw	r24, 0x1e	; 30
     a3e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
		
		
		if(downPressed){
			switch(fsm){
				case 0:
					fsm = 1;
     a42:	11 e0       	ldi	r17, 0x01	; 1
					lq_print(&device, " ");
					
					lq_setCursor(&device, 1, 9);
					lq_print(&device, "<");
				
				break;
     a44:	cf c0       	rjmp	.+414    	; 0xbe4 <__stack+0x2e5>
				
				case 1:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
     a46:	49 e0       	ldi	r20, 0x09	; 9
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	ce 01       	movw	r24, r28
     a4c:	4e 96       	adiw	r24, 0x1e	; 30
     a4e:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, "<");
     a52:	6c e2       	ldi	r22, 0x2C	; 44
     a54:	71 e0       	ldi	r23, 0x01	; 1
     a56:	ce 01       	movw	r24, r28
     a58:	4e 96       	adiw	r24, 0x1e	; 30
     a5a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_setCursor(&device, 1, 9);
     a5e:	49 e0       	ldi	r20, 0x09	; 9
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	ce 01       	movw	r24, r28
     a64:	4e 96       	adiw	r24, 0x1e	; 30
     a66:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					lq_print(&device, " ");
     a6a:	6f e2       	ldi	r22, 0x2F	; 47
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	ce 01       	movw	r24, r28
     a70:	4e 96       	adiw	r24, 0x1e	; 30
     a72:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					lq_print(&device, "<");
				
				break;
				
				case 1:
					fsm = 0;
     a76:	10 e0       	ldi	r17, 0x00	; 0
					lq_setCursor(&device, 0, 9);
					lq_print(&device, "<");
					lq_setCursor(&device, 1, 9);
					lq_print(&device, " ");
				
				break;
     a78:	b5 c0       	rjmp	.+362    	; 0xbe4 <__stack+0x2e5>
				
				
				
				case 2:
					if(vol_num > 0){
     a7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a7e:	88 23       	and	r24, r24
     a80:	b1 f1       	breq	.+108    	; 0xaee <__stack+0x1ef>
						vol_num -= 1;
     a82:	81 50       	subi	r24, 0x01	; 1
     a84:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
						lq_setCursor(&device, 0, 17);
     a88:	41 e1       	ldi	r20, 0x11	; 17
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	ce 01       	movw	r24, r28
     a8e:	4e 96       	adiw	r24, 0x1e	; 30
     a90:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
						sprintf(vol_str, "%d", vol_num);
     a94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a98:	1f 92       	push	r1
     a9a:	8f 93       	push	r24
     a9c:	89 e2       	ldi	r24, 0x29	; 41
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	9f 93       	push	r25
     aa2:	8f 93       	push	r24
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	7c 01       	movw	r14, r24
     aaa:	9f 93       	push	r25
     aac:	8f 93       	push	r24
     aae:	0e 94 9a 08 	call	0x1134	; 0x1134 <sprintf>
						lq_print(&device, vol_str);
     ab2:	b7 01       	movw	r22, r14
     ab4:	ce 01       	movw	r24, r28
     ab6:	4e 96       	adiw	r24, 0x1e	; 30
     ab8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
						if (vol_num < 10) {
     abc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	8a 30       	cpi	r24, 0x0A	; 10
     ace:	38 f4       	brcc	.+14     	; 0xade <__stack+0x1df>
							lq_print(&device, "  ");
     ad0:	6e e2       	ldi	r22, 0x2E	; 46
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	ce 01       	movw	r24, r28
     ad6:	4e 96       	adiw	r24, 0x1e	; 30
     ad8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
     adc:	08 c0       	rjmp	.+16     	; 0xaee <__stack+0x1ef>
							} else if (vol_num < 100) {
     ade:	84 36       	cpi	r24, 0x64	; 100
     ae0:	30 f4       	brcc	.+12     	; 0xaee <__stack+0x1ef>
							lq_print(&device, " ");
     ae2:	6f e2       	ldi	r22, 0x2F	; 47
     ae4:	71 e0       	ldi	r23, 0x01	; 1
     ae6:	ce 01       	movw	r24, r28
     ae8:	4e 96       	adiw	r24, 0x1e	; 30
     aea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
						}
					}
					vol_sq = (uint16_t)(vol_num * 40.95);
     aee:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 7f 07 	call	0xefe	; 0xefe <__floatsisf>
     afc:	2d ec       	ldi	r18, 0xCD	; 205
     afe:	3c ec       	ldi	r19, 0xCC	; 204
     b00:	43 e2       	ldi	r20, 0x23	; 35
     b02:	52 e4       	ldi	r21, 0x42	; 66
     b04:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     b08:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fixunssfsi>
     b0c:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <vol_sq+0x1>
     b10:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <vol_sq>
					
					
				break;
     b14:	67 c0       	rjmp	.+206    	; 0xbe4 <__stack+0x2e5>
				
				case 3:
					if (freq_id == 0) {
     b16:	00 23       	and	r16, r16
     b18:	11 f0       	breq	.+4      	; 0xb1e <__stack+0x21f>
						freq_id = 9;
						} else {
						freq_id -= 1;
     b1a:	01 50       	subi	r16, 0x01	; 1
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <__stack+0x221>
					
				break;
				
				case 3:
					if (freq_id == 0) {
						freq_id = 9;
     b1e:	09 e0       	ldi	r16, 0x09	; 9
						} else {
						freq_id -= 1;
					}
					lq_setCursor(&device, 1, 14);
     b20:	4e e0       	ldi	r20, 0x0E	; 14
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	ce 01       	movw	r24, r28
     b26:	4e 96       	adiw	r24, 0x1e	; 30
     b28:	0e 94 81 01 	call	0x302	; 0x302 <lq_setCursor>
					switch(freq_id) {
     b2c:	00 23       	and	r16, r16
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__stack+0x237>
     b30:	09 30       	cpi	r16, 0x09	; 9
     b32:	70 f4       	brcc	.+28     	; 0xb50 <__stack+0x251>
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <__stack+0x245>
						case 0:
						lq_print(&device, "  ");
     b36:	6e e2       	ldi	r22, 0x2E	; 46
     b38:	71 e0       	ldi	r23, 0x01	; 1
     b3a:	ce 01       	movw	r24, r28
     b3c:	4e 96       	adiw	r24, 0x1e	; 30
     b3e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
						break;
     b42:	06 c0       	rjmp	.+12     	; 0xb50 <__stack+0x251>
						case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8:
						lq_print(&device, " ");
     b44:	6f e2       	ldi	r22, 0x2F	; 47
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	ce 01       	movw	r24, r28
     b4a:	4e 96       	adiw	r24, 0x1e	; 30
     b4c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
						break;
						
					}
					sprintf(freq_str, "%d", frequency[freq_id]);
     b50:	e0 2f       	mov	r30, r16
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	8c 0f       	add	r24, r28
     b5e:	9d 1f       	adc	r25, r29
     b60:	e8 0f       	add	r30, r24
     b62:	f9 1f       	adc	r31, r25
     b64:	e1 84       	ldd	r14, Z+9	; 0x09
     b66:	f2 84       	ldd	r15, Z+10	; 0x0a
     b68:	ff 92       	push	r15
     b6a:	ef 92       	push	r14
     b6c:	89 e2       	ldi	r24, 0x29	; 41
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	6e 01       	movw	r12, r28
     b76:	95 e0       	ldi	r25, 0x05	; 5
     b78:	c9 0e       	add	r12, r25
     b7a:	d1 1c       	adc	r13, r1
     b7c:	df 92       	push	r13
     b7e:	cf 92       	push	r12
     b80:	0e 94 9a 08 	call	0x1134	; 0x1134 <sprintf>
					lq_print(&device, freq_str);
     b84:	b6 01       	movw	r22, r12
     b86:	ce 01       	movw	r24, r28
     b88:	4e 96       	adiw	r24, 0x1e	; 30
     b8a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_print>
					
					freq_sq = frequency[freq_id];
					period = (1.0/freq_sq)/2;
     b8e:	b7 01       	movw	r22, r14
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 7d 07 	call	0xefa	; 0xefa <__floatunsisf>
     b98:	9b 01       	movw	r18, r22
     b9a:	ac 01       	movw	r20, r24
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	80 e8       	ldi	r24, 0x80	; 128
     ba2:	9f e3       	ldi	r25, 0x3F	; 63
     ba4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divsf3>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
					timer = period *(16000000.0 / 256.0) - 1;
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	34 e2       	ldi	r19, 0x24	; 36
     bb8:	44 e7       	ldi	r20, 0x74	; 116
     bba:	57 e4       	ldi	r21, 0x47	; 71
     bbc:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e8       	ldi	r20, 0x80	; 128
     bc6:	5f e3       	ldi	r21, 0x3F	; 63
     bc8:	0e 94 6f 06 	call	0xcde	; 0xcde <__subsf3>
     bcc:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fixunssfsi>
					OCR1A = timer;
     bd0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     bd4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					
				break;
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
				
				
			
			
		}
		downPressed = 0;
     be4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <downPressed>
     be8:	65 cd       	rjmp	.-1334   	; 0x6b4 <main+0x20a>

00000bea <__vector_5>:
	}




ISR(PCINT2_vect) {
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	2f 93       	push	r18
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
	
	if  (PIND & (1 << select)) {
     bfa:	4a 9b       	sbis	0x09, 2	; 9
     bfc:	0e c0       	rjmp	.+28     	; 0xc1a <__vector_5+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bfe:	2f e7       	ldi	r18, 0x7F	; 127
     c00:	88 e3       	ldi	r24, 0x38	; 56
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	80 40       	sbci	r24, 0x00	; 0
     c08:	90 40       	sbci	r25, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <__vector_5+0x1a>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <__vector_5+0x24>
     c0e:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << select)) {}
     c10:	4a 99       	sbic	0x09, 2	; 9
     c12:	fe cf       	rjmp	.-4      	; 0xc10 <__vector_5+0x26>
		selectPressed = 1;  // Set flag for PD2 button press
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <selectPressed>
	}
	
	if  (PIND & (1 << up)) {
     c1a:	4c 9b       	sbis	0x09, 4	; 9
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__vector_5+0x50>
     c1e:	2f e7       	ldi	r18, 0x7F	; 127
     c20:	88 e3       	ldi	r24, 0x38	; 56
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	80 40       	sbci	r24, 0x00	; 0
     c28:	90 40       	sbci	r25, 0x00	; 0
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <__vector_5+0x3a>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <__vector_5+0x44>
     c2e:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << up)) {}
     c30:	4c 99       	sbic	0x09, 4	; 9
     c32:	fe cf       	rjmp	.-4      	; 0xc30 <__vector_5+0x46>
		upPressed = 1;  // Set flag for PD4 button press
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <upPressed>
	}
	
	if  (PIND & (1 << down)) {
     c3a:	4f 9b       	sbis	0x09, 7	; 9
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <__vector_5+0x70>
     c3e:	2f e7       	ldi	r18, 0x7F	; 127
     c40:	88 e3       	ldi	r24, 0x38	; 56
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <__vector_5+0x5a>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <__vector_5+0x64>
     c4e:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << down)) {}
     c50:	4f 99       	sbic	0x09, 7	; 9
     c52:	fe cf       	rjmp	.-4      	; 0xc50 <__vector_5+0x66>
		downPressed = 1;  // Set flag for PD7 button press
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <downPressed>
	}
	
	
}
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	0f 90       	pop	r0
     c66:	1f 90       	pop	r1
     c68:	18 95       	reti

00000c6a <__vector_11>:


ISR(TIMER1_COMPA_vect) {
     c6a:	1f 92       	push	r1
     c6c:	0f 92       	push	r0
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	2f 93       	push	r18
     c76:	3f 93       	push	r19
     c78:	4f 93       	push	r20
     c7a:	5f 93       	push	r21
     c7c:	6f 93       	push	r22
     c7e:	7f 93       	push	r23
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	af 93       	push	r26
     c86:	bf 93       	push	r27
     c88:	ef 93       	push	r30
     c8a:	ff 93       	push	r31
		if(dac_state ==0){
     c8c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     c90:	81 11       	cpse	r24, r1
     c92:	0a c0       	rjmp	.+20     	; 0xca8 <__vector_11+0x3e>
			MCP4725_SetValue(vol_sq);
     c94:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <vol_sq>
     c98:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <vol_sq+0x1>
     c9c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MCP4725_SetValue>
			dac_state = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
     ca6:	0a c0       	rjmp	.+20     	; 0xcbc <__vector_11+0x52>
		}
		else if(dac_state ==1){
     ca8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	31 f4       	brne	.+12     	; 0xcbc <__vector_11+0x52>
			MCP4725_SetValue(0);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MCP4725_SetValue>
			dac_state = 0;
     cb8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
			
		}
	
		
		
	}
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__subsf3>:
     cde:	50 58       	subi	r21, 0x80	; 128

00000ce0 <__addsf3>:
     ce0:	bb 27       	eor	r27, r27
     ce2:	aa 27       	eor	r26, r26
     ce4:	0e 94 87 06 	call	0xd0e	; 0xd0e <__addsf3x>
     ce8:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_round>
     cec:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_pscA>
     cf0:	38 f0       	brcs	.+14     	; 0xd00 <__addsf3+0x20>
     cf2:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_pscB>
     cf6:	20 f0       	brcs	.+8      	; 0xd00 <__addsf3+0x20>
     cf8:	39 f4       	brne	.+14     	; 0xd08 <__addsf3+0x28>
     cfa:	9f 3f       	cpi	r25, 0xFF	; 255
     cfc:	19 f4       	brne	.+6      	; 0xd04 <__addsf3+0x24>
     cfe:	26 f4       	brtc	.+8      	; 0xd08 <__addsf3+0x28>
     d00:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_nan>
     d04:	0e f4       	brtc	.+2      	; 0xd08 <__addsf3+0x28>
     d06:	e0 95       	com	r30
     d08:	e7 fb       	bst	r30, 7
     d0a:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_inf>

00000d0e <__addsf3x>:
     d0e:	e9 2f       	mov	r30, r25
     d10:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_split3>
     d14:	58 f3       	brcs	.-42     	; 0xcec <__addsf3+0xc>
     d16:	ba 17       	cp	r27, r26
     d18:	62 07       	cpc	r22, r18
     d1a:	73 07       	cpc	r23, r19
     d1c:	84 07       	cpc	r24, r20
     d1e:	95 07       	cpc	r25, r21
     d20:	20 f0       	brcs	.+8      	; 0xd2a <__addsf3x+0x1c>
     d22:	79 f4       	brne	.+30     	; 0xd42 <__addsf3x+0x34>
     d24:	a6 f5       	brtc	.+104    	; 0xd8e <__addsf3x+0x80>
     d26:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_zero>
     d2a:	0e f4       	brtc	.+2      	; 0xd2e <__addsf3x+0x20>
     d2c:	e0 95       	com	r30
     d2e:	0b 2e       	mov	r0, r27
     d30:	ba 2f       	mov	r27, r26
     d32:	a0 2d       	mov	r26, r0
     d34:	0b 01       	movw	r0, r22
     d36:	b9 01       	movw	r22, r18
     d38:	90 01       	movw	r18, r0
     d3a:	0c 01       	movw	r0, r24
     d3c:	ca 01       	movw	r24, r20
     d3e:	a0 01       	movw	r20, r0
     d40:	11 24       	eor	r1, r1
     d42:	ff 27       	eor	r31, r31
     d44:	59 1b       	sub	r21, r25
     d46:	99 f0       	breq	.+38     	; 0xd6e <__addsf3x+0x60>
     d48:	59 3f       	cpi	r21, 0xF9	; 249
     d4a:	50 f4       	brcc	.+20     	; 0xd60 <__addsf3x+0x52>
     d4c:	50 3e       	cpi	r21, 0xE0	; 224
     d4e:	68 f1       	brcs	.+90     	; 0xdaa <__addsf3x+0x9c>
     d50:	1a 16       	cp	r1, r26
     d52:	f0 40       	sbci	r31, 0x00	; 0
     d54:	a2 2f       	mov	r26, r18
     d56:	23 2f       	mov	r18, r19
     d58:	34 2f       	mov	r19, r20
     d5a:	44 27       	eor	r20, r20
     d5c:	58 5f       	subi	r21, 0xF8	; 248
     d5e:	f3 cf       	rjmp	.-26     	; 0xd46 <__addsf3x+0x38>
     d60:	46 95       	lsr	r20
     d62:	37 95       	ror	r19
     d64:	27 95       	ror	r18
     d66:	a7 95       	ror	r26
     d68:	f0 40       	sbci	r31, 0x00	; 0
     d6a:	53 95       	inc	r21
     d6c:	c9 f7       	brne	.-14     	; 0xd60 <__addsf3x+0x52>
     d6e:	7e f4       	brtc	.+30     	; 0xd8e <__addsf3x+0x80>
     d70:	1f 16       	cp	r1, r31
     d72:	ba 0b       	sbc	r27, r26
     d74:	62 0b       	sbc	r22, r18
     d76:	73 0b       	sbc	r23, r19
     d78:	84 0b       	sbc	r24, r20
     d7a:	ba f0       	brmi	.+46     	; 0xdaa <__addsf3x+0x9c>
     d7c:	91 50       	subi	r25, 0x01	; 1
     d7e:	a1 f0       	breq	.+40     	; 0xda8 <__addsf3x+0x9a>
     d80:	ff 0f       	add	r31, r31
     d82:	bb 1f       	adc	r27, r27
     d84:	66 1f       	adc	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	88 1f       	adc	r24, r24
     d8a:	c2 f7       	brpl	.-16     	; 0xd7c <__addsf3x+0x6e>
     d8c:	0e c0       	rjmp	.+28     	; 0xdaa <__addsf3x+0x9c>
     d8e:	ba 0f       	add	r27, r26
     d90:	62 1f       	adc	r22, r18
     d92:	73 1f       	adc	r23, r19
     d94:	84 1f       	adc	r24, r20
     d96:	48 f4       	brcc	.+18     	; 0xdaa <__addsf3x+0x9c>
     d98:	87 95       	ror	r24
     d9a:	77 95       	ror	r23
     d9c:	67 95       	ror	r22
     d9e:	b7 95       	ror	r27
     da0:	f7 95       	ror	r31
     da2:	9e 3f       	cpi	r25, 0xFE	; 254
     da4:	08 f0       	brcs	.+2      	; 0xda8 <__addsf3x+0x9a>
     da6:	b0 cf       	rjmp	.-160    	; 0xd08 <__addsf3+0x28>
     da8:	93 95       	inc	r25
     daa:	88 0f       	add	r24, r24
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <__addsf3x+0xa2>
     dae:	99 27       	eor	r25, r25
     db0:	ee 0f       	add	r30, r30
     db2:	97 95       	ror	r25
     db4:	87 95       	ror	r24
     db6:	08 95       	ret

00000db8 <__divsf3>:
     db8:	0e 94 f0 06 	call	0xde0	; 0xde0 <__divsf3x>
     dbc:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_round>
     dc0:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_pscB>
     dc4:	58 f0       	brcs	.+22     	; 0xddc <__divsf3+0x24>
     dc6:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_pscA>
     dca:	40 f0       	brcs	.+16     	; 0xddc <__divsf3+0x24>
     dcc:	29 f4       	brne	.+10     	; 0xdd8 <__divsf3+0x20>
     dce:	5f 3f       	cpi	r21, 0xFF	; 255
     dd0:	29 f0       	breq	.+10     	; 0xddc <__divsf3+0x24>
     dd2:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_inf>
     dd6:	51 11       	cpse	r21, r1
     dd8:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_szero>
     ddc:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_nan>

00000de0 <__divsf3x>:
     de0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_split3>
     de4:	68 f3       	brcs	.-38     	; 0xdc0 <__divsf3+0x8>

00000de6 <__divsf3_pse>:
     de6:	99 23       	and	r25, r25
     de8:	b1 f3       	breq	.-20     	; 0xdd6 <__divsf3+0x1e>
     dea:	55 23       	and	r21, r21
     dec:	91 f3       	breq	.-28     	; 0xdd2 <__divsf3+0x1a>
     dee:	95 1b       	sub	r25, r21
     df0:	55 0b       	sbc	r21, r21
     df2:	bb 27       	eor	r27, r27
     df4:	aa 27       	eor	r26, r26
     df6:	62 17       	cp	r22, r18
     df8:	73 07       	cpc	r23, r19
     dfa:	84 07       	cpc	r24, r20
     dfc:	38 f0       	brcs	.+14     	; 0xe0c <__divsf3_pse+0x26>
     dfe:	9f 5f       	subi	r25, 0xFF	; 255
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	22 0f       	add	r18, r18
     e04:	33 1f       	adc	r19, r19
     e06:	44 1f       	adc	r20, r20
     e08:	aa 1f       	adc	r26, r26
     e0a:	a9 f3       	breq	.-22     	; 0xdf6 <__divsf3_pse+0x10>
     e0c:	35 d0       	rcall	.+106    	; 0xe78 <__divsf3_pse+0x92>
     e0e:	0e 2e       	mov	r0, r30
     e10:	3a f0       	brmi	.+14     	; 0xe20 <__divsf3_pse+0x3a>
     e12:	e0 e8       	ldi	r30, 0x80	; 128
     e14:	32 d0       	rcall	.+100    	; 0xe7a <__divsf3_pse+0x94>
     e16:	91 50       	subi	r25, 0x01	; 1
     e18:	50 40       	sbci	r21, 0x00	; 0
     e1a:	e6 95       	lsr	r30
     e1c:	00 1c       	adc	r0, r0
     e1e:	ca f7       	brpl	.-14     	; 0xe12 <__divsf3_pse+0x2c>
     e20:	2b d0       	rcall	.+86     	; 0xe78 <__divsf3_pse+0x92>
     e22:	fe 2f       	mov	r31, r30
     e24:	29 d0       	rcall	.+82     	; 0xe78 <__divsf3_pse+0x92>
     e26:	66 0f       	add	r22, r22
     e28:	77 1f       	adc	r23, r23
     e2a:	88 1f       	adc	r24, r24
     e2c:	bb 1f       	adc	r27, r27
     e2e:	26 17       	cp	r18, r22
     e30:	37 07       	cpc	r19, r23
     e32:	48 07       	cpc	r20, r24
     e34:	ab 07       	cpc	r26, r27
     e36:	b0 e8       	ldi	r27, 0x80	; 128
     e38:	09 f0       	breq	.+2      	; 0xe3c <__divsf3_pse+0x56>
     e3a:	bb 0b       	sbc	r27, r27
     e3c:	80 2d       	mov	r24, r0
     e3e:	bf 01       	movw	r22, r30
     e40:	ff 27       	eor	r31, r31
     e42:	93 58       	subi	r25, 0x83	; 131
     e44:	5f 4f       	sbci	r21, 0xFF	; 255
     e46:	3a f0       	brmi	.+14     	; 0xe56 <__divsf3_pse+0x70>
     e48:	9e 3f       	cpi	r25, 0xFE	; 254
     e4a:	51 05       	cpc	r21, r1
     e4c:	78 f0       	brcs	.+30     	; 0xe6c <__divsf3_pse+0x86>
     e4e:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_inf>
     e52:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_szero>
     e56:	5f 3f       	cpi	r21, 0xFF	; 255
     e58:	e4 f3       	brlt	.-8      	; 0xe52 <__divsf3_pse+0x6c>
     e5a:	98 3e       	cpi	r25, 0xE8	; 232
     e5c:	d4 f3       	brlt	.-12     	; 0xe52 <__divsf3_pse+0x6c>
     e5e:	86 95       	lsr	r24
     e60:	77 95       	ror	r23
     e62:	67 95       	ror	r22
     e64:	b7 95       	ror	r27
     e66:	f7 95       	ror	r31
     e68:	9f 5f       	subi	r25, 0xFF	; 255
     e6a:	c9 f7       	brne	.-14     	; 0xe5e <__divsf3_pse+0x78>
     e6c:	88 0f       	add	r24, r24
     e6e:	91 1d       	adc	r25, r1
     e70:	96 95       	lsr	r25
     e72:	87 95       	ror	r24
     e74:	97 f9       	bld	r25, 7
     e76:	08 95       	ret
     e78:	e1 e0       	ldi	r30, 0x01	; 1
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	88 1f       	adc	r24, r24
     e80:	bb 1f       	adc	r27, r27
     e82:	62 17       	cp	r22, r18
     e84:	73 07       	cpc	r23, r19
     e86:	84 07       	cpc	r24, r20
     e88:	ba 07       	cpc	r27, r26
     e8a:	20 f0       	brcs	.+8      	; 0xe94 <__divsf3_pse+0xae>
     e8c:	62 1b       	sub	r22, r18
     e8e:	73 0b       	sbc	r23, r19
     e90:	84 0b       	sbc	r24, r20
     e92:	ba 0b       	sbc	r27, r26
     e94:	ee 1f       	adc	r30, r30
     e96:	88 f7       	brcc	.-30     	; 0xe7a <__divsf3_pse+0x94>
     e98:	e0 95       	com	r30
     e9a:	08 95       	ret

00000e9c <__fixunssfsi>:
     e9c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_splitA>
     ea0:	88 f0       	brcs	.+34     	; 0xec4 <__fixunssfsi+0x28>
     ea2:	9f 57       	subi	r25, 0x7F	; 127
     ea4:	98 f0       	brcs	.+38     	; 0xecc <__fixunssfsi+0x30>
     ea6:	b9 2f       	mov	r27, r25
     ea8:	99 27       	eor	r25, r25
     eaa:	b7 51       	subi	r27, 0x17	; 23
     eac:	b0 f0       	brcs	.+44     	; 0xeda <__fixunssfsi+0x3e>
     eae:	e1 f0       	breq	.+56     	; 0xee8 <__fixunssfsi+0x4c>
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	1a f0       	brmi	.+6      	; 0xec0 <__fixunssfsi+0x24>
     eba:	ba 95       	dec	r27
     ebc:	c9 f7       	brne	.-14     	; 0xeb0 <__fixunssfsi+0x14>
     ebe:	14 c0       	rjmp	.+40     	; 0xee8 <__fixunssfsi+0x4c>
     ec0:	b1 30       	cpi	r27, 0x01	; 1
     ec2:	91 f0       	breq	.+36     	; 0xee8 <__fixunssfsi+0x4c>
     ec4:	0e 94 04 08 	call	0x1008	; 0x1008 <__fp_zero>
     ec8:	b1 e0       	ldi	r27, 0x01	; 1
     eca:	08 95       	ret
     ecc:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_zero>
     ed0:	67 2f       	mov	r22, r23
     ed2:	78 2f       	mov	r23, r24
     ed4:	88 27       	eor	r24, r24
     ed6:	b8 5f       	subi	r27, 0xF8	; 248
     ed8:	39 f0       	breq	.+14     	; 0xee8 <__fixunssfsi+0x4c>
     eda:	b9 3f       	cpi	r27, 0xF9	; 249
     edc:	cc f3       	brlt	.-14     	; 0xed0 <__fixunssfsi+0x34>
     ede:	86 95       	lsr	r24
     ee0:	77 95       	ror	r23
     ee2:	67 95       	ror	r22
     ee4:	b3 95       	inc	r27
     ee6:	d9 f7       	brne	.-10     	; 0xede <__fixunssfsi+0x42>
     ee8:	3e f4       	brtc	.+14     	; 0xef8 <__fixunssfsi+0x5c>
     eea:	90 95       	com	r25
     eec:	80 95       	com	r24
     eee:	70 95       	com	r23
     ef0:	61 95       	neg	r22
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	8f 4f       	sbci	r24, 0xFF	; 255
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	08 95       	ret

00000efa <__floatunsisf>:
     efa:	e8 94       	clt
     efc:	09 c0       	rjmp	.+18     	; 0xf10 <__floatsisf+0x12>

00000efe <__floatsisf>:
     efe:	97 fb       	bst	r25, 7
     f00:	3e f4       	brtc	.+14     	; 0xf10 <__floatsisf+0x12>
     f02:	90 95       	com	r25
     f04:	80 95       	com	r24
     f06:	70 95       	com	r23
     f08:	61 95       	neg	r22
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	99 23       	and	r25, r25
     f12:	a9 f0       	breq	.+42     	; 0xf3e <__floatsisf+0x40>
     f14:	f9 2f       	mov	r31, r25
     f16:	96 e9       	ldi	r25, 0x96	; 150
     f18:	bb 27       	eor	r27, r27
     f1a:	93 95       	inc	r25
     f1c:	f6 95       	lsr	r31
     f1e:	87 95       	ror	r24
     f20:	77 95       	ror	r23
     f22:	67 95       	ror	r22
     f24:	b7 95       	ror	r27
     f26:	f1 11       	cpse	r31, r1
     f28:	f8 cf       	rjmp	.-16     	; 0xf1a <__floatsisf+0x1c>
     f2a:	fa f4       	brpl	.+62     	; 0xf6a <__floatsisf+0x6c>
     f2c:	bb 0f       	add	r27, r27
     f2e:	11 f4       	brne	.+4      	; 0xf34 <__floatsisf+0x36>
     f30:	60 ff       	sbrs	r22, 0
     f32:	1b c0       	rjmp	.+54     	; 0xf6a <__floatsisf+0x6c>
     f34:	6f 5f       	subi	r22, 0xFF	; 255
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	8f 4f       	sbci	r24, 0xFF	; 255
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	16 c0       	rjmp	.+44     	; 0xf6a <__floatsisf+0x6c>
     f3e:	88 23       	and	r24, r24
     f40:	11 f0       	breq	.+4      	; 0xf46 <__floatsisf+0x48>
     f42:	96 e9       	ldi	r25, 0x96	; 150
     f44:	11 c0       	rjmp	.+34     	; 0xf68 <__floatsisf+0x6a>
     f46:	77 23       	and	r23, r23
     f48:	21 f0       	breq	.+8      	; 0xf52 <__floatsisf+0x54>
     f4a:	9e e8       	ldi	r25, 0x8E	; 142
     f4c:	87 2f       	mov	r24, r23
     f4e:	76 2f       	mov	r23, r22
     f50:	05 c0       	rjmp	.+10     	; 0xf5c <__floatsisf+0x5e>
     f52:	66 23       	and	r22, r22
     f54:	71 f0       	breq	.+28     	; 0xf72 <__floatsisf+0x74>
     f56:	96 e8       	ldi	r25, 0x86	; 134
     f58:	86 2f       	mov	r24, r22
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	2a f0       	brmi	.+10     	; 0xf6a <__floatsisf+0x6c>
     f60:	9a 95       	dec	r25
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	88 1f       	adc	r24, r24
     f68:	da f7       	brpl	.-10     	; 0xf60 <__floatsisf+0x62>
     f6a:	88 0f       	add	r24, r24
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	97 f9       	bld	r25, 7
     f72:	08 95       	ret

00000f74 <__fp_inf>:
     f74:	97 f9       	bld	r25, 7
     f76:	9f 67       	ori	r25, 0x7F	; 127
     f78:	80 e8       	ldi	r24, 0x80	; 128
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	08 95       	ret

00000f80 <__fp_nan>:
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	80 ec       	ldi	r24, 0xC0	; 192
     f84:	08 95       	ret

00000f86 <__fp_pscA>:
     f86:	00 24       	eor	r0, r0
     f88:	0a 94       	dec	r0
     f8a:	16 16       	cp	r1, r22
     f8c:	17 06       	cpc	r1, r23
     f8e:	18 06       	cpc	r1, r24
     f90:	09 06       	cpc	r0, r25
     f92:	08 95       	ret

00000f94 <__fp_pscB>:
     f94:	00 24       	eor	r0, r0
     f96:	0a 94       	dec	r0
     f98:	12 16       	cp	r1, r18
     f9a:	13 06       	cpc	r1, r19
     f9c:	14 06       	cpc	r1, r20
     f9e:	05 06       	cpc	r0, r21
     fa0:	08 95       	ret

00000fa2 <__fp_round>:
     fa2:	09 2e       	mov	r0, r25
     fa4:	03 94       	inc	r0
     fa6:	00 0c       	add	r0, r0
     fa8:	11 f4       	brne	.+4      	; 0xfae <__fp_round+0xc>
     faa:	88 23       	and	r24, r24
     fac:	52 f0       	brmi	.+20     	; 0xfc2 <__fp_round+0x20>
     fae:	bb 0f       	add	r27, r27
     fb0:	40 f4       	brcc	.+16     	; 0xfc2 <__fp_round+0x20>
     fb2:	bf 2b       	or	r27, r31
     fb4:	11 f4       	brne	.+4      	; 0xfba <__fp_round+0x18>
     fb6:	60 ff       	sbrs	r22, 0
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <__fp_round+0x20>
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	8f 4f       	sbci	r24, 0xFF	; 255
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	08 95       	ret

00000fc4 <__fp_split3>:
     fc4:	57 fd       	sbrc	r21, 7
     fc6:	90 58       	subi	r25, 0x80	; 128
     fc8:	44 0f       	add	r20, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	59 f0       	breq	.+22     	; 0xfe4 <__fp_splitA+0x10>
     fce:	5f 3f       	cpi	r21, 0xFF	; 255
     fd0:	71 f0       	breq	.+28     	; 0xfee <__fp_splitA+0x1a>
     fd2:	47 95       	ror	r20

00000fd4 <__fp_splitA>:
     fd4:	88 0f       	add	r24, r24
     fd6:	97 fb       	bst	r25, 7
     fd8:	99 1f       	adc	r25, r25
     fda:	61 f0       	breq	.+24     	; 0xff4 <__fp_splitA+0x20>
     fdc:	9f 3f       	cpi	r25, 0xFF	; 255
     fde:	79 f0       	breq	.+30     	; 0xffe <__fp_splitA+0x2a>
     fe0:	87 95       	ror	r24
     fe2:	08 95       	ret
     fe4:	12 16       	cp	r1, r18
     fe6:	13 06       	cpc	r1, r19
     fe8:	14 06       	cpc	r1, r20
     fea:	55 1f       	adc	r21, r21
     fec:	f2 cf       	rjmp	.-28     	; 0xfd2 <__fp_split3+0xe>
     fee:	46 95       	lsr	r20
     ff0:	f1 df       	rcall	.-30     	; 0xfd4 <__fp_splitA>
     ff2:	08 c0       	rjmp	.+16     	; 0x1004 <__fp_splitA+0x30>
     ff4:	16 16       	cp	r1, r22
     ff6:	17 06       	cpc	r1, r23
     ff8:	18 06       	cpc	r1, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	f1 cf       	rjmp	.-30     	; 0xfe0 <__fp_splitA+0xc>
     ffe:	86 95       	lsr	r24
    1000:	71 05       	cpc	r23, r1
    1002:	61 05       	cpc	r22, r1
    1004:	08 94       	sec
    1006:	08 95       	ret

00001008 <__fp_zero>:
    1008:	e8 94       	clt

0000100a <__fp_szero>:
    100a:	bb 27       	eor	r27, r27
    100c:	66 27       	eor	r22, r22
    100e:	77 27       	eor	r23, r23
    1010:	cb 01       	movw	r24, r22
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret

00001016 <__mulsf3>:
    1016:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3x>
    101a:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_round>
    101e:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_pscA>
    1022:	38 f0       	brcs	.+14     	; 0x1032 <__mulsf3+0x1c>
    1024:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_pscB>
    1028:	20 f0       	brcs	.+8      	; 0x1032 <__mulsf3+0x1c>
    102a:	95 23       	and	r25, r21
    102c:	11 f0       	breq	.+4      	; 0x1032 <__mulsf3+0x1c>
    102e:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_inf>
    1032:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_nan>
    1036:	11 24       	eor	r1, r1
    1038:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_szero>

0000103c <__mulsf3x>:
    103c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_split3>
    1040:	70 f3       	brcs	.-36     	; 0x101e <__mulsf3+0x8>

00001042 <__mulsf3_pse>:
    1042:	95 9f       	mul	r25, r21
    1044:	c1 f3       	breq	.-16     	; 0x1036 <__mulsf3+0x20>
    1046:	95 0f       	add	r25, r21
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	55 1f       	adc	r21, r21
    104c:	62 9f       	mul	r22, r18
    104e:	f0 01       	movw	r30, r0
    1050:	72 9f       	mul	r23, r18
    1052:	bb 27       	eor	r27, r27
    1054:	f0 0d       	add	r31, r0
    1056:	b1 1d       	adc	r27, r1
    1058:	63 9f       	mul	r22, r19
    105a:	aa 27       	eor	r26, r26
    105c:	f0 0d       	add	r31, r0
    105e:	b1 1d       	adc	r27, r1
    1060:	aa 1f       	adc	r26, r26
    1062:	64 9f       	mul	r22, r20
    1064:	66 27       	eor	r22, r22
    1066:	b0 0d       	add	r27, r0
    1068:	a1 1d       	adc	r26, r1
    106a:	66 1f       	adc	r22, r22
    106c:	82 9f       	mul	r24, r18
    106e:	22 27       	eor	r18, r18
    1070:	b0 0d       	add	r27, r0
    1072:	a1 1d       	adc	r26, r1
    1074:	62 1f       	adc	r22, r18
    1076:	73 9f       	mul	r23, r19
    1078:	b0 0d       	add	r27, r0
    107a:	a1 1d       	adc	r26, r1
    107c:	62 1f       	adc	r22, r18
    107e:	83 9f       	mul	r24, r19
    1080:	a0 0d       	add	r26, r0
    1082:	61 1d       	adc	r22, r1
    1084:	22 1f       	adc	r18, r18
    1086:	74 9f       	mul	r23, r20
    1088:	33 27       	eor	r19, r19
    108a:	a0 0d       	add	r26, r0
    108c:	61 1d       	adc	r22, r1
    108e:	23 1f       	adc	r18, r19
    1090:	84 9f       	mul	r24, r20
    1092:	60 0d       	add	r22, r0
    1094:	21 1d       	adc	r18, r1
    1096:	82 2f       	mov	r24, r18
    1098:	76 2f       	mov	r23, r22
    109a:	6a 2f       	mov	r22, r26
    109c:	11 24       	eor	r1, r1
    109e:	9f 57       	subi	r25, 0x7F	; 127
    10a0:	50 40       	sbci	r21, 0x00	; 0
    10a2:	9a f0       	brmi	.+38     	; 0x10ca <__mulsf3_pse+0x88>
    10a4:	f1 f0       	breq	.+60     	; 0x10e2 <__mulsf3_pse+0xa0>
    10a6:	88 23       	and	r24, r24
    10a8:	4a f0       	brmi	.+18     	; 0x10bc <__mulsf3_pse+0x7a>
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	bb 1f       	adc	r27, r27
    10b0:	66 1f       	adc	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	91 50       	subi	r25, 0x01	; 1
    10b8:	50 40       	sbci	r21, 0x00	; 0
    10ba:	a9 f7       	brne	.-22     	; 0x10a6 <__mulsf3_pse+0x64>
    10bc:	9e 3f       	cpi	r25, 0xFE	; 254
    10be:	51 05       	cpc	r21, r1
    10c0:	80 f0       	brcs	.+32     	; 0x10e2 <__mulsf3_pse+0xa0>
    10c2:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_inf>
    10c6:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_szero>
    10ca:	5f 3f       	cpi	r21, 0xFF	; 255
    10cc:	e4 f3       	brlt	.-8      	; 0x10c6 <__mulsf3_pse+0x84>
    10ce:	98 3e       	cpi	r25, 0xE8	; 232
    10d0:	d4 f3       	brlt	.-12     	; 0x10c6 <__mulsf3_pse+0x84>
    10d2:	86 95       	lsr	r24
    10d4:	77 95       	ror	r23
    10d6:	67 95       	ror	r22
    10d8:	b7 95       	ror	r27
    10da:	f7 95       	ror	r31
    10dc:	e7 95       	ror	r30
    10de:	9f 5f       	subi	r25, 0xFF	; 255
    10e0:	c1 f7       	brne	.-16     	; 0x10d2 <__mulsf3_pse+0x90>
    10e2:	fe 2b       	or	r31, r30
    10e4:	88 0f       	add	r24, r24
    10e6:	91 1d       	adc	r25, r1
    10e8:	96 95       	lsr	r25
    10ea:	87 95       	ror	r24
    10ec:	97 f9       	bld	r25, 7
    10ee:	08 95       	ret

000010f0 <__udivmodsi4>:
    10f0:	a1 e2       	ldi	r26, 0x21	; 33
    10f2:	1a 2e       	mov	r1, r26
    10f4:	aa 1b       	sub	r26, r26
    10f6:	bb 1b       	sub	r27, r27
    10f8:	fd 01       	movw	r30, r26
    10fa:	0d c0       	rjmp	.+26     	; 0x1116 <__udivmodsi4_ep>

000010fc <__udivmodsi4_loop>:
    10fc:	aa 1f       	adc	r26, r26
    10fe:	bb 1f       	adc	r27, r27
    1100:	ee 1f       	adc	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	a2 17       	cp	r26, r18
    1106:	b3 07       	cpc	r27, r19
    1108:	e4 07       	cpc	r30, r20
    110a:	f5 07       	cpc	r31, r21
    110c:	20 f0       	brcs	.+8      	; 0x1116 <__udivmodsi4_ep>
    110e:	a2 1b       	sub	r26, r18
    1110:	b3 0b       	sbc	r27, r19
    1112:	e4 0b       	sbc	r30, r20
    1114:	f5 0b       	sbc	r31, r21

00001116 <__udivmodsi4_ep>:
    1116:	66 1f       	adc	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	1a 94       	dec	r1
    1120:	69 f7       	brne	.-38     	; 0x10fc <__udivmodsi4_loop>
    1122:	60 95       	com	r22
    1124:	70 95       	com	r23
    1126:	80 95       	com	r24
    1128:	90 95       	com	r25
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	bd 01       	movw	r22, r26
    1130:	cf 01       	movw	r24, r30
    1132:	08 95       	ret

00001134 <sprintf>:
    1134:	ae e0       	ldi	r26, 0x0E	; 14
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e0 ea       	ldi	r30, 0xA0	; 160
    113a:	f8 e0       	ldi	r31, 0x08	; 8
    113c:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__prologue_saves__+0x1c>
    1140:	0d 89       	ldd	r16, Y+21	; 0x15
    1142:	1e 89       	ldd	r17, Y+22	; 0x16
    1144:	86 e0       	ldi	r24, 0x06	; 6
    1146:	8c 83       	std	Y+4, r24	; 0x04
    1148:	1a 83       	std	Y+2, r17	; 0x02
    114a:	09 83       	std	Y+1, r16	; 0x01
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	9f e7       	ldi	r25, 0x7F	; 127
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	ae 01       	movw	r20, r28
    1156:	47 5e       	subi	r20, 0xE7	; 231
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	6f 89       	ldd	r22, Y+23	; 0x17
    115c:	78 8d       	ldd	r23, Y+24	; 0x18
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0e 94 bc 08 	call	0x1178	; 0x1178 <vfprintf>
    1166:	ef 81       	ldd	r30, Y+7	; 0x07
    1168:	f8 85       	ldd	r31, Y+8	; 0x08
    116a:	e0 0f       	add	r30, r16
    116c:	f1 1f       	adc	r31, r17
    116e:	10 82       	st	Z, r1
    1170:	2e 96       	adiw	r28, 0x0e	; 14
    1172:	e4 e0       	ldi	r30, 0x04	; 4
    1174:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__epilogue_restores__+0x1c>

00001178 <vfprintf>:
    1178:	ab e0       	ldi	r26, 0x0B	; 11
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e2 ec       	ldi	r30, 0xC2	; 194
    117e:	f8 e0       	ldi	r31, 0x08	; 8
    1180:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__prologue_saves__>
    1184:	6c 01       	movw	r12, r24
    1186:	7b 01       	movw	r14, r22
    1188:	8a 01       	movw	r16, r20
    118a:	fc 01       	movw	r30, r24
    118c:	17 82       	std	Z+7, r1	; 0x07
    118e:	16 82       	std	Z+6, r1	; 0x06
    1190:	83 81       	ldd	r24, Z+3	; 0x03
    1192:	81 ff       	sbrs	r24, 1
    1194:	cc c1       	rjmp	.+920    	; 0x152e <vfprintf+0x3b6>
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	3c 01       	movw	r6, r24
    119c:	f6 01       	movw	r30, r12
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	f7 01       	movw	r30, r14
    11a2:	93 fd       	sbrc	r25, 3
    11a4:	85 91       	lpm	r24, Z+
    11a6:	93 ff       	sbrs	r25, 3
    11a8:	81 91       	ld	r24, Z+
    11aa:	7f 01       	movw	r14, r30
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <vfprintf+0x3a>
    11b0:	ba c1       	rjmp	.+884    	; 0x1526 <vfprintf+0x3ae>
    11b2:	85 32       	cpi	r24, 0x25	; 37
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <vfprintf+0x4c>
    11b6:	93 fd       	sbrc	r25, 3
    11b8:	85 91       	lpm	r24, Z+
    11ba:	93 ff       	sbrs	r25, 3
    11bc:	81 91       	ld	r24, Z+
    11be:	7f 01       	movw	r14, r30
    11c0:	85 32       	cpi	r24, 0x25	; 37
    11c2:	29 f4       	brne	.+10     	; 0x11ce <vfprintf+0x56>
    11c4:	b6 01       	movw	r22, r12
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    11cc:	e7 cf       	rjmp	.-50     	; 0x119c <vfprintf+0x24>
    11ce:	91 2c       	mov	r9, r1
    11d0:	21 2c       	mov	r2, r1
    11d2:	31 2c       	mov	r3, r1
    11d4:	ff e1       	ldi	r31, 0x1F	; 31
    11d6:	f3 15       	cp	r31, r3
    11d8:	d8 f0       	brcs	.+54     	; 0x1210 <vfprintf+0x98>
    11da:	8b 32       	cpi	r24, 0x2B	; 43
    11dc:	79 f0       	breq	.+30     	; 0x11fc <vfprintf+0x84>
    11de:	38 f4       	brcc	.+14     	; 0x11ee <vfprintf+0x76>
    11e0:	80 32       	cpi	r24, 0x20	; 32
    11e2:	79 f0       	breq	.+30     	; 0x1202 <vfprintf+0x8a>
    11e4:	83 32       	cpi	r24, 0x23	; 35
    11e6:	a1 f4       	brne	.+40     	; 0x1210 <vfprintf+0x98>
    11e8:	23 2d       	mov	r18, r3
    11ea:	20 61       	ori	r18, 0x10	; 16
    11ec:	1d c0       	rjmp	.+58     	; 0x1228 <vfprintf+0xb0>
    11ee:	8d 32       	cpi	r24, 0x2D	; 45
    11f0:	61 f0       	breq	.+24     	; 0x120a <vfprintf+0x92>
    11f2:	80 33       	cpi	r24, 0x30	; 48
    11f4:	69 f4       	brne	.+26     	; 0x1210 <vfprintf+0x98>
    11f6:	23 2d       	mov	r18, r3
    11f8:	21 60       	ori	r18, 0x01	; 1
    11fa:	16 c0       	rjmp	.+44     	; 0x1228 <vfprintf+0xb0>
    11fc:	83 2d       	mov	r24, r3
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	38 2e       	mov	r3, r24
    1202:	e3 2d       	mov	r30, r3
    1204:	e4 60       	ori	r30, 0x04	; 4
    1206:	3e 2e       	mov	r3, r30
    1208:	2a c0       	rjmp	.+84     	; 0x125e <vfprintf+0xe6>
    120a:	f3 2d       	mov	r31, r3
    120c:	f8 60       	ori	r31, 0x08	; 8
    120e:	1d c0       	rjmp	.+58     	; 0x124a <vfprintf+0xd2>
    1210:	37 fc       	sbrc	r3, 7
    1212:	2d c0       	rjmp	.+90     	; 0x126e <vfprintf+0xf6>
    1214:	20 ed       	ldi	r18, 0xD0	; 208
    1216:	28 0f       	add	r18, r24
    1218:	2a 30       	cpi	r18, 0x0A	; 10
    121a:	40 f0       	brcs	.+16     	; 0x122c <vfprintf+0xb4>
    121c:	8e 32       	cpi	r24, 0x2E	; 46
    121e:	b9 f4       	brne	.+46     	; 0x124e <vfprintf+0xd6>
    1220:	36 fc       	sbrc	r3, 6
    1222:	81 c1       	rjmp	.+770    	; 0x1526 <vfprintf+0x3ae>
    1224:	23 2d       	mov	r18, r3
    1226:	20 64       	ori	r18, 0x40	; 64
    1228:	32 2e       	mov	r3, r18
    122a:	19 c0       	rjmp	.+50     	; 0x125e <vfprintf+0xe6>
    122c:	36 fe       	sbrs	r3, 6
    122e:	06 c0       	rjmp	.+12     	; 0x123c <vfprintf+0xc4>
    1230:	8a e0       	ldi	r24, 0x0A	; 10
    1232:	98 9e       	mul	r9, r24
    1234:	20 0d       	add	r18, r0
    1236:	11 24       	eor	r1, r1
    1238:	92 2e       	mov	r9, r18
    123a:	11 c0       	rjmp	.+34     	; 0x125e <vfprintf+0xe6>
    123c:	ea e0       	ldi	r30, 0x0A	; 10
    123e:	2e 9e       	mul	r2, r30
    1240:	20 0d       	add	r18, r0
    1242:	11 24       	eor	r1, r1
    1244:	22 2e       	mov	r2, r18
    1246:	f3 2d       	mov	r31, r3
    1248:	f0 62       	ori	r31, 0x20	; 32
    124a:	3f 2e       	mov	r3, r31
    124c:	08 c0       	rjmp	.+16     	; 0x125e <vfprintf+0xe6>
    124e:	8c 36       	cpi	r24, 0x6C	; 108
    1250:	21 f4       	brne	.+8      	; 0x125a <vfprintf+0xe2>
    1252:	83 2d       	mov	r24, r3
    1254:	80 68       	ori	r24, 0x80	; 128
    1256:	38 2e       	mov	r3, r24
    1258:	02 c0       	rjmp	.+4      	; 0x125e <vfprintf+0xe6>
    125a:	88 36       	cpi	r24, 0x68	; 104
    125c:	41 f4       	brne	.+16     	; 0x126e <vfprintf+0xf6>
    125e:	f7 01       	movw	r30, r14
    1260:	93 fd       	sbrc	r25, 3
    1262:	85 91       	lpm	r24, Z+
    1264:	93 ff       	sbrs	r25, 3
    1266:	81 91       	ld	r24, Z+
    1268:	7f 01       	movw	r14, r30
    126a:	81 11       	cpse	r24, r1
    126c:	b3 cf       	rjmp	.-154    	; 0x11d4 <vfprintf+0x5c>
    126e:	98 2f       	mov	r25, r24
    1270:	9f 7d       	andi	r25, 0xDF	; 223
    1272:	95 54       	subi	r25, 0x45	; 69
    1274:	93 30       	cpi	r25, 0x03	; 3
    1276:	28 f4       	brcc	.+10     	; 0x1282 <vfprintf+0x10a>
    1278:	0c 5f       	subi	r16, 0xFC	; 252
    127a:	1f 4f       	sbci	r17, 0xFF	; 255
    127c:	9f e3       	ldi	r25, 0x3F	; 63
    127e:	99 83       	std	Y+1, r25	; 0x01
    1280:	0d c0       	rjmp	.+26     	; 0x129c <vfprintf+0x124>
    1282:	83 36       	cpi	r24, 0x63	; 99
    1284:	31 f0       	breq	.+12     	; 0x1292 <vfprintf+0x11a>
    1286:	83 37       	cpi	r24, 0x73	; 115
    1288:	71 f0       	breq	.+28     	; 0x12a6 <vfprintf+0x12e>
    128a:	83 35       	cpi	r24, 0x53	; 83
    128c:	09 f0       	breq	.+2      	; 0x1290 <vfprintf+0x118>
    128e:	59 c0       	rjmp	.+178    	; 0x1342 <vfprintf+0x1ca>
    1290:	21 c0       	rjmp	.+66     	; 0x12d4 <vfprintf+0x15c>
    1292:	f8 01       	movw	r30, r16
    1294:	80 81       	ld	r24, Z
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	0e 5f       	subi	r16, 0xFE	; 254
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	88 24       	eor	r8, r8
    129e:	83 94       	inc	r8
    12a0:	91 2c       	mov	r9, r1
    12a2:	53 01       	movw	r10, r6
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <vfprintf+0x154>
    12a6:	28 01       	movw	r4, r16
    12a8:	f2 e0       	ldi	r31, 0x02	; 2
    12aa:	4f 0e       	add	r4, r31
    12ac:	51 1c       	adc	r5, r1
    12ae:	f8 01       	movw	r30, r16
    12b0:	a0 80       	ld	r10, Z
    12b2:	b1 80       	ldd	r11, Z+1	; 0x01
    12b4:	36 fe       	sbrs	r3, 6
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <vfprintf+0x146>
    12b8:	69 2d       	mov	r22, r9
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <vfprintf+0x14a>
    12be:	6f ef       	ldi	r22, 0xFF	; 255
    12c0:	7f ef       	ldi	r23, 0xFF	; 255
    12c2:	c5 01       	movw	r24, r10
    12c4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <strnlen>
    12c8:	4c 01       	movw	r8, r24
    12ca:	82 01       	movw	r16, r4
    12cc:	f3 2d       	mov	r31, r3
    12ce:	ff 77       	andi	r31, 0x7F	; 127
    12d0:	3f 2e       	mov	r3, r31
    12d2:	16 c0       	rjmp	.+44     	; 0x1300 <vfprintf+0x188>
    12d4:	28 01       	movw	r4, r16
    12d6:	22 e0       	ldi	r18, 0x02	; 2
    12d8:	42 0e       	add	r4, r18
    12da:	51 1c       	adc	r5, r1
    12dc:	f8 01       	movw	r30, r16
    12de:	a0 80       	ld	r10, Z
    12e0:	b1 80       	ldd	r11, Z+1	; 0x01
    12e2:	36 fe       	sbrs	r3, 6
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <vfprintf+0x174>
    12e6:	69 2d       	mov	r22, r9
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <vfprintf+0x178>
    12ec:	6f ef       	ldi	r22, 0xFF	; 255
    12ee:	7f ef       	ldi	r23, 0xFF	; 255
    12f0:	c5 01       	movw	r24, r10
    12f2:	0e 94 9d 0a 	call	0x153a	; 0x153a <strnlen_P>
    12f6:	4c 01       	movw	r8, r24
    12f8:	f3 2d       	mov	r31, r3
    12fa:	f0 68       	ori	r31, 0x80	; 128
    12fc:	3f 2e       	mov	r3, r31
    12fe:	82 01       	movw	r16, r4
    1300:	33 fc       	sbrc	r3, 3
    1302:	1b c0       	rjmp	.+54     	; 0x133a <vfprintf+0x1c2>
    1304:	82 2d       	mov	r24, r2
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	88 16       	cp	r8, r24
    130a:	99 06       	cpc	r9, r25
    130c:	b0 f4       	brcc	.+44     	; 0x133a <vfprintf+0x1c2>
    130e:	b6 01       	movw	r22, r12
    1310:	80 e2       	ldi	r24, 0x20	; 32
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    1318:	2a 94       	dec	r2
    131a:	f4 cf       	rjmp	.-24     	; 0x1304 <vfprintf+0x18c>
    131c:	f5 01       	movw	r30, r10
    131e:	37 fc       	sbrc	r3, 7
    1320:	85 91       	lpm	r24, Z+
    1322:	37 fe       	sbrs	r3, 7
    1324:	81 91       	ld	r24, Z+
    1326:	5f 01       	movw	r10, r30
    1328:	b6 01       	movw	r22, r12
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    1330:	21 10       	cpse	r2, r1
    1332:	2a 94       	dec	r2
    1334:	21 e0       	ldi	r18, 0x01	; 1
    1336:	82 1a       	sub	r8, r18
    1338:	91 08       	sbc	r9, r1
    133a:	81 14       	cp	r8, r1
    133c:	91 04       	cpc	r9, r1
    133e:	71 f7       	brne	.-36     	; 0x131c <vfprintf+0x1a4>
    1340:	e8 c0       	rjmp	.+464    	; 0x1512 <vfprintf+0x39a>
    1342:	84 36       	cpi	r24, 0x64	; 100
    1344:	11 f0       	breq	.+4      	; 0x134a <vfprintf+0x1d2>
    1346:	89 36       	cpi	r24, 0x69	; 105
    1348:	41 f5       	brne	.+80     	; 0x139a <vfprintf+0x222>
    134a:	f8 01       	movw	r30, r16
    134c:	37 fe       	sbrs	r3, 7
    134e:	07 c0       	rjmp	.+14     	; 0x135e <vfprintf+0x1e6>
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	0c 5f       	subi	r16, 0xFC	; 252
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	08 c0       	rjmp	.+16     	; 0x136e <vfprintf+0x1f6>
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	07 2e       	mov	r0, r23
    1364:	00 0c       	add	r0, r0
    1366:	88 0b       	sbc	r24, r24
    1368:	99 0b       	sbc	r25, r25
    136a:	0e 5f       	subi	r16, 0xFE	; 254
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	f3 2d       	mov	r31, r3
    1370:	ff 76       	andi	r31, 0x6F	; 111
    1372:	3f 2e       	mov	r3, r31
    1374:	97 ff       	sbrs	r25, 7
    1376:	09 c0       	rjmp	.+18     	; 0x138a <vfprintf+0x212>
    1378:	90 95       	com	r25
    137a:	80 95       	com	r24
    137c:	70 95       	com	r23
    137e:	61 95       	neg	r22
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	f0 68       	ori	r31, 0x80	; 128
    1388:	3f 2e       	mov	r3, r31
    138a:	2a e0       	ldi	r18, 0x0A	; 10
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	a3 01       	movw	r20, r6
    1390:	0e 94 ef 0a 	call	0x15de	; 0x15de <__ultoa_invert>
    1394:	88 2e       	mov	r8, r24
    1396:	86 18       	sub	r8, r6
    1398:	45 c0       	rjmp	.+138    	; 0x1424 <vfprintf+0x2ac>
    139a:	85 37       	cpi	r24, 0x75	; 117
    139c:	31 f4       	brne	.+12     	; 0x13aa <vfprintf+0x232>
    139e:	23 2d       	mov	r18, r3
    13a0:	2f 7e       	andi	r18, 0xEF	; 239
    13a2:	b2 2e       	mov	r11, r18
    13a4:	2a e0       	ldi	r18, 0x0A	; 10
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	25 c0       	rjmp	.+74     	; 0x13f4 <vfprintf+0x27c>
    13aa:	93 2d       	mov	r25, r3
    13ac:	99 7f       	andi	r25, 0xF9	; 249
    13ae:	b9 2e       	mov	r11, r25
    13b0:	8f 36       	cpi	r24, 0x6F	; 111
    13b2:	c1 f0       	breq	.+48     	; 0x13e4 <vfprintf+0x26c>
    13b4:	18 f4       	brcc	.+6      	; 0x13bc <vfprintf+0x244>
    13b6:	88 35       	cpi	r24, 0x58	; 88
    13b8:	79 f0       	breq	.+30     	; 0x13d8 <vfprintf+0x260>
    13ba:	b5 c0       	rjmp	.+362    	; 0x1526 <vfprintf+0x3ae>
    13bc:	80 37       	cpi	r24, 0x70	; 112
    13be:	19 f0       	breq	.+6      	; 0x13c6 <vfprintf+0x24e>
    13c0:	88 37       	cpi	r24, 0x78	; 120
    13c2:	21 f0       	breq	.+8      	; 0x13cc <vfprintf+0x254>
    13c4:	b0 c0       	rjmp	.+352    	; 0x1526 <vfprintf+0x3ae>
    13c6:	e9 2f       	mov	r30, r25
    13c8:	e0 61       	ori	r30, 0x10	; 16
    13ca:	be 2e       	mov	r11, r30
    13cc:	b4 fe       	sbrs	r11, 4
    13ce:	0d c0       	rjmp	.+26     	; 0x13ea <vfprintf+0x272>
    13d0:	fb 2d       	mov	r31, r11
    13d2:	f4 60       	ori	r31, 0x04	; 4
    13d4:	bf 2e       	mov	r11, r31
    13d6:	09 c0       	rjmp	.+18     	; 0x13ea <vfprintf+0x272>
    13d8:	34 fe       	sbrs	r3, 4
    13da:	0a c0       	rjmp	.+20     	; 0x13f0 <vfprintf+0x278>
    13dc:	29 2f       	mov	r18, r25
    13de:	26 60       	ori	r18, 0x06	; 6
    13e0:	b2 2e       	mov	r11, r18
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <vfprintf+0x278>
    13e4:	28 e0       	ldi	r18, 0x08	; 8
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <vfprintf+0x27c>
    13ea:	20 e1       	ldi	r18, 0x10	; 16
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x27c>
    13f0:	20 e1       	ldi	r18, 0x10	; 16
    13f2:	32 e0       	ldi	r19, 0x02	; 2
    13f4:	f8 01       	movw	r30, r16
    13f6:	b7 fe       	sbrs	r11, 7
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <vfprintf+0x290>
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	0c 5f       	subi	r16, 0xFC	; 252
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <vfprintf+0x29c>
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 5f       	subi	r16, 0xFE	; 254
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	a3 01       	movw	r20, r6
    1416:	0e 94 ef 0a 	call	0x15de	; 0x15de <__ultoa_invert>
    141a:	88 2e       	mov	r8, r24
    141c:	86 18       	sub	r8, r6
    141e:	fb 2d       	mov	r31, r11
    1420:	ff 77       	andi	r31, 0x7F	; 127
    1422:	3f 2e       	mov	r3, r31
    1424:	36 fe       	sbrs	r3, 6
    1426:	0d c0       	rjmp	.+26     	; 0x1442 <vfprintf+0x2ca>
    1428:	23 2d       	mov	r18, r3
    142a:	2e 7f       	andi	r18, 0xFE	; 254
    142c:	a2 2e       	mov	r10, r18
    142e:	89 14       	cp	r8, r9
    1430:	58 f4       	brcc	.+22     	; 0x1448 <vfprintf+0x2d0>
    1432:	34 fe       	sbrs	r3, 4
    1434:	0b c0       	rjmp	.+22     	; 0x144c <vfprintf+0x2d4>
    1436:	32 fc       	sbrc	r3, 2
    1438:	09 c0       	rjmp	.+18     	; 0x144c <vfprintf+0x2d4>
    143a:	83 2d       	mov	r24, r3
    143c:	8e 7e       	andi	r24, 0xEE	; 238
    143e:	a8 2e       	mov	r10, r24
    1440:	05 c0       	rjmp	.+10     	; 0x144c <vfprintf+0x2d4>
    1442:	b8 2c       	mov	r11, r8
    1444:	a3 2c       	mov	r10, r3
    1446:	03 c0       	rjmp	.+6      	; 0x144e <vfprintf+0x2d6>
    1448:	b8 2c       	mov	r11, r8
    144a:	01 c0       	rjmp	.+2      	; 0x144e <vfprintf+0x2d6>
    144c:	b9 2c       	mov	r11, r9
    144e:	a4 fe       	sbrs	r10, 4
    1450:	0f c0       	rjmp	.+30     	; 0x1470 <vfprintf+0x2f8>
    1452:	fe 01       	movw	r30, r28
    1454:	e8 0d       	add	r30, r8
    1456:	f1 1d       	adc	r31, r1
    1458:	80 81       	ld	r24, Z
    145a:	80 33       	cpi	r24, 0x30	; 48
    145c:	21 f4       	brne	.+8      	; 0x1466 <vfprintf+0x2ee>
    145e:	9a 2d       	mov	r25, r10
    1460:	99 7e       	andi	r25, 0xE9	; 233
    1462:	a9 2e       	mov	r10, r25
    1464:	09 c0       	rjmp	.+18     	; 0x1478 <vfprintf+0x300>
    1466:	a2 fe       	sbrs	r10, 2
    1468:	06 c0       	rjmp	.+12     	; 0x1476 <vfprintf+0x2fe>
    146a:	b3 94       	inc	r11
    146c:	b3 94       	inc	r11
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <vfprintf+0x300>
    1470:	8a 2d       	mov	r24, r10
    1472:	86 78       	andi	r24, 0x86	; 134
    1474:	09 f0       	breq	.+2      	; 0x1478 <vfprintf+0x300>
    1476:	b3 94       	inc	r11
    1478:	a3 fc       	sbrc	r10, 3
    147a:	11 c0       	rjmp	.+34     	; 0x149e <vfprintf+0x326>
    147c:	a0 fe       	sbrs	r10, 0
    147e:	06 c0       	rjmp	.+12     	; 0x148c <vfprintf+0x314>
    1480:	b2 14       	cp	r11, r2
    1482:	88 f4       	brcc	.+34     	; 0x14a6 <vfprintf+0x32e>
    1484:	28 0c       	add	r2, r8
    1486:	92 2c       	mov	r9, r2
    1488:	9b 18       	sub	r9, r11
    148a:	0e c0       	rjmp	.+28     	; 0x14a8 <vfprintf+0x330>
    148c:	b2 14       	cp	r11, r2
    148e:	60 f4       	brcc	.+24     	; 0x14a8 <vfprintf+0x330>
    1490:	b6 01       	movw	r22, r12
    1492:	80 e2       	ldi	r24, 0x20	; 32
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    149a:	b3 94       	inc	r11
    149c:	f7 cf       	rjmp	.-18     	; 0x148c <vfprintf+0x314>
    149e:	b2 14       	cp	r11, r2
    14a0:	18 f4       	brcc	.+6      	; 0x14a8 <vfprintf+0x330>
    14a2:	2b 18       	sub	r2, r11
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <vfprintf+0x332>
    14a6:	98 2c       	mov	r9, r8
    14a8:	21 2c       	mov	r2, r1
    14aa:	a4 fe       	sbrs	r10, 4
    14ac:	10 c0       	rjmp	.+32     	; 0x14ce <vfprintf+0x356>
    14ae:	b6 01       	movw	r22, r12
    14b0:	80 e3       	ldi	r24, 0x30	; 48
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    14b8:	a2 fe       	sbrs	r10, 2
    14ba:	17 c0       	rjmp	.+46     	; 0x14ea <vfprintf+0x372>
    14bc:	a1 fc       	sbrc	r10, 1
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <vfprintf+0x34e>
    14c0:	88 e7       	ldi	r24, 0x78	; 120
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <vfprintf+0x352>
    14c6:	88 e5       	ldi	r24, 0x58	; 88
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	b6 01       	movw	r22, r12
    14cc:	0c c0       	rjmp	.+24     	; 0x14e6 <vfprintf+0x36e>
    14ce:	8a 2d       	mov	r24, r10
    14d0:	86 78       	andi	r24, 0x86	; 134
    14d2:	59 f0       	breq	.+22     	; 0x14ea <vfprintf+0x372>
    14d4:	a1 fe       	sbrs	r10, 1
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <vfprintf+0x364>
    14d8:	8b e2       	ldi	r24, 0x2B	; 43
    14da:	01 c0       	rjmp	.+2      	; 0x14de <vfprintf+0x366>
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	a7 fc       	sbrc	r10, 7
    14e0:	8d e2       	ldi	r24, 0x2D	; 45
    14e2:	b6 01       	movw	r22, r12
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    14ea:	89 14       	cp	r8, r9
    14ec:	38 f4       	brcc	.+14     	; 0x14fc <vfprintf+0x384>
    14ee:	b6 01       	movw	r22, r12
    14f0:	80 e3       	ldi	r24, 0x30	; 48
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    14f8:	9a 94       	dec	r9
    14fa:	f7 cf       	rjmp	.-18     	; 0x14ea <vfprintf+0x372>
    14fc:	8a 94       	dec	r8
    14fe:	f3 01       	movw	r30, r6
    1500:	e8 0d       	add	r30, r8
    1502:	f1 1d       	adc	r31, r1
    1504:	80 81       	ld	r24, Z
    1506:	b6 01       	movw	r22, r12
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    150e:	81 10       	cpse	r8, r1
    1510:	f5 cf       	rjmp	.-22     	; 0x14fc <vfprintf+0x384>
    1512:	22 20       	and	r2, r2
    1514:	09 f4       	brne	.+2      	; 0x1518 <vfprintf+0x3a0>
    1516:	42 ce       	rjmp	.-892    	; 0x119c <vfprintf+0x24>
    1518:	b6 01       	movw	r22, r12
    151a:	80 e2       	ldi	r24, 0x20	; 32
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    1522:	2a 94       	dec	r2
    1524:	f6 cf       	rjmp	.-20     	; 0x1512 <vfprintf+0x39a>
    1526:	f6 01       	movw	r30, r12
    1528:	86 81       	ldd	r24, Z+6	; 0x06
    152a:	97 81       	ldd	r25, Z+7	; 0x07
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0x3ba>
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	9f ef       	ldi	r25, 0xFF	; 255
    1532:	2b 96       	adiw	r28, 0x0b	; 11
    1534:	e2 e1       	ldi	r30, 0x12	; 18
    1536:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__epilogue_restores__>

0000153a <strnlen_P>:
    153a:	fc 01       	movw	r30, r24
    153c:	05 90       	lpm	r0, Z+
    153e:	61 50       	subi	r22, 0x01	; 1
    1540:	70 40       	sbci	r23, 0x00	; 0
    1542:	01 10       	cpse	r0, r1
    1544:	d8 f7       	brcc	.-10     	; 0x153c <strnlen_P+0x2>
    1546:	80 95       	com	r24
    1548:	90 95       	com	r25
    154a:	8e 0f       	add	r24, r30
    154c:	9f 1f       	adc	r25, r31
    154e:	08 95       	ret

00001550 <strnlen>:
    1550:	fc 01       	movw	r30, r24
    1552:	61 50       	subi	r22, 0x01	; 1
    1554:	70 40       	sbci	r23, 0x00	; 0
    1556:	01 90       	ld	r0, Z+
    1558:	01 10       	cpse	r0, r1
    155a:	d8 f7       	brcc	.-10     	; 0x1552 <strnlen+0x2>
    155c:	80 95       	com	r24
    155e:	90 95       	com	r25
    1560:	8e 0f       	add	r24, r30
    1562:	9f 1f       	adc	r25, r31
    1564:	08 95       	ret

00001566 <fputc>:
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	fb 01       	movw	r30, r22
    1570:	23 81       	ldd	r18, Z+3	; 0x03
    1572:	21 fd       	sbrc	r18, 1
    1574:	03 c0       	rjmp	.+6      	; 0x157c <fputc+0x16>
    1576:	8f ef       	ldi	r24, 0xFF	; 255
    1578:	9f ef       	ldi	r25, 0xFF	; 255
    157a:	2c c0       	rjmp	.+88     	; 0x15d4 <fputc+0x6e>
    157c:	22 ff       	sbrs	r18, 2
    157e:	16 c0       	rjmp	.+44     	; 0x15ac <fputc+0x46>
    1580:	46 81       	ldd	r20, Z+6	; 0x06
    1582:	57 81       	ldd	r21, Z+7	; 0x07
    1584:	24 81       	ldd	r18, Z+4	; 0x04
    1586:	35 81       	ldd	r19, Z+5	; 0x05
    1588:	42 17       	cp	r20, r18
    158a:	53 07       	cpc	r21, r19
    158c:	44 f4       	brge	.+16     	; 0x159e <fputc+0x38>
    158e:	a0 81       	ld	r26, Z
    1590:	b1 81       	ldd	r27, Z+1	; 0x01
    1592:	9d 01       	movw	r18, r26
    1594:	2f 5f       	subi	r18, 0xFF	; 255
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	31 83       	std	Z+1, r19	; 0x01
    159a:	20 83       	st	Z, r18
    159c:	8c 93       	st	X, r24
    159e:	26 81       	ldd	r18, Z+6	; 0x06
    15a0:	37 81       	ldd	r19, Z+7	; 0x07
    15a2:	2f 5f       	subi	r18, 0xFF	; 255
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	37 83       	std	Z+7, r19	; 0x07
    15a8:	26 83       	std	Z+6, r18	; 0x06
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <fputc+0x6e>
    15ac:	8b 01       	movw	r16, r22
    15ae:	ec 01       	movw	r28, r24
    15b0:	fb 01       	movw	r30, r22
    15b2:	00 84       	ldd	r0, Z+8	; 0x08
    15b4:	f1 85       	ldd	r31, Z+9	; 0x09
    15b6:	e0 2d       	mov	r30, r0
    15b8:	09 95       	icall
    15ba:	89 2b       	or	r24, r25
    15bc:	e1 f6       	brne	.-72     	; 0x1576 <fputc+0x10>
    15be:	d8 01       	movw	r26, r16
    15c0:	16 96       	adiw	r26, 0x06	; 6
    15c2:	8d 91       	ld	r24, X+
    15c4:	9c 91       	ld	r25, X
    15c6:	17 97       	sbiw	r26, 0x07	; 7
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	17 96       	adiw	r26, 0x07	; 7
    15cc:	9c 93       	st	X, r25
    15ce:	8e 93       	st	-X, r24
    15d0:	16 97       	sbiw	r26, 0x06	; 6
    15d2:	ce 01       	movw	r24, r28
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	08 95       	ret

000015de <__ultoa_invert>:
    15de:	fa 01       	movw	r30, r20
    15e0:	aa 27       	eor	r26, r26
    15e2:	28 30       	cpi	r18, 0x08	; 8
    15e4:	51 f1       	breq	.+84     	; 0x163a <__ultoa_invert+0x5c>
    15e6:	20 31       	cpi	r18, 0x10	; 16
    15e8:	81 f1       	breq	.+96     	; 0x164a <__ultoa_invert+0x6c>
    15ea:	e8 94       	clt
    15ec:	6f 93       	push	r22
    15ee:	6e 7f       	andi	r22, 0xFE	; 254
    15f0:	6e 5f       	subi	r22, 0xFE	; 254
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	8f 4f       	sbci	r24, 0xFF	; 255
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	af 4f       	sbci	r26, 0xFF	; 255
    15fa:	b1 e0       	ldi	r27, 0x01	; 1
    15fc:	3e d0       	rcall	.+124    	; 0x167a <__ultoa_invert+0x9c>
    15fe:	b4 e0       	ldi	r27, 0x04	; 4
    1600:	3c d0       	rcall	.+120    	; 0x167a <__ultoa_invert+0x9c>
    1602:	67 0f       	add	r22, r23
    1604:	78 1f       	adc	r23, r24
    1606:	89 1f       	adc	r24, r25
    1608:	9a 1f       	adc	r25, r26
    160a:	a1 1d       	adc	r26, r1
    160c:	68 0f       	add	r22, r24
    160e:	79 1f       	adc	r23, r25
    1610:	8a 1f       	adc	r24, r26
    1612:	91 1d       	adc	r25, r1
    1614:	a1 1d       	adc	r26, r1
    1616:	6a 0f       	add	r22, r26
    1618:	71 1d       	adc	r23, r1
    161a:	81 1d       	adc	r24, r1
    161c:	91 1d       	adc	r25, r1
    161e:	a1 1d       	adc	r26, r1
    1620:	20 d0       	rcall	.+64     	; 0x1662 <__ultoa_invert+0x84>
    1622:	09 f4       	brne	.+2      	; 0x1626 <__ultoa_invert+0x48>
    1624:	68 94       	set
    1626:	3f 91       	pop	r19
    1628:	2a e0       	ldi	r18, 0x0A	; 10
    162a:	26 9f       	mul	r18, r22
    162c:	11 24       	eor	r1, r1
    162e:	30 19       	sub	r19, r0
    1630:	30 5d       	subi	r19, 0xD0	; 208
    1632:	31 93       	st	Z+, r19
    1634:	de f6       	brtc	.-74     	; 0x15ec <__ultoa_invert+0xe>
    1636:	cf 01       	movw	r24, r30
    1638:	08 95       	ret
    163a:	46 2f       	mov	r20, r22
    163c:	47 70       	andi	r20, 0x07	; 7
    163e:	40 5d       	subi	r20, 0xD0	; 208
    1640:	41 93       	st	Z+, r20
    1642:	b3 e0       	ldi	r27, 0x03	; 3
    1644:	0f d0       	rcall	.+30     	; 0x1664 <__ultoa_invert+0x86>
    1646:	c9 f7       	brne	.-14     	; 0x163a <__ultoa_invert+0x5c>
    1648:	f6 cf       	rjmp	.-20     	; 0x1636 <__ultoa_invert+0x58>
    164a:	46 2f       	mov	r20, r22
    164c:	4f 70       	andi	r20, 0x0F	; 15
    164e:	40 5d       	subi	r20, 0xD0	; 208
    1650:	4a 33       	cpi	r20, 0x3A	; 58
    1652:	18 f0       	brcs	.+6      	; 0x165a <__ultoa_invert+0x7c>
    1654:	49 5d       	subi	r20, 0xD9	; 217
    1656:	31 fd       	sbrc	r19, 1
    1658:	40 52       	subi	r20, 0x20	; 32
    165a:	41 93       	st	Z+, r20
    165c:	02 d0       	rcall	.+4      	; 0x1662 <__ultoa_invert+0x84>
    165e:	a9 f7       	brne	.-22     	; 0x164a <__ultoa_invert+0x6c>
    1660:	ea cf       	rjmp	.-44     	; 0x1636 <__ultoa_invert+0x58>
    1662:	b4 e0       	ldi	r27, 0x04	; 4
    1664:	a6 95       	lsr	r26
    1666:	97 95       	ror	r25
    1668:	87 95       	ror	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	ba 95       	dec	r27
    1670:	c9 f7       	brne	.-14     	; 0x1664 <__ultoa_invert+0x86>
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	61 05       	cpc	r22, r1
    1676:	71 05       	cpc	r23, r1
    1678:	08 95       	ret
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	0a 2e       	mov	r0, r26
    1680:	06 94       	lsr	r0
    1682:	57 95       	ror	r21
    1684:	47 95       	ror	r20
    1686:	37 95       	ror	r19
    1688:	27 95       	ror	r18
    168a:	ba 95       	dec	r27
    168c:	c9 f7       	brne	.-14     	; 0x1680 <__ultoa_invert+0xa2>
    168e:	62 0f       	add	r22, r18
    1690:	73 1f       	adc	r23, r19
    1692:	84 1f       	adc	r24, r20
    1694:	95 1f       	adc	r25, r21
    1696:	a0 1d       	adc	r26, r0
    1698:	08 95       	ret

0000169a <__prologue_saves__>:
    169a:	2f 92       	push	r2
    169c:	3f 92       	push	r3
    169e:	4f 92       	push	r4
    16a0:	5f 92       	push	r5
    16a2:	6f 92       	push	r6
    16a4:	7f 92       	push	r7
    16a6:	8f 92       	push	r8
    16a8:	9f 92       	push	r9
    16aa:	af 92       	push	r10
    16ac:	bf 92       	push	r11
    16ae:	cf 92       	push	r12
    16b0:	df 92       	push	r13
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	ca 1b       	sub	r28, r26
    16c4:	db 0b       	sbc	r29, r27
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	09 94       	ijmp

000016d2 <__epilogue_restores__>:
    16d2:	2a 88       	ldd	r2, Y+18	; 0x12
    16d4:	39 88       	ldd	r3, Y+17	; 0x11
    16d6:	48 88       	ldd	r4, Y+16	; 0x10
    16d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    16da:	6e 84       	ldd	r6, Y+14	; 0x0e
    16dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    16de:	8c 84       	ldd	r8, Y+12	; 0x0c
    16e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    16e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    16e4:	b9 84       	ldd	r11, Y+9	; 0x09
    16e6:	c8 84       	ldd	r12, Y+8	; 0x08
    16e8:	df 80       	ldd	r13, Y+7	; 0x07
    16ea:	ee 80       	ldd	r14, Y+6	; 0x06
    16ec:	fd 80       	ldd	r15, Y+5	; 0x05
    16ee:	0c 81       	ldd	r16, Y+4	; 0x04
    16f0:	1b 81       	ldd	r17, Y+3	; 0x03
    16f2:	aa 81       	ldd	r26, Y+2	; 0x02
    16f4:	b9 81       	ldd	r27, Y+1	; 0x01
    16f6:	ce 0f       	add	r28, r30
    16f8:	d1 1d       	adc	r29, r1
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	ed 01       	movw	r28, r26
    1706:	08 95       	ret

00001708 <_exit>:
    1708:	f8 94       	cli

0000170a <__stop_program>:
    170a:	ff cf       	rjmp	.-2      	; 0x170a <__stop_program>
