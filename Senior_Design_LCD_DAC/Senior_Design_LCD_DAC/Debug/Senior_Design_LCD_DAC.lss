
Senior_Design_LCD_DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00001fce  00002062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800184  00800184  000020e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030a3  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed9  00000000  00000000  000053ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001315  00000000  00000000  000062c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  000075e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fe  00000000  00000000  00007a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000176a  00000000  00000000  00008492  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009bfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 04 	jmp	0x884	; 0x884 <__ctors_end>
       4:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
       8:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
       c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      10:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      14:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_5>
      18:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      1c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      20:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      24:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      28:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      2c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      30:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      34:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      38:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      3c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      40:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      44:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      48:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      4c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      50:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      54:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      58:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      5c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      60:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      64:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      68:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      6c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      70:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      74:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      78:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      7c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      80:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      84:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      88:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      8c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      90:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      94:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      98:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      9c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      a0:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      a4:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      a8:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      ac:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>
      b0:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	00 08       	sbc	r0, r0
      b6:	0d 08       	sbc	r0, r13
      b8:	1a 08       	sbc	r1, r10
      ba:	27 08       	sbc	r2, r7
      bc:	33 08       	sbc	r3, r3
      be:	40 08       	sbc	r4, r0
      c0:	4d 08       	sbc	r4, r13
      c2:	5a 08       	sbc	r5, r10
      c4:	67 08       	sbc	r6, r7
      c6:	74 08       	sbc	r7, r4
      c8:	81 08       	sbc	r8, r1
      ca:	8d 08       	sbc	r8, r13
      cc:	9a 08       	sbc	r9, r10
      ce:	a7 08       	sbc	r10, r7
      d0:	b4 08       	sbc	r11, r4
      d2:	c1 08       	sbc	r12, r1
      d4:	ce 08       	sbc	r12, r14
      d6:	da 08       	sbc	r13, r10
      d8:	e7 08       	sbc	r14, r7
      da:	f4 08       	sbc	r15, r4
      dc:	01 09       	sbc	r16, r1
      de:	0d 09       	sbc	r16, r13
      e0:	1a 09       	sbc	r17, r10
      e2:	27 09       	sbc	r18, r7
      e4:	34 09       	sbc	r19, r4
      e6:	40 09       	sbc	r20, r0
      e8:	4d 09       	sbc	r20, r13
      ea:	5a 09       	sbc	r21, r10
      ec:	66 09       	sbc	r22, r6
      ee:	73 09       	sbc	r23, r3
      f0:	80 09       	sbc	r24, r0
      f2:	8c 09       	sbc	r24, r12
      f4:	99 09       	sbc	r25, r9
      f6:	a6 09       	sbc	r26, r6
      f8:	b2 09       	sbc	r27, r2
      fa:	bf 09       	sbc	r27, r15
      fc:	cb 09       	sbc	r28, r11
      fe:	d8 09       	sbc	r29, r8
     100:	e4 09       	sbc	r30, r4
     102:	f1 09       	sbc	r31, r1
     104:	fd 09       	sbc	r31, r13
     106:	0a 0a       	sbc	r0, r26
     108:	16 0a       	sbc	r1, r22
     10a:	23 0a       	sbc	r2, r19
     10c:	2f 0a       	sbc	r2, r31
     10e:	3b 0a       	sbc	r3, r27
     110:	48 0a       	sbc	r4, r24
     112:	54 0a       	sbc	r5, r20
     114:	60 0a       	sbc	r6, r16
     116:	6d 0a       	sbc	r6, r29
     118:	79 0a       	sbc	r7, r25
     11a:	85 0a       	sbc	r8, r21
     11c:	91 0a       	sbc	r9, r17
     11e:	9d 0a       	sbc	r9, r29
     120:	aa 0a       	sbc	r10, r26
     122:	b6 0a       	sbc	r11, r22
     124:	c2 0a       	sbc	r12, r18
     126:	ce 0a       	sbc	r12, r30
     128:	da 0a       	sbc	r13, r26
     12a:	e6 0a       	sbc	r14, r22
     12c:	f2 0a       	sbc	r15, r18
     12e:	fe 0a       	sbc	r15, r30
     130:	0a 0b       	sbc	r16, r26
     132:	16 0b       	sbc	r17, r22
     134:	22 0b       	sbc	r18, r18
     136:	2d 0b       	sbc	r18, r29
     138:	39 0b       	sbc	r19, r25
     13a:	45 0b       	sbc	r20, r21
     13c:	51 0b       	sbc	r21, r17
     13e:	5c 0b       	sbc	r21, r28
     140:	68 0b       	sbc	r22, r24
     142:	74 0b       	sbc	r23, r20
     144:	7f 0b       	sbc	r23, r31
     146:	8b 0b       	sbc	r24, r27
     148:	96 0b       	sbc	r25, r22
     14a:	a2 0b       	sbc	r26, r18
     14c:	ad 0b       	sbc	r26, r29
     14e:	b9 0b       	sbc	r27, r25
     150:	c4 0b       	sbc	r28, r20
     152:	cf 0b       	sbc	r28, r31
     154:	db 0b       	sbc	r29, r27
     156:	e6 0b       	sbc	r30, r22
     158:	f1 0b       	sbc	r31, r17
     15a:	fc 0b       	sbc	r31, r28
     15c:	07 0c       	add	r0, r7
     15e:	13 0c       	add	r1, r3
     160:	1e 0c       	add	r1, r14
     162:	29 0c       	add	r2, r9
     164:	34 0c       	add	r3, r4
     166:	3e 0c       	add	r3, r14
     168:	49 0c       	add	r4, r9
     16a:	54 0c       	add	r5, r4
     16c:	5f 0c       	add	r5, r15
     16e:	6a 0c       	add	r6, r10
     170:	74 0c       	add	r7, r4
     172:	7f 0c       	add	r7, r15
     174:	8a 0c       	add	r8, r10
     176:	94 0c       	add	r9, r4
     178:	9f 0c       	add	r9, r15
     17a:	a9 0c       	add	r10, r9
     17c:	b4 0c       	add	r11, r4
     17e:	be 0c       	add	r11, r14
     180:	c9 0c       	add	r12, r9
     182:	d3 0c       	add	r13, r3
     184:	dd 0c       	add	r13, r13
     186:	e7 0c       	add	r14, r7
     188:	f1 0c       	add	r15, r1
     18a:	fb 0c       	add	r15, r11
     18c:	06 0d       	add	r16, r6
     18e:	10 0d       	add	r17, r0
     190:	19 0d       	add	r17, r9
     192:	23 0d       	add	r18, r3
     194:	2d 0d       	add	r18, r13
     196:	37 0d       	add	r19, r7
     198:	41 0d       	add	r20, r1
     19a:	4a 0d       	add	r20, r10
     19c:	54 0d       	add	r21, r4
     19e:	5e 0d       	add	r21, r14
     1a0:	67 0d       	add	r22, r7
     1a2:	71 0d       	add	r23, r1
     1a4:	7a 0d       	add	r23, r10
     1a6:	83 0d       	add	r24, r3
     1a8:	8d 0d       	add	r24, r13
     1aa:	96 0d       	add	r25, r6
     1ac:	9f 0d       	add	r25, r15
     1ae:	a8 0d       	add	r26, r8
     1b0:	b1 0d       	add	r27, r1
     1b2:	ba 0d       	add	r27, r10
     1b4:	c3 0d       	add	r28, r3
     1b6:	cc 0d       	add	r28, r12
     1b8:	d5 0d       	add	r29, r5
     1ba:	de 0d       	add	r29, r14
     1bc:	e6 0d       	add	r30, r6
     1be:	ef 0d       	add	r30, r15
     1c0:	f8 0d       	add	r31, r8
     1c2:	00 0e       	add	r0, r16
     1c4:	09 0e       	add	r0, r25
     1c6:	11 0e       	add	r1, r17
     1c8:	19 0e       	add	r1, r25
     1ca:	22 0e       	add	r2, r18
     1cc:	2a 0e       	add	r2, r26
     1ce:	32 0e       	add	r3, r18
     1d0:	3a 0e       	add	r3, r26
     1d2:	42 0e       	add	r4, r18
     1d4:	4a 0e       	add	r4, r26
     1d6:	52 0e       	add	r5, r18
     1d8:	5a 0e       	add	r5, r26
     1da:	62 0e       	add	r6, r18
     1dc:	6a 0e       	add	r6, r26
     1de:	71 0e       	add	r7, r17
     1e0:	79 0e       	add	r7, r25
     1e2:	80 0e       	add	r8, r16
     1e4:	88 0e       	add	r8, r24
     1e6:	8f 0e       	add	r8, r31
     1e8:	97 0e       	add	r9, r23
     1ea:	9e 0e       	add	r9, r30
     1ec:	a5 0e       	add	r10, r21
     1ee:	ac 0e       	add	r10, r28
     1f0:	b3 0e       	add	r11, r19
     1f2:	ba 0e       	add	r11, r26
     1f4:	c1 0e       	add	r12, r17
     1f6:	c8 0e       	add	r12, r24
     1f8:	cf 0e       	add	r12, r31
     1fa:	d6 0e       	add	r13, r22
     1fc:	dc 0e       	add	r13, r28
     1fe:	e3 0e       	add	r14, r19
     200:	e9 0e       	add	r14, r25
     202:	f0 0e       	add	r15, r16
     204:	f6 0e       	add	r15, r22
     206:	fc 0e       	add	r15, r28
     208:	03 0f       	add	r16, r19
     20a:	09 0f       	add	r16, r25
     20c:	0f 0f       	add	r16, r31
     20e:	15 0f       	add	r17, r21
     210:	1b 0f       	add	r17, r27
     212:	21 0f       	add	r18, r17
     214:	27 0f       	add	r18, r23
     216:	2c 0f       	add	r18, r28
     218:	32 0f       	add	r19, r18
     21a:	38 0f       	add	r19, r24
     21c:	3d 0f       	add	r19, r29
     21e:	43 0f       	add	r20, r19
     220:	48 0f       	add	r20, r24
     222:	4d 0f       	add	r20, r29
     224:	52 0f       	add	r21, r18
     226:	58 0f       	add	r21, r24
     228:	5d 0f       	add	r21, r29
     22a:	62 0f       	add	r22, r18
     22c:	67 0f       	add	r22, r23
     22e:	6b 0f       	add	r22, r27
     230:	70 0f       	add	r23, r16
     232:	75 0f       	add	r23, r21
     234:	7a 0f       	add	r23, r26
     236:	7e 0f       	add	r23, r30
     238:	83 0f       	add	r24, r19
     23a:	87 0f       	add	r24, r23
     23c:	8b 0f       	add	r24, r27
     23e:	8f 0f       	add	r24, r31
     240:	94 0f       	add	r25, r20
     242:	98 0f       	add	r25, r24
     244:	9c 0f       	add	r25, r28
     246:	a0 0f       	add	r26, r16
     248:	a4 0f       	add	r26, r20
     24a:	a7 0f       	add	r26, r23
     24c:	ab 0f       	add	r26, r27
     24e:	af 0f       	add	r26, r31
     250:	b2 0f       	add	r27, r18
     252:	b6 0f       	add	r27, r22
     254:	b9 0f       	add	r27, r25
     256:	bc 0f       	add	r27, r28
     258:	c0 0f       	add	r28, r16
     25a:	c3 0f       	add	r28, r19
     25c:	c6 0f       	add	r28, r22
     25e:	c9 0f       	add	r28, r25
     260:	cc 0f       	add	r28, r28
     262:	cf 0f       	add	r28, r31
     264:	d1 0f       	add	r29, r17
     266:	d4 0f       	add	r29, r20
     268:	d7 0f       	add	r29, r23
     26a:	d9 0f       	add	r29, r25
     26c:	dc 0f       	add	r29, r28
     26e:	de 0f       	add	r29, r30
     270:	e0 0f       	add	r30, r16
     272:	e3 0f       	add	r30, r19
     274:	e5 0f       	add	r30, r21
     276:	e7 0f       	add	r30, r23
     278:	e9 0f       	add	r30, r25
     27a:	eb 0f       	add	r30, r27
     27c:	ec 0f       	add	r30, r28
     27e:	ee 0f       	add	r30, r30
     280:	f0 0f       	add	r31, r16
     282:	f1 0f       	add	r31, r17
     284:	f3 0f       	add	r31, r19
     286:	f4 0f       	add	r31, r20
     288:	f6 0f       	add	r31, r22
     28a:	f7 0f       	add	r31, r23
     28c:	f8 0f       	add	r31, r24
     28e:	f9 0f       	add	r31, r25
     290:	fa 0f       	add	r31, r26
     292:	fb 0f       	add	r31, r27
     294:	fc 0f       	add	r31, r28
     296:	fd 0f       	add	r31, r29
     298:	fd 0f       	add	r31, r29
     29a:	fe 0f       	add	r31, r30
     29c:	ff 0f       	add	r31, r31
     29e:	ff 0f       	add	r31, r31
     2a0:	ff 0f       	add	r31, r31
     2a2:	00 10       	cpse	r0, r0
     2a4:	00 10       	cpse	r0, r0
     2a6:	00 10       	cpse	r0, r0
     2a8:	00 10       	cpse	r0, r0
     2aa:	00 10       	cpse	r0, r0
     2ac:	00 10       	cpse	r0, r0
     2ae:	00 10       	cpse	r0, r0
     2b0:	ff 0f       	add	r31, r31
     2b2:	ff 0f       	add	r31, r31
     2b4:	ff 0f       	add	r31, r31
     2b6:	fe 0f       	add	r31, r30
     2b8:	fd 0f       	add	r31, r29
     2ba:	fd 0f       	add	r31, r29
     2bc:	fc 0f       	add	r31, r28
     2be:	fb 0f       	add	r31, r27
     2c0:	fa 0f       	add	r31, r26
     2c2:	f9 0f       	add	r31, r25
     2c4:	f8 0f       	add	r31, r24
     2c6:	f7 0f       	add	r31, r23
     2c8:	f6 0f       	add	r31, r22
     2ca:	f4 0f       	add	r31, r20
     2cc:	f3 0f       	add	r31, r19
     2ce:	f1 0f       	add	r31, r17
     2d0:	f0 0f       	add	r31, r16
     2d2:	ee 0f       	add	r30, r30
     2d4:	ec 0f       	add	r30, r28
     2d6:	eb 0f       	add	r30, r27
     2d8:	e9 0f       	add	r30, r25
     2da:	e7 0f       	add	r30, r23
     2dc:	e5 0f       	add	r30, r21
     2de:	e3 0f       	add	r30, r19
     2e0:	e0 0f       	add	r30, r16
     2e2:	de 0f       	add	r29, r30
     2e4:	dc 0f       	add	r29, r28
     2e6:	d9 0f       	add	r29, r25
     2e8:	d7 0f       	add	r29, r23
     2ea:	d4 0f       	add	r29, r20
     2ec:	d1 0f       	add	r29, r17
     2ee:	cf 0f       	add	r28, r31
     2f0:	cc 0f       	add	r28, r28
     2f2:	c9 0f       	add	r28, r25
     2f4:	c6 0f       	add	r28, r22
     2f6:	c3 0f       	add	r28, r19
     2f8:	c0 0f       	add	r28, r16
     2fa:	bc 0f       	add	r27, r28
     2fc:	b9 0f       	add	r27, r25
     2fe:	b6 0f       	add	r27, r22
     300:	b2 0f       	add	r27, r18
     302:	af 0f       	add	r26, r31
     304:	ab 0f       	add	r26, r27
     306:	a7 0f       	add	r26, r23
     308:	a4 0f       	add	r26, r20
     30a:	a0 0f       	add	r26, r16
     30c:	9c 0f       	add	r25, r28
     30e:	98 0f       	add	r25, r24
     310:	94 0f       	add	r25, r20
     312:	8f 0f       	add	r24, r31
     314:	8b 0f       	add	r24, r27
     316:	87 0f       	add	r24, r23
     318:	83 0f       	add	r24, r19
     31a:	7e 0f       	add	r23, r30
     31c:	7a 0f       	add	r23, r26
     31e:	75 0f       	add	r23, r21
     320:	70 0f       	add	r23, r16
     322:	6b 0f       	add	r22, r27
     324:	67 0f       	add	r22, r23
     326:	62 0f       	add	r22, r18
     328:	5d 0f       	add	r21, r29
     32a:	58 0f       	add	r21, r24
     32c:	52 0f       	add	r21, r18
     32e:	4d 0f       	add	r20, r29
     330:	48 0f       	add	r20, r24
     332:	43 0f       	add	r20, r19
     334:	3d 0f       	add	r19, r29
     336:	38 0f       	add	r19, r24
     338:	32 0f       	add	r19, r18
     33a:	2c 0f       	add	r18, r28
     33c:	27 0f       	add	r18, r23
     33e:	21 0f       	add	r18, r17
     340:	1b 0f       	add	r17, r27
     342:	15 0f       	add	r17, r21
     344:	0f 0f       	add	r16, r31
     346:	09 0f       	add	r16, r25
     348:	03 0f       	add	r16, r19
     34a:	fc 0e       	add	r15, r28
     34c:	f6 0e       	add	r15, r22
     34e:	f0 0e       	add	r15, r16
     350:	e9 0e       	add	r14, r25
     352:	e3 0e       	add	r14, r19
     354:	dc 0e       	add	r13, r28
     356:	d6 0e       	add	r13, r22
     358:	cf 0e       	add	r12, r31
     35a:	c8 0e       	add	r12, r24
     35c:	c1 0e       	add	r12, r17
     35e:	ba 0e       	add	r11, r26
     360:	b3 0e       	add	r11, r19
     362:	ac 0e       	add	r10, r28
     364:	a5 0e       	add	r10, r21
     366:	9e 0e       	add	r9, r30
     368:	97 0e       	add	r9, r23
     36a:	8f 0e       	add	r8, r31
     36c:	88 0e       	add	r8, r24
     36e:	80 0e       	add	r8, r16
     370:	79 0e       	add	r7, r25
     372:	71 0e       	add	r7, r17
     374:	6a 0e       	add	r6, r26
     376:	62 0e       	add	r6, r18
     378:	5a 0e       	add	r5, r26
     37a:	52 0e       	add	r5, r18
     37c:	4a 0e       	add	r4, r26
     37e:	42 0e       	add	r4, r18
     380:	3a 0e       	add	r3, r26
     382:	32 0e       	add	r3, r18
     384:	2a 0e       	add	r2, r26
     386:	22 0e       	add	r2, r18
     388:	19 0e       	add	r1, r25
     38a:	11 0e       	add	r1, r17
     38c:	09 0e       	add	r0, r25
     38e:	00 0e       	add	r0, r16
     390:	f8 0d       	add	r31, r8
     392:	ef 0d       	add	r30, r15
     394:	e6 0d       	add	r30, r6
     396:	de 0d       	add	r29, r14
     398:	d5 0d       	add	r29, r5
     39a:	cc 0d       	add	r28, r12
     39c:	c3 0d       	add	r28, r3
     39e:	ba 0d       	add	r27, r10
     3a0:	b1 0d       	add	r27, r1
     3a2:	a8 0d       	add	r26, r8
     3a4:	9f 0d       	add	r25, r15
     3a6:	96 0d       	add	r25, r6
     3a8:	8d 0d       	add	r24, r13
     3aa:	83 0d       	add	r24, r3
     3ac:	7a 0d       	add	r23, r10
     3ae:	71 0d       	add	r23, r1
     3b0:	67 0d       	add	r22, r7
     3b2:	5e 0d       	add	r21, r14
     3b4:	54 0d       	add	r21, r4
     3b6:	4a 0d       	add	r20, r10
     3b8:	41 0d       	add	r20, r1
     3ba:	37 0d       	add	r19, r7
     3bc:	2d 0d       	add	r18, r13
     3be:	23 0d       	add	r18, r3
     3c0:	19 0d       	add	r17, r9
     3c2:	10 0d       	add	r17, r0
     3c4:	06 0d       	add	r16, r6
     3c6:	fb 0c       	add	r15, r11
     3c8:	f1 0c       	add	r15, r1
     3ca:	e7 0c       	add	r14, r7
     3cc:	dd 0c       	add	r13, r13
     3ce:	d3 0c       	add	r13, r3
     3d0:	c9 0c       	add	r12, r9
     3d2:	be 0c       	add	r11, r14
     3d4:	b4 0c       	add	r11, r4
     3d6:	a9 0c       	add	r10, r9
     3d8:	9f 0c       	add	r9, r15
     3da:	94 0c       	add	r9, r4
     3dc:	8a 0c       	add	r8, r10
     3de:	7f 0c       	add	r7, r15
     3e0:	74 0c       	add	r7, r4
     3e2:	6a 0c       	add	r6, r10
     3e4:	5f 0c       	add	r5, r15
     3e6:	54 0c       	add	r5, r4
     3e8:	49 0c       	add	r4, r9
     3ea:	3e 0c       	add	r3, r14
     3ec:	34 0c       	add	r3, r4
     3ee:	29 0c       	add	r2, r9
     3f0:	1e 0c       	add	r1, r14
     3f2:	13 0c       	add	r1, r3
     3f4:	07 0c       	add	r0, r7
     3f6:	fc 0b       	sbc	r31, r28
     3f8:	f1 0b       	sbc	r31, r17
     3fa:	e6 0b       	sbc	r30, r22
     3fc:	db 0b       	sbc	r29, r27
     3fe:	cf 0b       	sbc	r28, r31
     400:	c4 0b       	sbc	r28, r20
     402:	b9 0b       	sbc	r27, r25
     404:	ad 0b       	sbc	r26, r29
     406:	a2 0b       	sbc	r26, r18
     408:	96 0b       	sbc	r25, r22
     40a:	8b 0b       	sbc	r24, r27
     40c:	7f 0b       	sbc	r23, r31
     40e:	74 0b       	sbc	r23, r20
     410:	68 0b       	sbc	r22, r24
     412:	5c 0b       	sbc	r21, r28
     414:	51 0b       	sbc	r21, r17
     416:	45 0b       	sbc	r20, r21
     418:	39 0b       	sbc	r19, r25
     41a:	2d 0b       	sbc	r18, r29
     41c:	22 0b       	sbc	r18, r18
     41e:	16 0b       	sbc	r17, r22
     420:	0a 0b       	sbc	r16, r26
     422:	fe 0a       	sbc	r15, r30
     424:	f2 0a       	sbc	r15, r18
     426:	e6 0a       	sbc	r14, r22
     428:	da 0a       	sbc	r13, r26
     42a:	ce 0a       	sbc	r12, r30
     42c:	c2 0a       	sbc	r12, r18
     42e:	b6 0a       	sbc	r11, r22
     430:	aa 0a       	sbc	r10, r26
     432:	9d 0a       	sbc	r9, r29
     434:	91 0a       	sbc	r9, r17
     436:	85 0a       	sbc	r8, r21
     438:	79 0a       	sbc	r7, r25
     43a:	6d 0a       	sbc	r6, r29
     43c:	60 0a       	sbc	r6, r16
     43e:	54 0a       	sbc	r5, r20
     440:	48 0a       	sbc	r4, r24
     442:	3b 0a       	sbc	r3, r27
     444:	2f 0a       	sbc	r2, r31
     446:	23 0a       	sbc	r2, r19
     448:	16 0a       	sbc	r1, r22
     44a:	0a 0a       	sbc	r0, r26
     44c:	fd 09       	sbc	r31, r13
     44e:	f1 09       	sbc	r31, r1
     450:	e4 09       	sbc	r30, r4
     452:	d8 09       	sbc	r29, r8
     454:	cb 09       	sbc	r28, r11
     456:	bf 09       	sbc	r27, r15
     458:	b2 09       	sbc	r27, r2
     45a:	a6 09       	sbc	r26, r6
     45c:	99 09       	sbc	r25, r9
     45e:	8c 09       	sbc	r24, r12
     460:	80 09       	sbc	r24, r0
     462:	73 09       	sbc	r23, r3
     464:	66 09       	sbc	r22, r6
     466:	5a 09       	sbc	r21, r10
     468:	4d 09       	sbc	r20, r13
     46a:	40 09       	sbc	r20, r0
     46c:	34 09       	sbc	r19, r4
     46e:	27 09       	sbc	r18, r7
     470:	1a 09       	sbc	r17, r10
     472:	0d 09       	sbc	r16, r13
     474:	01 09       	sbc	r16, r1
     476:	f4 08       	sbc	r15, r4
     478:	e7 08       	sbc	r14, r7
     47a:	da 08       	sbc	r13, r10
     47c:	ce 08       	sbc	r12, r14
     47e:	c1 08       	sbc	r12, r1
     480:	b4 08       	sbc	r11, r4
     482:	a7 08       	sbc	r10, r7
     484:	9a 08       	sbc	r9, r10
     486:	8d 08       	sbc	r8, r13
     488:	81 08       	sbc	r8, r1
     48a:	74 08       	sbc	r7, r4
     48c:	67 08       	sbc	r6, r7
     48e:	5a 08       	sbc	r5, r10
     490:	4d 08       	sbc	r4, r13
     492:	40 08       	sbc	r4, r0
     494:	33 08       	sbc	r3, r3
     496:	27 08       	sbc	r2, r7
     498:	1a 08       	sbc	r1, r10
     49a:	0d 08       	sbc	r0, r13
     49c:	00 08       	sbc	r0, r0
     49e:	f3 07       	cpc	r31, r19
     4a0:	e6 07       	cpc	r30, r22
     4a2:	d9 07       	cpc	r29, r25
     4a4:	cd 07       	cpc	r28, r29
     4a6:	c0 07       	cpc	r28, r16
     4a8:	b3 07       	cpc	r27, r19
     4aa:	a6 07       	cpc	r26, r22
     4ac:	99 07       	cpc	r25, r25
     4ae:	8c 07       	cpc	r24, r28
     4b0:	7f 07       	cpc	r23, r31
     4b2:	73 07       	cpc	r23, r19
     4b4:	66 07       	cpc	r22, r22
     4b6:	59 07       	cpc	r21, r25
     4b8:	4c 07       	cpc	r20, r28
     4ba:	3f 07       	cpc	r19, r31
     4bc:	32 07       	cpc	r19, r18
     4be:	26 07       	cpc	r18, r22
     4c0:	19 07       	cpc	r17, r25
     4c2:	0c 07       	cpc	r16, r28
     4c4:	ff 06       	cpc	r15, r31
     4c6:	f3 06       	cpc	r15, r19
     4c8:	e6 06       	cpc	r14, r22
     4ca:	d9 06       	cpc	r13, r25
     4cc:	cc 06       	cpc	r12, r28
     4ce:	c0 06       	cpc	r12, r16
     4d0:	b3 06       	cpc	r11, r19
     4d2:	a6 06       	cpc	r10, r22
     4d4:	9a 06       	cpc	r9, r26
     4d6:	8d 06       	cpc	r8, r29
     4d8:	80 06       	cpc	r8, r16
     4da:	74 06       	cpc	r7, r20
     4dc:	67 06       	cpc	r6, r23
     4de:	5a 06       	cpc	r5, r26
     4e0:	4e 06       	cpc	r4, r30
     4e2:	41 06       	cpc	r4, r17
     4e4:	35 06       	cpc	r3, r21
     4e6:	28 06       	cpc	r2, r24
     4e8:	1c 06       	cpc	r1, r28
     4ea:	0f 06       	cpc	r0, r31
     4ec:	03 06       	cpc	r0, r19
     4ee:	f6 05       	cpc	r31, r6
     4f0:	ea 05       	cpc	r30, r10
     4f2:	dd 05       	cpc	r29, r13
     4f4:	d1 05       	cpc	r29, r1
     4f6:	c5 05       	cpc	r28, r5
     4f8:	b8 05       	cpc	r27, r8
     4fa:	ac 05       	cpc	r26, r12
     4fc:	a0 05       	cpc	r26, r0
     4fe:	93 05       	cpc	r25, r3
     500:	87 05       	cpc	r24, r7
     502:	7b 05       	cpc	r23, r11
     504:	6f 05       	cpc	r22, r15
     506:	63 05       	cpc	r22, r3
     508:	56 05       	cpc	r21, r6
     50a:	4a 05       	cpc	r20, r10
     50c:	3e 05       	cpc	r19, r14
     50e:	32 05       	cpc	r19, r2
     510:	26 05       	cpc	r18, r6
     512:	1a 05       	cpc	r17, r10
     514:	0e 05       	cpc	r16, r14
     516:	02 05       	cpc	r16, r2
     518:	f6 04       	cpc	r15, r6
     51a:	ea 04       	cpc	r14, r10
     51c:	de 04       	cpc	r13, r14
     51e:	d3 04       	cpc	r13, r3
     520:	c7 04       	cpc	r12, r7
     522:	bb 04       	cpc	r11, r11
     524:	af 04       	cpc	r10, r15
     526:	a4 04       	cpc	r10, r4
     528:	98 04       	cpc	r9, r8
     52a:	8c 04       	cpc	r8, r12
     52c:	81 04       	cpc	r8, r1
     52e:	75 04       	cpc	r7, r5
     530:	6a 04       	cpc	r6, r10
     532:	5e 04       	cpc	r5, r14
     534:	53 04       	cpc	r5, r3
     536:	47 04       	cpc	r4, r7
     538:	3c 04       	cpc	r3, r12
     53a:	31 04       	cpc	r3, r1
     53c:	25 04       	cpc	r2, r5
     53e:	1a 04       	cpc	r1, r10
     540:	0f 04       	cpc	r0, r15
     542:	04 04       	cpc	r0, r4
     544:	f9 03       	fmulsu	r23, r17
     546:	ed 03       	fmulsu	r22, r21
     548:	e2 03       	fmuls	r22, r18
     54a:	d7 03       	fmuls	r21, r23
     54c:	cc 03       	fmulsu	r20, r20
     54e:	c2 03       	fmuls	r20, r18
     550:	b7 03       	fmuls	r19, r23
     552:	ac 03       	fmulsu	r18, r20
     554:	a1 03       	fmuls	r18, r17
     556:	96 03       	fmuls	r17, r22
     558:	8c 03       	fmulsu	r16, r20
     55a:	81 03       	fmuls	r16, r17
     55c:	76 03       	mulsu	r23, r22
     55e:	6c 03       	fmul	r22, r20
     560:	61 03       	mulsu	r22, r17
     562:	57 03       	mulsu	r21, r23
     564:	4c 03       	fmul	r20, r20
     566:	42 03       	mulsu	r20, r18
     568:	37 03       	mulsu	r19, r23
     56a:	2d 03       	fmul	r18, r21
     56c:	23 03       	mulsu	r18, r19
     56e:	19 03       	fmul	r17, r17
     570:	0f 03       	fmul	r16, r23
     572:	05 03       	mulsu	r16, r21
     574:	fa 02       	muls	r31, r26
     576:	f0 02       	muls	r31, r16
     578:	e7 02       	muls	r30, r23
     57a:	dd 02       	muls	r29, r29
     57c:	d3 02       	muls	r29, r19
     57e:	c9 02       	muls	r28, r25
     580:	bf 02       	muls	r27, r31
     582:	b6 02       	muls	r27, r22
     584:	ac 02       	muls	r26, r28
     586:	a2 02       	muls	r26, r18
     588:	99 02       	muls	r25, r25
     58a:	8f 02       	muls	r24, r31
     58c:	86 02       	muls	r24, r22
     58e:	7d 02       	muls	r23, r29
     590:	73 02       	muls	r23, r19
     592:	6a 02       	muls	r22, r26
     594:	61 02       	muls	r22, r17
     596:	58 02       	muls	r21, r24
     598:	4f 02       	muls	r20, r31
     59a:	46 02       	muls	r20, r22
     59c:	3d 02       	muls	r19, r29
     59e:	34 02       	muls	r19, r20
     5a0:	2b 02       	muls	r18, r27
     5a2:	22 02       	muls	r18, r18
     5a4:	1a 02       	muls	r17, r26
     5a6:	11 02       	muls	r17, r17
     5a8:	08 02       	muls	r16, r24
     5aa:	00 02       	muls	r16, r16
     5ac:	f7 01       	movw	r30, r14
     5ae:	ef 01       	movw	r28, r30
     5b0:	e7 01       	movw	r28, r14
     5b2:	de 01       	movw	r26, r28
     5b4:	d6 01       	movw	r26, r12
     5b6:	ce 01       	movw	r24, r28
     5b8:	c6 01       	movw	r24, r12
     5ba:	be 01       	movw	r22, r28
     5bc:	b6 01       	movw	r22, r12
     5be:	ae 01       	movw	r20, r28
     5c0:	a6 01       	movw	r20, r12
     5c2:	9e 01       	movw	r18, r28
     5c4:	96 01       	movw	r18, r12
     5c6:	8f 01       	movw	r16, r30
     5c8:	87 01       	movw	r16, r14
     5ca:	80 01       	movw	r16, r0
     5cc:	78 01       	movw	r14, r16
     5ce:	71 01       	movw	r14, r2
     5d0:	69 01       	movw	r12, r18
     5d2:	62 01       	movw	r12, r4
     5d4:	5b 01       	movw	r10, r22
     5d6:	54 01       	movw	r10, r8
     5d8:	4d 01       	movw	r8, r26
     5da:	46 01       	movw	r8, r12
     5dc:	3f 01       	movw	r6, r30
     5de:	38 01       	movw	r6, r16
     5e0:	31 01       	movw	r6, r2
     5e2:	2a 01       	movw	r4, r20
     5e4:	24 01       	movw	r4, r8
     5e6:	1d 01       	movw	r2, r26
     5e8:	17 01       	movw	r2, r14
     5ea:	10 01       	movw	r2, r0
     5ec:	0a 01       	movw	r0, r20
     5ee:	04 01       	movw	r0, r8
     5f0:	fd 00       	.word	0x00fd	; ????
     5f2:	f7 00       	.word	0x00f7	; ????
     5f4:	f1 00       	.word	0x00f1	; ????
     5f6:	eb 00       	.word	0x00eb	; ????
     5f8:	e5 00       	.word	0x00e5	; ????
     5fa:	df 00       	.word	0x00df	; ????
     5fc:	d9 00       	.word	0x00d9	; ????
     5fe:	d4 00       	.word	0x00d4	; ????
     600:	ce 00       	.word	0x00ce	; ????
     602:	c8 00       	.word	0x00c8	; ????
     604:	c3 00       	.word	0x00c3	; ????
     606:	bd 00       	.word	0x00bd	; ????
     608:	b8 00       	.word	0x00b8	; ????
     60a:	b3 00       	.word	0x00b3	; ????
     60c:	ae 00       	.word	0x00ae	; ????
     60e:	a8 00       	.word	0x00a8	; ????
     610:	a3 00       	.word	0x00a3	; ????
     612:	9e 00       	.word	0x009e	; ????
     614:	99 00       	.word	0x0099	; ????
     616:	95 00       	.word	0x0095	; ????
     618:	90 00       	.word	0x0090	; ????
     61a:	8b 00       	.word	0x008b	; ????
     61c:	86 00       	.word	0x0086	; ????
     61e:	82 00       	.word	0x0082	; ????
     620:	7d 00       	.word	0x007d	; ????
     622:	79 00       	.word	0x0079	; ????
     624:	75 00       	.word	0x0075	; ????
     626:	71 00       	.word	0x0071	; ????
     628:	6c 00       	.word	0x006c	; ????
     62a:	68 00       	.word	0x0068	; ????
     62c:	64 00       	.word	0x0064	; ????
     62e:	60 00       	.word	0x0060	; ????
     630:	5c 00       	.word	0x005c	; ????
     632:	59 00       	.word	0x0059	; ????
     634:	55 00       	.word	0x0055	; ????
     636:	51 00       	.word	0x0051	; ????
     638:	4e 00       	.word	0x004e	; ????
     63a:	4a 00       	.word	0x004a	; ????
     63c:	47 00       	.word	0x0047	; ????
     63e:	44 00       	.word	0x0044	; ????
     640:	40 00       	.word	0x0040	; ????
     642:	3d 00       	.word	0x003d	; ????
     644:	3a 00       	.word	0x003a	; ????
     646:	37 00       	.word	0x0037	; ????
     648:	34 00       	.word	0x0034	; ????
     64a:	31 00       	.word	0x0031	; ????
     64c:	2f 00       	.word	0x002f	; ????
     64e:	2c 00       	.word	0x002c	; ????
     650:	29 00       	.word	0x0029	; ????
     652:	27 00       	.word	0x0027	; ????
     654:	24 00       	.word	0x0024	; ????
     656:	22 00       	.word	0x0022	; ????
     658:	20 00       	.word	0x0020	; ????
     65a:	1d 00       	.word	0x001d	; ????
     65c:	1b 00       	.word	0x001b	; ????
     65e:	19 00       	.word	0x0019	; ????
     660:	17 00       	.word	0x0017	; ????
     662:	15 00       	.word	0x0015	; ????
     664:	14 00       	.word	0x0014	; ????
     666:	12 00       	.word	0x0012	; ????
     668:	10 00       	.word	0x0010	; ????
     66a:	0f 00       	.word	0x000f	; ????
     66c:	0d 00       	.word	0x000d	; ????
     66e:	0c 00       	.word	0x000c	; ????
     670:	0a 00       	.word	0x000a	; ????
     672:	09 00       	.word	0x0009	; ????
     674:	08 00       	.word	0x0008	; ????
     676:	07 00       	.word	0x0007	; ????
     678:	06 00       	.word	0x0006	; ????
     67a:	05 00       	.word	0x0005	; ????
     67c:	04 00       	.word	0x0004	; ????
     67e:	03 00       	.word	0x0003	; ????
     680:	03 00       	.word	0x0003	; ????
     682:	02 00       	.word	0x0002	; ????
     684:	01 00       	.word	0x0001	; ????
     686:	01 00       	.word	0x0001	; ????
     688:	01 00       	.word	0x0001	; ????
	...
     696:	00 00       	nop
     698:	01 00       	.word	0x0001	; ????
     69a:	01 00       	.word	0x0001	; ????
     69c:	01 00       	.word	0x0001	; ????
     69e:	02 00       	.word	0x0002	; ????
     6a0:	03 00       	.word	0x0003	; ????
     6a2:	03 00       	.word	0x0003	; ????
     6a4:	04 00       	.word	0x0004	; ????
     6a6:	05 00       	.word	0x0005	; ????
     6a8:	06 00       	.word	0x0006	; ????
     6aa:	07 00       	.word	0x0007	; ????
     6ac:	08 00       	.word	0x0008	; ????
     6ae:	09 00       	.word	0x0009	; ????
     6b0:	0a 00       	.word	0x000a	; ????
     6b2:	0c 00       	.word	0x000c	; ????
     6b4:	0d 00       	.word	0x000d	; ????
     6b6:	0f 00       	.word	0x000f	; ????
     6b8:	10 00       	.word	0x0010	; ????
     6ba:	12 00       	.word	0x0012	; ????
     6bc:	14 00       	.word	0x0014	; ????
     6be:	15 00       	.word	0x0015	; ????
     6c0:	17 00       	.word	0x0017	; ????
     6c2:	19 00       	.word	0x0019	; ????
     6c4:	1b 00       	.word	0x001b	; ????
     6c6:	1d 00       	.word	0x001d	; ????
     6c8:	20 00       	.word	0x0020	; ????
     6ca:	22 00       	.word	0x0022	; ????
     6cc:	24 00       	.word	0x0024	; ????
     6ce:	27 00       	.word	0x0027	; ????
     6d0:	29 00       	.word	0x0029	; ????
     6d2:	2c 00       	.word	0x002c	; ????
     6d4:	2f 00       	.word	0x002f	; ????
     6d6:	31 00       	.word	0x0031	; ????
     6d8:	34 00       	.word	0x0034	; ????
     6da:	37 00       	.word	0x0037	; ????
     6dc:	3a 00       	.word	0x003a	; ????
     6de:	3d 00       	.word	0x003d	; ????
     6e0:	40 00       	.word	0x0040	; ????
     6e2:	44 00       	.word	0x0044	; ????
     6e4:	47 00       	.word	0x0047	; ????
     6e6:	4a 00       	.word	0x004a	; ????
     6e8:	4e 00       	.word	0x004e	; ????
     6ea:	51 00       	.word	0x0051	; ????
     6ec:	55 00       	.word	0x0055	; ????
     6ee:	59 00       	.word	0x0059	; ????
     6f0:	5c 00       	.word	0x005c	; ????
     6f2:	60 00       	.word	0x0060	; ????
     6f4:	64 00       	.word	0x0064	; ????
     6f6:	68 00       	.word	0x0068	; ????
     6f8:	6c 00       	.word	0x006c	; ????
     6fa:	71 00       	.word	0x0071	; ????
     6fc:	75 00       	.word	0x0075	; ????
     6fe:	79 00       	.word	0x0079	; ????
     700:	7d 00       	.word	0x007d	; ????
     702:	82 00       	.word	0x0082	; ????
     704:	86 00       	.word	0x0086	; ????
     706:	8b 00       	.word	0x008b	; ????
     708:	90 00       	.word	0x0090	; ????
     70a:	95 00       	.word	0x0095	; ????
     70c:	99 00       	.word	0x0099	; ????
     70e:	9e 00       	.word	0x009e	; ????
     710:	a3 00       	.word	0x00a3	; ????
     712:	a8 00       	.word	0x00a8	; ????
     714:	ae 00       	.word	0x00ae	; ????
     716:	b3 00       	.word	0x00b3	; ????
     718:	b8 00       	.word	0x00b8	; ????
     71a:	bd 00       	.word	0x00bd	; ????
     71c:	c3 00       	.word	0x00c3	; ????
     71e:	c8 00       	.word	0x00c8	; ????
     720:	ce 00       	.word	0x00ce	; ????
     722:	d4 00       	.word	0x00d4	; ????
     724:	d9 00       	.word	0x00d9	; ????
     726:	df 00       	.word	0x00df	; ????
     728:	e5 00       	.word	0x00e5	; ????
     72a:	eb 00       	.word	0x00eb	; ????
     72c:	f1 00       	.word	0x00f1	; ????
     72e:	f7 00       	.word	0x00f7	; ????
     730:	fd 00       	.word	0x00fd	; ????
     732:	04 01       	movw	r0, r8
     734:	0a 01       	movw	r0, r20
     736:	10 01       	movw	r2, r0
     738:	17 01       	movw	r2, r14
     73a:	1d 01       	movw	r2, r26
     73c:	24 01       	movw	r4, r8
     73e:	2a 01       	movw	r4, r20
     740:	31 01       	movw	r6, r2
     742:	38 01       	movw	r6, r16
     744:	3f 01       	movw	r6, r30
     746:	46 01       	movw	r8, r12
     748:	4d 01       	movw	r8, r26
     74a:	54 01       	movw	r10, r8
     74c:	5b 01       	movw	r10, r22
     74e:	62 01       	movw	r12, r4
     750:	69 01       	movw	r12, r18
     752:	71 01       	movw	r14, r2
     754:	78 01       	movw	r14, r16
     756:	80 01       	movw	r16, r0
     758:	87 01       	movw	r16, r14
     75a:	8f 01       	movw	r16, r30
     75c:	96 01       	movw	r18, r12
     75e:	9e 01       	movw	r18, r28
     760:	a6 01       	movw	r20, r12
     762:	ae 01       	movw	r20, r28
     764:	b6 01       	movw	r22, r12
     766:	be 01       	movw	r22, r28
     768:	c6 01       	movw	r24, r12
     76a:	ce 01       	movw	r24, r28
     76c:	d6 01       	movw	r26, r12
     76e:	de 01       	movw	r26, r28
     770:	e7 01       	movw	r28, r14
     772:	ef 01       	movw	r28, r30
     774:	f7 01       	movw	r30, r14
     776:	00 02       	muls	r16, r16
     778:	08 02       	muls	r16, r24
     77a:	11 02       	muls	r17, r17
     77c:	1a 02       	muls	r17, r26
     77e:	22 02       	muls	r18, r18
     780:	2b 02       	muls	r18, r27
     782:	34 02       	muls	r19, r20
     784:	3d 02       	muls	r19, r29
     786:	46 02       	muls	r20, r22
     788:	4f 02       	muls	r20, r31
     78a:	58 02       	muls	r21, r24
     78c:	61 02       	muls	r22, r17
     78e:	6a 02       	muls	r22, r26
     790:	73 02       	muls	r23, r19
     792:	7d 02       	muls	r23, r29
     794:	86 02       	muls	r24, r22
     796:	8f 02       	muls	r24, r31
     798:	99 02       	muls	r25, r25
     79a:	a2 02       	muls	r26, r18
     79c:	ac 02       	muls	r26, r28
     79e:	b6 02       	muls	r27, r22
     7a0:	bf 02       	muls	r27, r31
     7a2:	c9 02       	muls	r28, r25
     7a4:	d3 02       	muls	r29, r19
     7a6:	dd 02       	muls	r29, r29
     7a8:	e7 02       	muls	r30, r23
     7aa:	f0 02       	muls	r31, r16
     7ac:	fa 02       	muls	r31, r26
     7ae:	05 03       	mulsu	r16, r21
     7b0:	0f 03       	fmul	r16, r23
     7b2:	19 03       	fmul	r17, r17
     7b4:	23 03       	mulsu	r18, r19
     7b6:	2d 03       	fmul	r18, r21
     7b8:	37 03       	mulsu	r19, r23
     7ba:	42 03       	mulsu	r20, r18
     7bc:	4c 03       	fmul	r20, r20
     7be:	57 03       	mulsu	r21, r23
     7c0:	61 03       	mulsu	r22, r17
     7c2:	6c 03       	fmul	r22, r20
     7c4:	76 03       	mulsu	r23, r22
     7c6:	81 03       	fmuls	r16, r17
     7c8:	8c 03       	fmulsu	r16, r20
     7ca:	96 03       	fmuls	r17, r22
     7cc:	a1 03       	fmuls	r18, r17
     7ce:	ac 03       	fmulsu	r18, r20
     7d0:	b7 03       	fmuls	r19, r23
     7d2:	c2 03       	fmuls	r20, r18
     7d4:	cc 03       	fmulsu	r20, r20
     7d6:	d7 03       	fmuls	r21, r23
     7d8:	e2 03       	fmuls	r22, r18
     7da:	ed 03       	fmulsu	r22, r21
     7dc:	f9 03       	fmulsu	r23, r17
     7de:	04 04       	cpc	r0, r4
     7e0:	0f 04       	cpc	r0, r15
     7e2:	1a 04       	cpc	r1, r10
     7e4:	25 04       	cpc	r2, r5
     7e6:	31 04       	cpc	r3, r1
     7e8:	3c 04       	cpc	r3, r12
     7ea:	47 04       	cpc	r4, r7
     7ec:	53 04       	cpc	r5, r3
     7ee:	5e 04       	cpc	r5, r14
     7f0:	6a 04       	cpc	r6, r10
     7f2:	75 04       	cpc	r7, r5
     7f4:	81 04       	cpc	r8, r1
     7f6:	8c 04       	cpc	r8, r12
     7f8:	98 04       	cpc	r9, r8
     7fa:	a4 04       	cpc	r10, r4
     7fc:	af 04       	cpc	r10, r15
     7fe:	bb 04       	cpc	r11, r11
     800:	c7 04       	cpc	r12, r7
     802:	d3 04       	cpc	r13, r3
     804:	de 04       	cpc	r13, r14
     806:	ea 04       	cpc	r14, r10
     808:	f6 04       	cpc	r15, r6
     80a:	02 05       	cpc	r16, r2
     80c:	0e 05       	cpc	r16, r14
     80e:	1a 05       	cpc	r17, r10
     810:	26 05       	cpc	r18, r6
     812:	32 05       	cpc	r19, r2
     814:	3e 05       	cpc	r19, r14
     816:	4a 05       	cpc	r20, r10
     818:	56 05       	cpc	r21, r6
     81a:	63 05       	cpc	r22, r3
     81c:	6f 05       	cpc	r22, r15
     81e:	7b 05       	cpc	r23, r11
     820:	87 05       	cpc	r24, r7
     822:	93 05       	cpc	r25, r3
     824:	a0 05       	cpc	r26, r0
     826:	ac 05       	cpc	r26, r12
     828:	b8 05       	cpc	r27, r8
     82a:	c5 05       	cpc	r28, r5
     82c:	d1 05       	cpc	r29, r1
     82e:	dd 05       	cpc	r29, r13
     830:	ea 05       	cpc	r30, r10
     832:	f6 05       	cpc	r31, r6
     834:	03 06       	cpc	r0, r19
     836:	0f 06       	cpc	r0, r31
     838:	1c 06       	cpc	r1, r28
     83a:	28 06       	cpc	r2, r24
     83c:	35 06       	cpc	r3, r21
     83e:	41 06       	cpc	r4, r17
     840:	4e 06       	cpc	r4, r30
     842:	5a 06       	cpc	r5, r26
     844:	67 06       	cpc	r6, r23
     846:	74 06       	cpc	r7, r20
     848:	80 06       	cpc	r8, r16
     84a:	8d 06       	cpc	r8, r29
     84c:	9a 06       	cpc	r9, r26
     84e:	a6 06       	cpc	r10, r22
     850:	b3 06       	cpc	r11, r19
     852:	c0 06       	cpc	r12, r16
     854:	cc 06       	cpc	r12, r28
     856:	d9 06       	cpc	r13, r25
     858:	e6 06       	cpc	r14, r22
     85a:	f3 06       	cpc	r15, r19
     85c:	ff 06       	cpc	r15, r31
     85e:	0c 07       	cpc	r16, r28
     860:	19 07       	cpc	r17, r25
     862:	26 07       	cpc	r18, r22
     864:	32 07       	cpc	r19, r18
     866:	3f 07       	cpc	r19, r31
     868:	4c 07       	cpc	r20, r28
     86a:	59 07       	cpc	r21, r25
     86c:	66 07       	cpc	r22, r22
     86e:	73 07       	cpc	r23, r19
     870:	7f 07       	cpc	r23, r31
     872:	8c 07       	cpc	r24, r28
     874:	99 07       	cpc	r25, r25
     876:	a6 07       	cpc	r26, r22
     878:	b3 07       	cpc	r27, r19
     87a:	c0 07       	cpc	r28, r16
     87c:	cd 07       	cpc	r28, r29
     87e:	d9 07       	cpc	r29, r25
     880:	e6 07       	cpc	r30, r22
     882:	f3 07       	cpc	r31, r19

00000884 <__ctors_end>:
     884:	11 24       	eor	r1, r1
     886:	1f be       	out	0x3f, r1	; 63
     888:	cf ef       	ldi	r28, 0xFF	; 255
     88a:	d8 e0       	ldi	r29, 0x08	; 8
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	cd bf       	out	0x3d, r28	; 61

00000890 <__do_copy_data>:
     890:	11 e0       	ldi	r17, 0x01	; 1
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b1 e0       	ldi	r27, 0x01	; 1
     896:	ee ec       	ldi	r30, 0xCE	; 206
     898:	ff e1       	ldi	r31, 0x1F	; 31
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__do_copy_data+0x10>
     89c:	05 90       	lpm	r0, Z+
     89e:	0d 92       	st	X+, r0
     8a0:	a4 38       	cpi	r26, 0x84	; 132
     8a2:	b1 07       	cpc	r27, r17
     8a4:	d9 f7       	brne	.-10     	; 0x89c <__do_copy_data+0xc>

000008a6 <__do_clear_bss>:
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	a4 e8       	ldi	r26, 0x84	; 132
     8aa:	b1 e0       	ldi	r27, 0x01	; 1
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <.do_clear_bss_start>

000008ae <.do_clear_bss_loop>:
     8ae:	1d 92       	st	X+, r1

000008b0 <.do_clear_bss_start>:
     8b0:	a7 38       	cpi	r26, 0x87	; 135
     8b2:	b2 07       	cpc	r27, r18
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <.do_clear_bss_loop>
     8b6:	0e 94 36 06 	call	0xc6c	; 0xc6c <main>
     8ba:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <_exit>

000008be <__bad_interrupt>:
     8be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008c2 <i2c_master_init>:
	data[(length-1)] = i2c_master_readNack();
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
     8c2:	9b 01       	movw	r18, r22
     8c4:	ac 01       	movw	r20, r24
     8c6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	74 e2       	ldi	r23, 0x24	; 36
     8ce:	84 ef       	ldi	r24, 0xF4	; 244
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodsi4>
     8d6:	da 01       	movw	r26, r20
     8d8:	c9 01       	movw	r24, r18
     8da:	40 97       	sbiw	r24, 0x10	; 16
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	b6 95       	lsr	r27
     8e2:	a7 95       	ror	r26
     8e4:	97 95       	ror	r25
     8e6:	87 95       	ror	r24
     8e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     8ec:	08 95       	ret

000008ee <i2c_master_start>:
     8ee:	ec eb       	ldi	r30, 0xBC	; 188
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	10 82       	st	Z, r1
     8f4:	94 ea       	ldi	r25, 0xA4	; 164
     8f6:	90 83       	st	Z, r25
     8f8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     8fc:	99 23       	and	r25, r25
     8fe:	e4 f7       	brge	.-8      	; 0x8f8 <i2c_master_start+0xa>
     900:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     904:	98 7f       	andi	r25, 0xF8	; 248
     906:	98 30       	cpi	r25, 0x08	; 8
     908:	11 f0       	breq	.+4      	; 0x90e <__stack+0xf>
     90a:	90 31       	cpi	r25, 0x10	; 16
     90c:	b1 f4       	brne	.+44     	; 0x93a <__stack+0x3b>
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	86 2b       	or	r24, r22
     916:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     91a:	84 e8       	ldi	r24, 0x84	; 132
     91c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     920:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     924:	88 23       	and	r24, r24
     926:	e4 f7       	brge	.-8      	; 0x920 <__stack+0x21>
     928:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     92c:	88 7f       	andi	r24, 0xF8	; 248
     92e:	88 31       	cpi	r24, 0x18	; 24
     930:	31 f0       	breq	.+12     	; 0x93e <__stack+0x3f>
     932:	80 34       	cpi	r24, 0x40	; 64
     934:	31 f4       	brne	.+12     	; 0x942 <__stack+0x43>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
     93a:	8a e0       	ldi	r24, 0x0A	; 10
     93c:	08 95       	ret
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	08 95       	ret
     942:	84 e1       	ldi	r24, 0x14	; 20
     944:	08 95       	ret

00000946 <i2c_master_write>:
     946:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     94a:	84 e8       	ldi	r24, 0x84	; 132
     94c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     950:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     954:	88 23       	and	r24, r24
     956:	e4 f7       	brge	.-8      	; 0x950 <i2c_master_write+0xa>
     958:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     95c:	88 7f       	andi	r24, 0xF8	; 248
     95e:	88 32       	cpi	r24, 0x28	; 40
     960:	11 f0       	breq	.+4      	; 0x966 <i2c_master_write+0x20>
     962:	85 e1       	ldi	r24, 0x15	; 21
     964:	08 95       	ret
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret

0000096a <i2c_master_stop>:
     96a:	84 e9       	ldi	r24, 0x94	; 148
     96c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     970:	08 95       	ret

00000972 <i2c_master_sendByte>:
     972:	cf 93       	push	r28
     974:	c6 2f       	mov	r28, r22
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	0e 94 77 04 	call	0x8ee	; 0x8ee <i2c_master_start>
     97c:	81 11       	cpse	r24, r1
     97e:	08 c0       	rjmp	.+16     	; 0x990 <i2c_master_sendByte+0x1e>
     980:	8c 2f       	mov	r24, r28
     982:	0e 94 a3 04 	call	0x946	; 0x946 <i2c_master_write>
     986:	81 11       	cpse	r24, r1
     988:	03 c0       	rjmp	.+6      	; 0x990 <i2c_master_sendByte+0x1e>
     98a:	0e 94 b5 04 	call	0x96a	; 0x96a <i2c_master_stop>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <I2C_Init>:

//																	DAC FUNCTIONS

void I2C_Init(void) {
	// Set the bit rate for 400 kHz I2C
	TWSR1 = 0x00;  // Prescaler set to 1
     994:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	TWBR1 = ((F_CPU / SCL_CLOCK) - 16) / 2;  // Set bit rate register for 400kHz
     998:	8c e0       	ldi	r24, 0x0C	; 12
     99a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     99e:	08 95       	ret

000009a0 <I2C_Start>:
}

void I2C_Start(void) {
	TWCR1 = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);  // Send start condition
     9a0:	84 ea       	ldi	r24, 0xA4	; 164
     9a2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
     9a6:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     9aa:	88 23       	and	r24, r24
     9ac:	e4 f7       	brge	.-8      	; 0x9a6 <I2C_Start+0x6>
}
     9ae:	08 95       	ret

000009b0 <I2C_Stop>:

// I2C Stop condition
void I2C_Stop(void) {
	TWCR1 = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);  // Send stop condition
     9b0:	84 e9       	ldi	r24, 0x94	; 148
     9b2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     9b6:	08 95       	ret

000009b8 <I2C_Write>:
}

// I2C Write byte
void I2C_Write(uint8_t data) {
	TWDR1 = data;  // Load data to data register
     9b8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);  // Start transmission
     9bc:	84 e8       	ldi	r24, 0x84	; 132
     9be:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while (!(TWCR1 & (1<<TWINT)));  // Wait for transmission to complete
     9c2:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     9c6:	88 23       	and	r24, r24
     9c8:	e4 f7       	brge	.-8      	; 0x9c2 <I2C_Write+0xa>
}
     9ca:	08 95       	ret

000009cc <MCP4725_SetValue>:

void MCP4725_SetValue(uint16_t value) {
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	c8 2f       	mov	r28, r24
     9d2:	d9 2f       	mov	r29, r25
	I2C_Start();
     9d4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <I2C_Start>
	I2C_Write(MCP4725_ADDR << 1);  // Write address with write bit (0)
     9d8:	84 ec       	ldi	r24, 0xC4	; 196
     9da:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <I2C_Write>
	I2C_Write((value >> 8) & 0x0F);  // Send upper data bits (D11-D8)
     9de:	8d 2f       	mov	r24, r29
     9e0:	8f 70       	andi	r24, 0x0F	; 15
     9e2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <I2C_Write>
	I2C_Write(value & 0xFF);  // Send lower data bits (D7-D0)
     9e6:	8c 2f       	mov	r24, r28
     9e8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <I2C_Write>
	I2C_Stop();
     9ec:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <I2C_Stop>
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
     9f6:	fc 01       	movw	r30, r24
     9f8:	23 81       	ldd	r18, Z+3	; 0x03
     9fa:	62 2b       	or	r22, r18
     9fc:	80 81       	ld	r24, Z
     9fe:	0e 94 b9 04 	call	0x972	; 0x972 <i2c_master_sendByte>
     a02:	08 95       	ret

00000a04 <lq_writeDevicePulse>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	8c 01       	movw	r16, r24
     a0c:	c6 2f       	mov	r28, r22
     a0e:	64 60       	ori	r22, 0x04	; 4
     a10:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <lq_transmitI2C>
     a14:	8a e0       	ldi	r24, 0x0A	; 10
     a16:	8a 95       	dec	r24
     a18:	f1 f7       	brne	.-4      	; 0xa16 <lq_writeDevicePulse+0x12>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <lq_writeDevicePulse+0x18>
     a1c:	6c 2f       	mov	r22, r28
     a1e:	6b 7f       	andi	r22, 0xFB	; 251
     a20:	c8 01       	movw	r24, r16
     a22:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <lq_transmitI2C>
     a26:	87 ec       	ldi	r24, 0xC7	; 199
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <lq_writeDevicePulse+0x26>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <lq_writeDevicePulse+0x2c>
     a30:	00 00       	nop
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <lq_writeDevice4Bits>:
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	ec 01       	movw	r28, r24
     a42:	16 2f       	mov	r17, r22
     a44:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <lq_transmitI2C>
     a48:	61 2f       	mov	r22, r17
     a4a:	ce 01       	movw	r24, r28
     a4c:	0e 94 02 05 	call	0xa04	; 0xa04 <lq_writeDevicePulse>
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	08 95       	ret

00000a58 <lq_writeDeviceByte>:
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	8c 01       	movw	r16, r24
     a64:	f4 2e       	mov	r15, r20
     a66:	86 2f       	mov	r24, r22
     a68:	80 7f       	andi	r24, 0xF0	; 240
     a6a:	90 e1       	ldi	r25, 0x10	; 16
     a6c:	69 9f       	mul	r22, r25
     a6e:	e0 01       	movw	r28, r0
     a70:	11 24       	eor	r1, r1
     a72:	68 2f       	mov	r22, r24
     a74:	64 2b       	or	r22, r20
     a76:	c8 01       	movw	r24, r16
     a78:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lq_writeDevice4Bits>
     a7c:	6c 2f       	mov	r22, r28
     a7e:	6f 29       	or	r22, r15
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lq_writeDevice4Bits>
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	08 95       	ret

00000a92 <lq_print>:
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	8c 01       	movw	r16, r24
     a9c:	eb 01       	movw	r28, r22
     a9e:	68 81       	ld	r22, Y
     aa0:	06 c0       	rjmp	.+12     	; 0xaae <lq_print+0x1c>
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	c8 01       	movw	r24, r16
     aa6:	0e 94 2c 05 	call	0xa58	; 0xa58 <lq_writeDeviceByte>
     aaa:	21 96       	adiw	r28, 0x01	; 1
     aac:	68 81       	ld	r22, Y
     aae:	61 11       	cpse	r22, r1
     ab0:	f8 cf       	rjmp	.-16     	; 0xaa2 <lq_print+0x10>
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <lq_sendCommand>:
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	0e 94 2c 05 	call	0xa58	; 0xa58 <lq_writeDeviceByte>
     ac2:	08 95       	ret

00000ac4 <lq_setCursor>:
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	00 d0       	rcall	.+0      	; 0xaca <lq_setCursor+0x6>
     aca:	00 d0       	rcall	.+0      	; 0xacc <lq_setCursor+0x8>
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	19 82       	std	Y+1, r1	; 0x01
     ad2:	20 e4       	ldi	r18, 0x40	; 64
     ad4:	2a 83       	std	Y+2, r18	; 0x02
     ad6:	24 e1       	ldi	r18, 0x14	; 20
     ad8:	2b 83       	std	Y+3, r18	; 0x03
     ada:	24 e5       	ldi	r18, 0x54	; 84
     adc:	2c 83       	std	Y+4, r18	; 0x04
     ade:	e1 e0       	ldi	r30, 0x01	; 1
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	ec 0f       	add	r30, r28
     ae4:	fd 1f       	adc	r31, r29
     ae6:	e6 0f       	add	r30, r22
     ae8:	f1 1d       	adc	r31, r1
     aea:	60 81       	ld	r22, Z
     aec:	64 0f       	add	r22, r20
     aee:	60 68       	ori	r22, 0x80	; 128
     af0:	0e 94 5e 05 	call	0xabc	; 0xabc <lq_sendCommand>
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <lq_clear>:
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	ec 01       	movw	r28, r24
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	0e 94 5e 05 	call	0xabc	; 0xabc <lq_sendCommand>
     b0e:	8f e3       	ldi	r24, 0x3F	; 63
     b10:	9f e1       	ldi	r25, 0x1F	; 31
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <lq_clear+0x10>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <lq_clear+0x16>
     b18:	00 00       	nop
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	ce 01       	movw	r24, r28
     b20:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <lq_returnHome>:
     b2a:	62 e0       	ldi	r22, 0x02	; 2
     b2c:	0e 94 5e 05 	call	0xabc	; 0xabc <lq_sendCommand>
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	9f e1       	ldi	r25, 0x1F	; 31
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <lq_returnHome+0xa>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <lq_returnHome+0x10>
     b3a:	00 00       	nop
     b3c:	08 95       	ret

00000b3e <lq_turnOnDisplay>:
     b3e:	fc 01       	movw	r30, r24
     b40:	65 81       	ldd	r22, Z+5	; 0x05
     b42:	26 2f       	mov	r18, r22
     b44:	24 60       	ori	r18, 0x04	; 4
     b46:	25 83       	std	Z+5, r18	; 0x05
     b48:	6c 60       	ori	r22, 0x0C	; 12
     b4a:	0e 94 5e 05 	call	0xabc	; 0xabc <lq_sendCommand>
     b4e:	08 95       	ret

00000b50 <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	2e 97       	sbiw	r28, 0x0e	; 14
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
     b64:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
     b66:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
     b68:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
     b6a:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
     b6c:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
     b76:	42 30       	cpi	r20, 0x02	; 2
     b78:	18 f0       	brcs	.+6      	; 0xb80 <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
     b7a:	82 2f       	mov	r24, r18
     b7c:	88 60       	ori	r24, 0x08	; 8
     b7e:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
     b80:	22 23       	and	r18, r18
     b82:	29 f0       	breq	.+10     	; 0xb8e <lq_init+0x3e>
     b84:	41 30       	cpi	r20, 0x01	; 1
     b86:	19 f4       	brne	.+6      	; 0xb8e <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
     b88:	8c 85       	ldd	r24, Y+12	; 0x0c
     b8a:	84 60       	ori	r24, 0x04	; 4
     b8c:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8e:	2f ef       	ldi	r18, 0xFF	; 255
     b90:	81 ee       	ldi	r24, 0xE1	; 225
     b92:	94 e0       	ldi	r25, 0x04	; 4
     b94:	21 50       	subi	r18, 0x01	; 1
     b96:	80 40       	sbci	r24, 0x00	; 0
     b98:	90 40       	sbci	r25, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <lq_init+0x44>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <lq_init+0x4e>
     b9e:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	ce 01       	movw	r24, r28
     ba4:	08 96       	adiw	r24, 0x08	; 8
     ba6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <lq_transmitI2C>
     baa:	2f ef       	ldi	r18, 0xFF	; 255
     bac:	83 ed       	ldi	r24, 0xD3	; 211
     bae:	90 e3       	ldi	r25, 0x30	; 48
     bb0:	21 50       	subi	r18, 0x01	; 1
     bb2:	80 40       	sbci	r24, 0x00	; 0
     bb4:	90 40       	sbci	r25, 0x00	; 0
     bb6:	e1 f7       	brne	.-8      	; 0xbb0 <lq_init+0x60>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <lq_init+0x6a>
     bba:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
     bbc:	60 e3       	ldi	r22, 0x30	; 48
     bbe:	ce 01       	movw	r24, r28
     bc0:	08 96       	adiw	r24, 0x08	; 8
     bc2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc6:	8f e4       	ldi	r24, 0x4F	; 79
     bc8:	96 e4       	ldi	r25, 0x46	; 70
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <lq_init+0x7a>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <lq_init+0x80>
     bd0:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
     bd2:	60 e3       	ldi	r22, 0x30	; 48
     bd4:	ce 01       	movw	r24, r28
     bd6:	08 96       	adiw	r24, 0x08	; 8
     bd8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lq_writeDevice4Bits>
     bdc:	8f e4       	ldi	r24, 0x4F	; 79
     bde:	96 e4       	ldi	r25, 0x46	; 70
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <lq_init+0x90>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <lq_init+0x96>
     be6:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
     be8:	60 e3       	ldi	r22, 0x30	; 48
     bea:	ce 01       	movw	r24, r28
     bec:	08 96       	adiw	r24, 0x08	; 8
     bee:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lq_writeDevice4Bits>
     bf2:	87 e5       	ldi	r24, 0x57	; 87
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <lq_init+0xa6>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <lq_init+0xac>
     bfc:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
     bfe:	60 e2       	ldi	r22, 0x20	; 32
     c00:	ce 01       	movw	r24, r28
     c02:	08 96       	adiw	r24, 0x08	; 8
     c04:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
     c08:	6c 85       	ldd	r22, Y+12	; 0x0c
     c0a:	60 62       	ori	r22, 0x20	; 32
     c0c:	ce 01       	movw	r24, r28
     c0e:	08 96       	adiw	r24, 0x08	; 8
     c10:	0e 94 5e 05 	call	0xabc	; 0xabc <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
     c14:	ce 01       	movw	r24, r28
     c16:	08 96       	adiw	r24, 0x08	; 8
     c18:	0e 94 9f 05 	call	0xb3e	; 0xb3e <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
     c1c:	ce 01       	movw	r24, r28
     c1e:	08 96       	adiw	r24, 0x08	; 8
     c20:	0e 94 81 05 	call	0xb02	; 0xb02 <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
     c24:	6e 85       	ldd	r22, Y+14	; 0x0e
     c26:	64 60       	ori	r22, 0x04	; 4
     c28:	ce 01       	movw	r24, r28
     c2a:	08 96       	adiw	r24, 0x08	; 8
     c2c:	0e 94 5e 05 	call	0xabc	; 0xabc <lq_sendCommand>
	
	lq_returnHome(&device);
     c30:	ce 01       	movw	r24, r28
     c32:	08 96       	adiw	r24, 0x08	; 8
     c34:	0e 94 95 05 	call	0xb2a	; 0xb2a <lq_returnHome>

	return device;
     c38:	87 e0       	ldi	r24, 0x07	; 7
     c3a:	fe 01       	movw	r30, r28
     c3c:	38 96       	adiw	r30, 0x08	; 8
     c3e:	de 01       	movw	r26, r28
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	01 90       	ld	r0, Z+
     c44:	0d 92       	st	X+, r0
     c46:	8a 95       	dec	r24
     c48:	e1 f7       	brne	.-8      	; 0xc42 <lq_init+0xf2>
     c4a:	29 81       	ldd	r18, Y+1	; 0x01
     c4c:	3a 81       	ldd	r19, Y+2	; 0x02
     c4e:	4b 81       	ldd	r20, Y+3	; 0x03
     c50:	5c 81       	ldd	r21, Y+4	; 0x04
     c52:	6d 81       	ldd	r22, Y+5	; 0x05
     c54:	7e 81       	ldd	r23, Y+6	; 0x06
};
     c56:	8f 81       	ldd	r24, Y+7	; 0x07
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	2e 96       	adiw	r28, 0x0e	; 14
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <main>:

volatile uint8_t selectPressed = 0;
volatile uint8_t upPressed = 0;
volatile uint8_t downPressed = 0;
int main(void)
{
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	ef 97       	sbiw	r28, 0x3f	; 63
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRD &= (1<<2);		//select button
     c80:	8a b1       	in	r24, 0x0a	; 10
     c82:	84 70       	andi	r24, 0x04	; 4
     c84:	8a b9       	out	0x0a, r24	; 10
	DDRD &= (1<<4);		//up button
     c86:	8a b1       	in	r24, 0x0a	; 10
     c88:	80 71       	andi	r24, 0x10	; 16
     c8a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= (1<<7);		//down button
     c8c:	8a b1       	in	r24, 0x0a	; 10
     c8e:	80 78       	andi	r24, 0x80	; 128
     c90:	8a b9       	out	0x0a, r24	; 10
	
	uint8_t vol_num = 50;		//amplitude of the tone generator
	uint8_t fsm = 0;			//state machine that determines what setting the user is on
	char vol_str[4];
	char freq_str[5];
	char waveform[3][9] = {"Sine", "Square", "Triangle"};
     c92:	8b e1       	ldi	r24, 0x1B	; 27
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f1 e0       	ldi	r31, 0x01	; 1
     c98:	de 01       	movw	r26, r28
     c9a:	1a 96       	adiw	r26, 0x0a	; 10
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	8a 95       	dec	r24
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <main+0x30>
	uint8_t waveform_id = 0;
	const uint16_t frequency[] = {20, 50, 100, 200, 300, 500, 700, 1000, 1200, 1500};
     ca4:	84 e1       	ldi	r24, 0x14	; 20
     ca6:	eb e1       	ldi	r30, 0x1B	; 27
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	de 01       	movw	r26, r28
     cac:	95 96       	adiw	r26, 0x25	; 37
     cae:	01 90       	ld	r0, Z+
     cb0:	0d 92       	st	X+, r0
     cb2:	8a 95       	dec	r24
     cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x42>
	uint8_t freq_id = 0;
	uint8_t screen = 0;
	
	i2c_master_init(I2C_SCL_FREQUENCY_100);					//SET LCD TO I2C0 PINS
     cb6:	60 ea       	ldi	r22, 0xA0	; 160
     cb8:	76 e8       	ldi	r23, 0x86	; 134
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2c_master_init>
	LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	44 e0       	ldi	r20, 0x04	; 4
     cc6:	64 e1       	ldi	r22, 0x14	; 20
     cc8:	87 e2       	ldi	r24, 0x27	; 39
     cca:	0e 94 a8 05 	call	0xb50	; 0xb50 <lq_init>
     cce:	29 af       	std	Y+57, r18	; 0x39
     cd0:	3a af       	std	Y+58, r19	; 0x3a
     cd2:	4b af       	std	Y+59, r20	; 0x3b
     cd4:	5c af       	std	Y+60, r21	; 0x3c
     cd6:	6d af       	std	Y+61, r22	; 0x3d
     cd8:	7e af       	std	Y+62, r23	; 0x3e
     cda:	8f af       	std	Y+63, r24	; 0x3f
	
	 lq_setCursor(&device, 0, 0);
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	ce 01       	movw	r24, r28
     ce2:	c9 96       	adiw	r24, 0x39	; 57
     ce4:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
	 lq_print(&device, "Amplitude");
     ce8:	6f e2       	ldi	r22, 0x2F	; 47
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	ce 01       	movw	r24, r28
     cee:	c9 96       	adiw	r24, 0x39	; 57
     cf0:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 lq_setCursor(&device, 1, 0);
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	ce 01       	movw	r24, r28
     cfa:	c9 96       	adiw	r24, 0x39	; 57
     cfc:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
	 lq_print(&device, "Frequency");
     d00:	69 e3       	ldi	r22, 0x39	; 57
     d02:	71 e0       	ldi	r23, 0x01	; 1
     d04:	ce 01       	movw	r24, r28
     d06:	c9 96       	adiw	r24, 0x39	; 57
     d08:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 lq_setCursor(&device, 2, 0);
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	62 e0       	ldi	r22, 0x02	; 2
     d10:	ce 01       	movw	r24, r28
     d12:	c9 96       	adiw	r24, 0x39	; 57
     d14:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
	 lq_print(&device, "Waveform");
     d18:	63 e4       	ldi	r22, 0x43	; 67
     d1a:	71 e0       	ldi	r23, 0x01	; 1
     d1c:	ce 01       	movw	r24, r28
     d1e:	c9 96       	adiw	r24, 0x39	; 57
     d20:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 
	 PCICR |= (1 << PCIE2);  // Enable Pin Change Interrupt for PCINT16-23 group (Port D)
     d24:	e8 e6       	ldi	r30, 0x68	; 104
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	84 60       	ori	r24, 0x04	; 4
     d2c:	80 83       	st	Z, r24
	 PCMSK2 |= (1 << PCINT18) | (1 << PCINT20) | (1 << PCINT23); //Enables interrupts for PD2, PD4, and PD7
     d2e:	ed e6       	ldi	r30, 0x6D	; 109
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	84 69       	ori	r24, 0x94	; 148
     d36:	80 83       	st	Z, r24
	 sei();
     d38:	78 94       	sei
	 
	 I2C_Init(); //initiates the DAC
     d3a:	0e 94 ca 04 	call	0x994	; 0x994 <I2C_Init>

	
     lq_setCursor(&device, 0, 17);
     d3e:	41 e1       	ldi	r20, 0x11	; 17
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	ce 01       	movw	r24, r28
     d44:	c9 96       	adiw	r24, 0x39	; 57
     d46:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
     sprintf(vol_str, "%d", vol_num);
     d4a:	1f 92       	push	r1
     d4c:	82 e3       	ldi	r24, 0x32	; 50
     d4e:	8f 93       	push	r24
     d50:	0c e4       	ldi	r16, 0x4C	; 76
     d52:	11 e0       	ldi	r17, 0x01	; 1
     d54:	1f 93       	push	r17
     d56:	0f 93       	push	r16
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	7c 01       	movw	r14, r24
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <sprintf>
     lq_print(&device, vol_str);
     d66:	b7 01       	movw	r22, r14
     d68:	ce 01       	movw	r24, r28
     d6a:	c9 96       	adiw	r24, 0x39	; 57
     d6c:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 lq_print(&device, " ");
     d70:	65 e5       	ldi	r22, 0x55	; 85
     d72:	71 e0       	ldi	r23, 0x01	; 1
     d74:	ce 01       	movw	r24, r28
     d76:	c9 96       	adiw	r24, 0x39	; 57
     d78:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 // Display Frequency
	 

	 lq_setCursor(&device, 1, 14);
     d7c:	4e e0       	ldi	r20, 0x0E	; 14
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	ce 01       	movw	r24, r28
     d82:	c9 96       	adiw	r24, 0x39	; 57
     d84:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
	 lq_print(&device, "  ");
     d88:	64 e5       	ldi	r22, 0x54	; 84
     d8a:	71 e0       	ldi	r23, 0x01	; 1
     d8c:	ce 01       	movw	r24, r28
     d8e:	c9 96       	adiw	r24, 0x39	; 57
     d90:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 sprintf(freq_str, "%d", frequency[freq_id]);
     d94:	8e a1       	ldd	r24, Y+38	; 0x26
     d96:	8f 93       	push	r24
     d98:	8d a1       	ldd	r24, Y+37	; 0x25
     d9a:	8f 93       	push	r24
     d9c:	1f 93       	push	r17
     d9e:	0f 93       	push	r16
     da0:	8e 01       	movw	r16, r28
     da2:	0b 5f       	subi	r16, 0xFB	; 251
     da4:	1f 4f       	sbci	r17, 0xFF	; 255
     da6:	1f 93       	push	r17
     da8:	0f 93       	push	r16
     daa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <sprintf>
	 lq_print(&device, freq_str);
     dae:	b8 01       	movw	r22, r16
     db0:	ce 01       	movw	r24, r28
     db2:	c9 96       	adiw	r24, 0x39	; 57
     db4:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 
	 lq_setCursor(&device, 1, 18);
     db8:	42 e1       	ldi	r20, 0x12	; 18
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	ce 01       	movw	r24, r28
     dbe:	c9 96       	adiw	r24, 0x39	; 57
     dc0:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
	 lq_print(&device, "Hz");
     dc4:	6f e4       	ldi	r22, 0x4F	; 79
     dc6:	71 e0       	ldi	r23, 0x01	; 1
     dc8:	ce 01       	movw	r24, r28
     dca:	c9 96       	adiw	r24, 0x39	; 57
     dcc:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 
	 //Display Waveform
	 lq_setCursor(&device, 2, 12);    
     dd0:	4c e0       	ldi	r20, 0x0C	; 12
     dd2:	62 e0       	ldi	r22, 0x02	; 2
     dd4:	ce 01       	movw	r24, r28
     dd6:	c9 96       	adiw	r24, 0x39	; 57
     dd8:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
     lq_print(&device, "    ");  
     ddc:	62 e5       	ldi	r22, 0x52	; 82
     dde:	71 e0       	ldi	r23, 0x01	; 1
     de0:	ce 01       	movw	r24, r28
     de2:	c9 96       	adiw	r24, 0x39	; 57
     de4:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
     lq_print(&device, waveform[waveform_id]);
     de8:	be 01       	movw	r22, r28
     dea:	66 5f       	subi	r22, 0xF6	; 246
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	ce 01       	movw	r24, r28
     df0:	c9 96       	adiw	r24, 0x39	; 57
     df2:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
	 
	 lq_setCursor(&device, 3, 0);
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	63 e0       	ldi	r22, 0x03	; 3
     dfa:	ce 01       	movw	r24, r28
     dfc:	c9 96       	adiw	r24, 0x39	; 57
     dfe:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
	 lq_print(&device, "Up    Down    Select");
     e02:	67 e5       	ldi	r22, 0x57	; 87
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	ce 01       	movw	r24, r28
     e08:	c9 96       	adiw	r24, 0x39	; 57
     e0a:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
	char vol_str[4];
	char freq_str[5];
	char waveform[3][9] = {"Sine", "Square", "Triangle"};
	uint8_t waveform_id = 0;
	const uint16_t frequency[] = {20, 50, 100, 200, 300, 500, 700, 1000, 1200, 1500};
	uint8_t freq_id = 0;
     e18:	f1 2c       	mov	r15, r1
	uint8_t vol_num = 50;		//amplitude of the tone generator
	uint8_t fsm = 0;			//state machine that determines what setting the user is on
	char vol_str[4];
	char freq_str[5];
	char waveform[3][9] = {"Sine", "Square", "Triangle"};
	uint8_t waveform_id = 0;
     e1a:	00 e0       	ldi	r16, 0x00	; 0
	DDRD &= (1<<2);		//select button
	DDRD &= (1<<4);		//up button
	DDRD &= (1<<7);		//down button
	
	uint8_t vol_num = 50;		//amplitude of the tone generator
	uint8_t fsm = 0;			//state machine that determines what setting the user is on
     e1c:	10 e0       	ldi	r17, 0x00	; 0
    /* Replace with your application code */
	DDRD &= (1<<2);		//select button
	DDRD &= (1<<4);		//up button
	DDRD &= (1<<7);		//down button
	
	uint8_t vol_num = 50;		//amplitude of the tone generator
     e1e:	0f 2e       	mov	r0, r31
     e20:	f2 e3       	ldi	r31, 0x32	; 50
     e22:	ef 2e       	mov	r14, r31
     e24:	f0 2d       	mov	r31, r0
	while (1) 
    {
		/*
				Switch Case for Waveform ID that generates waveforms using the DAC
		*/
		switch(waveform_id){
     e26:	01 30       	cpi	r16, 0x01	; 1
     e28:	a9 f0       	breq	.+42     	; 0xe54 <main+0x1e8>
     e2a:	18 f0       	brcs	.+6      	; 0xe32 <main+0x1c6>
     e2c:	02 30       	cpi	r16, 0x02	; 2
     e2e:	19 f1       	breq	.+70     	; 0xe76 <main+0x20a>
     e30:	32 c0       	rjmp	.+100    	; 0xe96 <main+0x22a>
			case 0: //Sine waveform
				Generate_Sine_Wave(vol_num, frequency[freq_id]);
     e32:	ef 2d       	mov	r30, r15
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	ee 0f       	add	r30, r30
     e38:	ff 1f       	adc	r31, r31
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	8c 0f       	add	r24, r28
     e40:	9d 1f       	adc	r25, r29
     e42:	e8 0f       	add	r30, r24
     e44:	f9 1f       	adc	r31, r25
     e46:	64 a1       	ldd	r22, Z+36	; 0x24
     e48:	75 a1       	ldd	r23, Z+37	; 0x25
     e4a:	8e 2d       	mov	r24, r14
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 b7 0a 	call	0x156e	; 0x156e <Generate_Sine_Wave>
			break;
     e52:	21 c0       	rjmp	.+66     	; 0xe96 <main+0x22a>
			
			case 1: //Square waveform
				Generate_Square_Wave(vol_num, frequency[freq_id]);
     e54:	ef 2d       	mov	r30, r15
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	8c 0f       	add	r24, r28
     e62:	9d 1f       	adc	r25, r29
     e64:	e8 0f       	add	r30, r24
     e66:	f9 1f       	adc	r31, r25
     e68:	64 a1       	ldd	r22, Z+36	; 0x24
     e6a:	75 a1       	ldd	r23, Z+37	; 0x25
     e6c:	8e 2d       	mov	r24, r14
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <Generate_Square_Wave>
			break;
     e74:	10 c0       	rjmp	.+32     	; 0xe96 <main+0x22a>
			
			case 2: //Triangle waveform
				Generate_Triangle_Wave(vol_num, frequency[freq_id]);
     e76:	ef 2d       	mov	r30, r15
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	8c 0f       	add	r24, r28
     e84:	9d 1f       	adc	r25, r29
     e86:	e8 0f       	add	r30, r24
     e88:	f9 1f       	adc	r31, r25
     e8a:	64 a1       	ldd	r22, Z+36	; 0x24
     e8c:	75 a1       	ldd	r23, Z+37	; 0x25
     e8e:	8e 2d       	mov	r24, r14
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 0e 0b 	call	0x161c	; 0x161c <Generate_Triangle_Wave>
			
			break;
		}
		
		if(selectPressed){
     e96:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <selectPressed>
     e9a:	88 23       	and	r24, r24
     e9c:	09 f4       	brne	.+2      	; 0xea0 <main+0x234>
     e9e:	f7 c0       	rjmp	.+494    	; 0x108e <main+0x422>
			switch(fsm){
     ea0:	12 30       	cpi	r17, 0x02	; 2
     ea2:	09 f4       	brne	.+2      	; 0xea6 <main+0x23a>
     ea4:	5b c0       	rjmp	.+182    	; 0xf5c <main+0x2f0>
     ea6:	28 f4       	brcc	.+10     	; 0xeb2 <main+0x246>
     ea8:	11 23       	and	r17, r17
     eaa:	61 f0       	breq	.+24     	; 0xec4 <main+0x258>
     eac:	11 30       	cpi	r17, 0x01	; 1
     eae:	81 f1       	breq	.+96     	; 0xf10 <main+0x2a4>
     eb0:	ec c0       	rjmp	.+472    	; 0x108a <main+0x41e>
     eb2:	14 30       	cpi	r17, 0x04	; 4
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <main+0x24c>
     eb6:	9e c0       	rjmp	.+316    	; 0xff4 <main+0x388>
     eb8:	08 f4       	brcc	.+2      	; 0xebc <main+0x250>
     eba:	76 c0       	rjmp	.+236    	; 0xfa8 <main+0x33c>
     ebc:	15 30       	cpi	r17, 0x05	; 5
     ebe:	09 f4       	brne	.+2      	; 0xec2 <main+0x256>
     ec0:	bf c0       	rjmp	.+382    	; 0x1040 <main+0x3d4>
     ec2:	e3 c0       	rjmp	.+454    	; 0x108a <main+0x41e>
				case 0:
					fsm = 3;
					lq_setCursor(&device, 0, 16);
     ec4:	40 e1       	ldi	r20, 0x10	; 16
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	ce 01       	movw	r24, r28
     eca:	c9 96       	adiw	r24, 0x39	; 57
     ecc:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, ">");
     ed0:	6c e6       	ldi	r22, 0x6C	; 108
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	ce 01       	movw	r24, r28
     ed6:	c9 96       	adiw	r24, 0x39	; 57
     ed8:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 0, 9);
     edc:	49 e0       	ldi	r20, 0x09	; 9
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	ce 01       	movw	r24, r28
     ee2:	c9 96       	adiw	r24, 0x39	; 57
     ee4:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
     ee8:	65 e5       	ldi	r22, 0x55	; 85
     eea:	71 e0       	ldi	r23, 0x01	; 1
     eec:	ce 01       	movw	r24, r28
     eee:	c9 96       	adiw	r24, 0x39	; 57
     ef0:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 3, 0);
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	63 e0       	ldi	r22, 0x03	; 3
     ef8:	ce 01       	movw	r24, r28
     efa:	c9 96       	adiw	r24, 0x39	; 57
     efc:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "Up    Down    Back");
     f00:	6e e6       	ldi	r22, 0x6E	; 110
     f02:	71 e0       	ldi	r23, 0x01	; 1
     f04:	ce 01       	movw	r24, r28
     f06:	c9 96       	adiw	r24, 0x39	; 57
     f08:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
		}
		
		if(selectPressed){
			switch(fsm){
				case 0:
					fsm = 3;
     f0c:	13 e0       	ldi	r17, 0x03	; 3
					lq_print(&device, ">");
					lq_setCursor(&device, 0, 9);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Back");
				break;
     f0e:	bd c0       	rjmp	.+378    	; 0x108a <main+0x41e>
				
				case 1:
					fsm = 4;
					lq_setCursor(&device, 1, 12);
     f10:	4c e0       	ldi	r20, 0x0C	; 12
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	ce 01       	movw	r24, r28
     f16:	c9 96       	adiw	r24, 0x39	; 57
     f18:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, ">");
     f1c:	6c e6       	ldi	r22, 0x6C	; 108
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	ce 01       	movw	r24, r28
     f22:	c9 96       	adiw	r24, 0x39	; 57
     f24:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 1, 9);
     f28:	49 e0       	ldi	r20, 0x09	; 9
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	ce 01       	movw	r24, r28
     f2e:	c9 96       	adiw	r24, 0x39	; 57
     f30:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
     f34:	65 e5       	ldi	r22, 0x55	; 85
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	ce 01       	movw	r24, r28
     f3a:	c9 96       	adiw	r24, 0x39	; 57
     f3c:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 3, 0);
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	63 e0       	ldi	r22, 0x03	; 3
     f44:	ce 01       	movw	r24, r28
     f46:	c9 96       	adiw	r24, 0x39	; 57
     f48:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "Up    Down    Back");
     f4c:	6e e6       	ldi	r22, 0x6E	; 110
     f4e:	71 e0       	ldi	r23, 0x01	; 1
     f50:	ce 01       	movw	r24, r28
     f52:	c9 96       	adiw	r24, 0x39	; 57
     f54:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Back");
				break;
				
				case 1:
					fsm = 4;
     f58:	14 e0       	ldi	r17, 0x04	; 4
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Back");
					
					
					
				break;
     f5a:	97 c0       	rjmp	.+302    	; 0x108a <main+0x41e>
				
				case 2:
					fsm = 5;
					lq_setCursor(&device, 2, 11);
     f5c:	4b e0       	ldi	r20, 0x0B	; 11
     f5e:	62 e0       	ldi	r22, 0x02	; 2
     f60:	ce 01       	movw	r24, r28
     f62:	c9 96       	adiw	r24, 0x39	; 57
     f64:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, ">");
     f68:	6c e6       	ldi	r22, 0x6C	; 108
     f6a:	71 e0       	ldi	r23, 0x01	; 1
     f6c:	ce 01       	movw	r24, r28
     f6e:	c9 96       	adiw	r24, 0x39	; 57
     f70:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 2, 8);
     f74:	48 e0       	ldi	r20, 0x08	; 8
     f76:	62 e0       	ldi	r22, 0x02	; 2
     f78:	ce 01       	movw	r24, r28
     f7a:	c9 96       	adiw	r24, 0x39	; 57
     f7c:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
     f80:	65 e5       	ldi	r22, 0x55	; 85
     f82:	71 e0       	ldi	r23, 0x01	; 1
     f84:	ce 01       	movw	r24, r28
     f86:	c9 96       	adiw	r24, 0x39	; 57
     f88:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 3, 0);
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	63 e0       	ldi	r22, 0x03	; 3
     f90:	ce 01       	movw	r24, r28
     f92:	c9 96       	adiw	r24, 0x39	; 57
     f94:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "Up    Down    Back");
     f98:	6e e6       	ldi	r22, 0x6E	; 110
     f9a:	71 e0       	ldi	r23, 0x01	; 1
     f9c:	ce 01       	movw	r24, r28
     f9e:	c9 96       	adiw	r24, 0x39	; 57
     fa0:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					
					
				break;
				
				case 2:
					fsm = 5;
     fa4:	15 e0       	ldi	r17, 0x05	; 5
					lq_setCursor(&device, 2, 8);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Back");
				
				break;
     fa6:	71 c0       	rjmp	.+226    	; 0x108a <main+0x41e>
				
				case 3:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
     fa8:	49 e0       	ldi	r20, 0x09	; 9
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	ce 01       	movw	r24, r28
     fae:	c9 96       	adiw	r24, 0x39	; 57
     fb0:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
     fb4:	61 e8       	ldi	r22, 0x81	; 129
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	ce 01       	movw	r24, r28
     fba:	c9 96       	adiw	r24, 0x39	; 57
     fbc:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					
					lq_setCursor(&device, 0, 16);
     fc0:	40 e1       	ldi	r20, 0x10	; 16
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	ce 01       	movw	r24, r28
     fc6:	c9 96       	adiw	r24, 0x39	; 57
     fc8:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
     fcc:	65 e5       	ldi	r22, 0x55	; 85
     fce:	71 e0       	ldi	r23, 0x01	; 1
     fd0:	ce 01       	movw	r24, r28
     fd2:	c9 96       	adiw	r24, 0x39	; 57
     fd4:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 3, 0);
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	63 e0       	ldi	r22, 0x03	; 3
     fdc:	ce 01       	movw	r24, r28
     fde:	c9 96       	adiw	r24, 0x39	; 57
     fe0:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "Up    Down    Select");
     fe4:	67 e5       	ldi	r22, 0x57	; 87
     fe6:	71 e0       	ldi	r23, 0x01	; 1
     fe8:	ce 01       	movw	r24, r28
     fea:	c9 96       	adiw	r24, 0x39	; 57
     fec:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_print(&device, "Up    Down    Back");
				
				break;
				
				case 3:
					fsm = 0;
     ff0:	10 e0       	ldi	r17, 0x00	; 0
					lq_setCursor(&device, 0, 16);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Select");
					
				break;
     ff2:	4b c0       	rjmp	.+150    	; 0x108a <main+0x41e>
				
				case 4:
					fsm = 1;
					lq_setCursor(&device, 1, 9);
     ff4:	49 e0       	ldi	r20, 0x09	; 9
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	ce 01       	movw	r24, r28
     ffa:	c9 96       	adiw	r24, 0x39	; 57
     ffc:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
    1000:	61 e8       	ldi	r22, 0x81	; 129
    1002:	71 e0       	ldi	r23, 0x01	; 1
    1004:	ce 01       	movw	r24, r28
    1006:	c9 96       	adiw	r24, 0x39	; 57
    1008:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					
					lq_setCursor(&device, 1, 12);
    100c:	4c e0       	ldi	r20, 0x0C	; 12
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	ce 01       	movw	r24, r28
    1012:	c9 96       	adiw	r24, 0x39	; 57
    1014:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
    1018:	65 e5       	ldi	r22, 0x55	; 85
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	ce 01       	movw	r24, r28
    101e:	c9 96       	adiw	r24, 0x39	; 57
    1020:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 3, 0);
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	63 e0       	ldi	r22, 0x03	; 3
    1028:	ce 01       	movw	r24, r28
    102a:	c9 96       	adiw	r24, 0x39	; 57
    102c:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "Up    Down    Select");
    1030:	67 e5       	ldi	r22, 0x57	; 87
    1032:	71 e0       	ldi	r23, 0x01	; 1
    1034:	ce 01       	movw	r24, r28
    1036:	c9 96       	adiw	r24, 0x39	; 57
    1038:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_print(&device, "Up    Down    Select");
					
				break;
				
				case 4:
					fsm = 1;
    103c:	11 e0       	ldi	r17, 0x01	; 1
					
					lq_setCursor(&device, 1, 12);
					lq_print(&device, " ");
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Select");
				break;
    103e:	25 c0       	rjmp	.+74     	; 0x108a <main+0x41e>
				
				case 5:
					fsm = 2;
					
					lq_setCursor(&device, 2, 8);
    1040:	48 e0       	ldi	r20, 0x08	; 8
    1042:	62 e0       	ldi	r22, 0x02	; 2
    1044:	ce 01       	movw	r24, r28
    1046:	c9 96       	adiw	r24, 0x39	; 57
    1048:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
    104c:	61 e8       	ldi	r22, 0x81	; 129
    104e:	71 e0       	ldi	r23, 0x01	; 1
    1050:	ce 01       	movw	r24, r28
    1052:	c9 96       	adiw	r24, 0x39	; 57
    1054:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 2, 11);
    1058:	4b e0       	ldi	r20, 0x0B	; 11
    105a:	62 e0       	ldi	r22, 0x02	; 2
    105c:	ce 01       	movw	r24, r28
    105e:	c9 96       	adiw	r24, 0x39	; 57
    1060:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
    1064:	65 e5       	ldi	r22, 0x55	; 85
    1066:	71 e0       	ldi	r23, 0x01	; 1
    1068:	ce 01       	movw	r24, r28
    106a:	c9 96       	adiw	r24, 0x39	; 57
    106c:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 3, 0);
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	63 e0       	ldi	r22, 0x03	; 3
    1074:	ce 01       	movw	r24, r28
    1076:	c9 96       	adiw	r24, 0x39	; 57
    1078:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "Up    Down    Select");
    107c:	67 e5       	ldi	r22, 0x57	; 87
    107e:	71 e0       	ldi	r23, 0x01	; 1
    1080:	ce 01       	movw	r24, r28
    1082:	c9 96       	adiw	r24, 0x39	; 57
    1084:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Select");
				break;
				
				case 5:
					fsm = 2;
    1088:	12 e0       	ldi	r17, 0x02	; 2
					lq_setCursor(&device, 3, 0);
					lq_print(&device, "Up    Down    Select");
				break;
			}
		
			selectPressed = 0;
    108a:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <selectPressed>
		}
		
		
		if(upPressed){
    108e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <upPressed>
    1092:	88 23       	and	r24, r24
    1094:	09 f4       	brne	.+2      	; 0x1098 <main+0x42c>
    1096:	12 c1       	rjmp	.+548    	; 0x12bc <main+0x650>
			switch(fsm){
    1098:	12 30       	cpi	r17, 0x02	; 2
    109a:	09 f4       	brne	.+2      	; 0x109e <main+0x432>
    109c:	43 c0       	rjmp	.+134    	; 0x1124 <main+0x4b8>
    109e:	28 f4       	brcc	.+10     	; 0x10aa <main+0x43e>
    10a0:	11 23       	and	r17, r17
    10a2:	61 f0       	breq	.+24     	; 0x10bc <main+0x450>
    10a4:	11 30       	cpi	r17, 0x01	; 1
    10a6:	21 f1       	breq	.+72     	; 0x10f0 <main+0x484>
    10a8:	07 c1       	rjmp	.+526    	; 0x12b8 <main+0x64c>
    10aa:	14 30       	cpi	r17, 0x04	; 4
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <main+0x444>
    10ae:	8c c0       	rjmp	.+280    	; 0x11c8 <main+0x55c>
    10b0:	08 f4       	brcc	.+2      	; 0x10b4 <main+0x448>
    10b2:	52 c0       	rjmp	.+164    	; 0x1158 <main+0x4ec>
    10b4:	15 30       	cpi	r17, 0x05	; 5
    10b6:	09 f4       	brne	.+2      	; 0x10ba <main+0x44e>
    10b8:	cd c0       	rjmp	.+410    	; 0x1254 <main+0x5e8>
    10ba:	fe c0       	rjmp	.+508    	; 0x12b8 <main+0x64c>
				case 0:
					fsm = 2;
					lq_setCursor(&device, 0, 9);
    10bc:	49 e0       	ldi	r20, 0x09	; 9
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	ce 01       	movw	r24, r28
    10c2:	c9 96       	adiw	r24, 0x39	; 57
    10c4:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
    10c8:	65 e5       	ldi	r22, 0x55	; 85
    10ca:	71 e0       	ldi	r23, 0x01	; 1
    10cc:	ce 01       	movw	r24, r28
    10ce:	c9 96       	adiw	r24, 0x39	; 57
    10d0:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					
					lq_setCursor(&device, 2, 8);
    10d4:	48 e0       	ldi	r20, 0x08	; 8
    10d6:	62 e0       	ldi	r22, 0x02	; 2
    10d8:	ce 01       	movw	r24, r28
    10da:	c9 96       	adiw	r24, 0x39	; 57
    10dc:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
    10e0:	61 e8       	ldi	r22, 0x81	; 129
    10e2:	71 e0       	ldi	r23, 0x01	; 1
    10e4:	ce 01       	movw	r24, r28
    10e6:	c9 96       	adiw	r24, 0x39	; 57
    10e8:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
		
		
		if(upPressed){
			switch(fsm){
				case 0:
					fsm = 2;
    10ec:	12 e0       	ldi	r17, 0x02	; 2
					lq_print(&device, " ");
					
					lq_setCursor(&device, 2, 8);
					lq_print(&device, "<");
					
				break;
    10ee:	e4 c0       	rjmp	.+456    	; 0x12b8 <main+0x64c>
				
				case 1:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
    10f0:	49 e0       	ldi	r20, 0x09	; 9
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	ce 01       	movw	r24, r28
    10f6:	c9 96       	adiw	r24, 0x39	; 57
    10f8:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
    10fc:	61 e8       	ldi	r22, 0x81	; 129
    10fe:	71 e0       	ldi	r23, 0x01	; 1
    1100:	ce 01       	movw	r24, r28
    1102:	c9 96       	adiw	r24, 0x39	; 57
    1104:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 1, 9);
    1108:	49 e0       	ldi	r20, 0x09	; 9
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	ce 01       	movw	r24, r28
    110e:	c9 96       	adiw	r24, 0x39	; 57
    1110:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
    1114:	65 e5       	ldi	r22, 0x55	; 85
    1116:	71 e0       	ldi	r23, 0x01	; 1
    1118:	ce 01       	movw	r24, r28
    111a:	c9 96       	adiw	r24, 0x39	; 57
    111c:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_print(&device, "<");
					
				break;
				
				case 1:
					fsm = 0;
    1120:	10 e0       	ldi	r17, 0x00	; 0
					lq_setCursor(&device, 0, 9);
					lq_print(&device, "<");
					lq_setCursor(&device, 1, 9);
					lq_print(&device, " ");
					
				break;
    1122:	ca c0       	rjmp	.+404    	; 0x12b8 <main+0x64c>
				
				case 2:
					fsm = 1;
					
					lq_setCursor(&device, 1, 9);
    1124:	49 e0       	ldi	r20, 0x09	; 9
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	ce 01       	movw	r24, r28
    112a:	c9 96       	adiw	r24, 0x39	; 57
    112c:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
    1130:	61 e8       	ldi	r22, 0x81	; 129
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	ce 01       	movw	r24, r28
    1136:	c9 96       	adiw	r24, 0x39	; 57
    1138:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 2, 8);
    113c:	48 e0       	ldi	r20, 0x08	; 8
    113e:	62 e0       	ldi	r22, 0x02	; 2
    1140:	ce 01       	movw	r24, r28
    1142:	c9 96       	adiw	r24, 0x39	; 57
    1144:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
    1148:	65 e5       	ldi	r22, 0x55	; 85
    114a:	71 e0       	ldi	r23, 0x01	; 1
    114c:	ce 01       	movw	r24, r28
    114e:	c9 96       	adiw	r24, 0x39	; 57
    1150:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_print(&device, " ");
					
				break;
				
				case 2:
					fsm = 1;
    1154:	11 e0       	ldi	r17, 0x01	; 1
					lq_print(&device, "<");
					lq_setCursor(&device, 2, 8);
					lq_print(&device, " ");
					
				
				break;
    1156:	b0 c0       	rjmp	.+352    	; 0x12b8 <main+0x64c>
				
				case 3:
					if(vol_num<100){
    1158:	93 e6       	ldi	r25, 0x63	; 99
    115a:	9e 15       	cp	r25, r14
    115c:	08 f4       	brcc	.+2      	; 0x1160 <main+0x4f4>
    115e:	ac c0       	rjmp	.+344    	; 0x12b8 <main+0x64c>
						vol_num += 1;
    1160:	e3 94       	inc	r14
						lq_setCursor(&device, 0, 17);
    1162:	41 e1       	ldi	r20, 0x11	; 17
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	ce 01       	movw	r24, r28
    1168:	c9 96       	adiw	r24, 0x39	; 57
    116a:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
						sprintf(vol_str, "%d", vol_num);
    116e:	1f 92       	push	r1
    1170:	ef 92       	push	r14
    1172:	8c e4       	ldi	r24, 0x4C	; 76
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	6c 01       	movw	r12, r24
    1180:	9f 93       	push	r25
    1182:	8f 93       	push	r24
    1184:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <sprintf>
						lq_print(&device, vol_str);
    1188:	b6 01       	movw	r22, r12
    118a:	ce 01       	movw	r24, r28
    118c:	c9 96       	adiw	r24, 0x39	; 57
    118e:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						if (vol_num < 10) {
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	99 e0       	ldi	r25, 0x09	; 9
    11a0:	9e 15       	cp	r25, r14
    11a2:	38 f0       	brcs	.+14     	; 0x11b2 <main+0x546>
							lq_print(&device, "  ");
    11a4:	64 e5       	ldi	r22, 0x54	; 84
    11a6:	71 e0       	ldi	r23, 0x01	; 1
    11a8:	ce 01       	movw	r24, r28
    11aa:	c9 96       	adiw	r24, 0x39	; 57
    11ac:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
    11b0:	83 c0       	rjmp	.+262    	; 0x12b8 <main+0x64c>
							} else if (vol_num < 100) {
    11b2:	83 e6       	ldi	r24, 0x63	; 99
    11b4:	8e 15       	cp	r24, r14
    11b6:	08 f4       	brcc	.+2      	; 0x11ba <main+0x54e>
    11b8:	7f c0       	rjmp	.+254    	; 0x12b8 <main+0x64c>
							lq_print(&device, " ");
    11ba:	65 e5       	ldi	r22, 0x55	; 85
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	ce 01       	movw	r24, r28
    11c0:	c9 96       	adiw	r24, 0x39	; 57
    11c2:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
    11c6:	78 c0       	rjmp	.+240    	; 0x12b8 <main+0x64c>
					
				break;
				
				case 4:
					
					if (freq_id == 9) {
    11c8:	99 e0       	ldi	r25, 0x09	; 9
    11ca:	f9 16       	cp	r15, r25
    11cc:	11 f0       	breq	.+4      	; 0x11d2 <main+0x566>
						freq_id = 0;
						} else {
							freq_id += 1;
    11ce:	f3 94       	inc	r15
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <main+0x568>
				break;
				
				case 4:
					
					if (freq_id == 9) {
						freq_id = 0;
    11d2:	f1 2c       	mov	r15, r1
						} else {
							freq_id += 1;
						}
					lq_setCursor(&device, 1, 14);
    11d4:	4e e0       	ldi	r20, 0x0E	; 14
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	ce 01       	movw	r24, r28
    11da:	c9 96       	adiw	r24, 0x39	; 57
    11dc:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					switch(freq_id) {
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	8f 15       	cp	r24, r15
    11e4:	20 f4       	brcc	.+8      	; 0x11ee <main+0x582>
    11e6:	96 e0       	ldi	r25, 0x06	; 6
    11e8:	9f 15       	cp	r25, r15
    11ea:	70 f0       	brcs	.+28     	; 0x1208 <main+0x59c>
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <main+0x590>
						case 0: case 1:
						lq_print(&device, "  ");
    11ee:	64 e5       	ldi	r22, 0x54	; 84
    11f0:	71 e0       	ldi	r23, 0x01	; 1
    11f2:	ce 01       	movw	r24, r28
    11f4:	c9 96       	adiw	r24, 0x39	; 57
    11f6:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						break;
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <main+0x59c>
						case 2: case 3: case 4: case 5: case 6:
						lq_print(&device, " ");
    11fc:	65 e5       	ldi	r22, 0x55	; 85
    11fe:	71 e0       	ldi	r23, 0x01	; 1
    1200:	ce 01       	movw	r24, r28
    1202:	c9 96       	adiw	r24, 0x39	; 57
    1204:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						break;
						
					}
					sprintf(freq_str, "%d", frequency[freq_id]);
    1208:	ef 2d       	mov	r30, r15
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	8c 0f       	add	r24, r28
    1216:	9d 1f       	adc	r25, r29
    1218:	e8 0f       	add	r30, r24
    121a:	f9 1f       	adc	r31, r25
    121c:	85 a1       	ldd	r24, Z+37	; 0x25
    121e:	8f 93       	push	r24
    1220:	84 a1       	ldd	r24, Z+36	; 0x24
    1222:	8f 93       	push	r24
    1224:	8c e4       	ldi	r24, 0x4C	; 76
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	9f 93       	push	r25
    122a:	8f 93       	push	r24
    122c:	6e 01       	movw	r12, r28
    122e:	95 e0       	ldi	r25, 0x05	; 5
    1230:	c9 0e       	add	r12, r25
    1232:	d1 1c       	adc	r13, r1
    1234:	df 92       	push	r13
    1236:	cf 92       	push	r12
    1238:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <sprintf>
					lq_print(&device, freq_str);
    123c:	b6 01       	movw	r22, r12
    123e:	ce 01       	movw	r24, r28
    1240:	c9 96       	adiw	r24, 0x39	; 57
    1242:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						
					
				break;
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	32 c0       	rjmp	.+100    	; 0x12b8 <main+0x64c>
				
				case 5:
					if (waveform_id == 2) {
    1254:	02 30       	cpi	r16, 0x02	; 2
    1256:	11 f0       	breq	.+4      	; 0x125c <main+0x5f0>
						waveform_id = 0;
						} else {
						waveform_id += 1;
    1258:	0f 5f       	subi	r16, 0xFF	; 255
    125a:	01 c0       	rjmp	.+2      	; 0x125e <main+0x5f2>
					
				break;
				
				case 5:
					if (waveform_id == 2) {
						waveform_id = 0;
    125c:	00 e0       	ldi	r16, 0x00	; 0
						} else {
						waveform_id += 1;
					}
					
					lq_setCursor(&device, 2, 12);
    125e:	4c e0       	ldi	r20, 0x0C	; 12
    1260:	62 e0       	ldi	r22, 0x02	; 2
    1262:	ce 01       	movw	r24, r28
    1264:	c9 96       	adiw	r24, 0x39	; 57
    1266:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					
					switch(waveform_id) {
    126a:	00 23       	and	r16, r16
    126c:	19 f0       	breq	.+6      	; 0x1274 <main+0x608>
    126e:	01 30       	cpi	r16, 0x01	; 1
    1270:	41 f0       	breq	.+16     	; 0x1282 <main+0x616>
    1272:	0d c0       	rjmp	.+26     	; 0x128e <main+0x622>
						case 0:  // Sine
							lq_print(&device, "    ");
    1274:	62 e5       	ldi	r22, 0x52	; 82
    1276:	71 e0       	ldi	r23, 0x01	; 1
    1278:	ce 01       	movw	r24, r28
    127a:	c9 96       	adiw	r24, 0x39	; 57
    127c:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
							break;
    1280:	06 c0       	rjmp	.+12     	; 0x128e <main+0x622>
						case 1:  // Square
							lq_print(&device, "  ");
    1282:	64 e5       	ldi	r22, 0x54	; 84
    1284:	71 e0       	ldi	r23, 0x01	; 1
    1286:	ce 01       	movw	r24, r28
    1288:	c9 96       	adiw	r24, 0x39	; 57
    128a:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
							break;
					
					}
					
					lq_print(&device, waveform[waveform_id]);
    128e:	80 2f       	mov	r24, r16
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	bc 01       	movw	r22, r24
    1294:	66 0f       	add	r22, r22
    1296:	77 1f       	adc	r23, r23
    1298:	66 0f       	add	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	68 0f       	add	r22, r24
    12a2:	79 1f       	adc	r23, r25
    12a4:	8a e0       	ldi	r24, 0x0A	; 10
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	8c 0f       	add	r24, r28
    12aa:	9d 1f       	adc	r25, r29
    12ac:	68 0f       	add	r22, r24
    12ae:	79 1f       	adc	r23, r25
    12b0:	ce 01       	movw	r24, r28
    12b2:	c9 96       	adiw	r24, 0x39	; 57
    12b4:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
				break;
				
			}
			
			upPressed = 0;
    12b8:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <upPressed>
		}
		
		
		if(downPressed){
    12bc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
    12c0:	88 23       	and	r24, r24
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <main+0x65a>
    12c4:	b0 cd       	rjmp	.-1184   	; 0xe26 <main+0x1ba>
			switch(fsm){
    12c6:	12 30       	cpi	r17, 0x02	; 2
    12c8:	09 f4       	brne	.+2      	; 0x12cc <main+0x660>
    12ca:	43 c0       	rjmp	.+134    	; 0x1352 <main+0x6e6>
    12cc:	28 f4       	brcc	.+10     	; 0x12d8 <main+0x66c>
    12ce:	11 23       	and	r17, r17
    12d0:	61 f0       	breq	.+24     	; 0x12ea <main+0x67e>
    12d2:	11 30       	cpi	r17, 0x01	; 1
    12d4:	21 f1       	breq	.+72     	; 0x131e <main+0x6b2>
    12d6:	08 c1       	rjmp	.+528    	; 0x14e8 <main+0x87c>
    12d8:	14 30       	cpi	r17, 0x04	; 4
    12da:	09 f4       	brne	.+2      	; 0x12de <main+0x672>
    12dc:	8b c0       	rjmp	.+278    	; 0x13f4 <main+0x788>
    12de:	08 f4       	brcc	.+2      	; 0x12e2 <main+0x676>
    12e0:	52 c0       	rjmp	.+164    	; 0x1386 <main+0x71a>
    12e2:	15 30       	cpi	r17, 0x05	; 5
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <main+0x67c>
    12e6:	ce c0       	rjmp	.+412    	; 0x1484 <main+0x818>
    12e8:	ff c0       	rjmp	.+510    	; 0x14e8 <main+0x87c>
				case 0:
					fsm = 1;
					lq_setCursor(&device, 0, 9);
    12ea:	49 e0       	ldi	r20, 0x09	; 9
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	ce 01       	movw	r24, r28
    12f0:	c9 96       	adiw	r24, 0x39	; 57
    12f2:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
    12f6:	65 e5       	ldi	r22, 0x55	; 85
    12f8:	71 e0       	ldi	r23, 0x01	; 1
    12fa:	ce 01       	movw	r24, r28
    12fc:	c9 96       	adiw	r24, 0x39	; 57
    12fe:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 1, 9);
    1302:	49 e0       	ldi	r20, 0x09	; 9
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	ce 01       	movw	r24, r28
    1308:	c9 96       	adiw	r24, 0x39	; 57
    130a:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
    130e:	61 e8       	ldi	r22, 0x81	; 129
    1310:	71 e0       	ldi	r23, 0x01	; 1
    1312:	ce 01       	movw	r24, r28
    1314:	c9 96       	adiw	r24, 0x39	; 57
    1316:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
		
		
		if(downPressed){
			switch(fsm){
				case 0:
					fsm = 1;
    131a:	11 e0       	ldi	r17, 0x01	; 1
					lq_setCursor(&device, 0, 9);
					lq_print(&device, " ");
					lq_setCursor(&device, 1, 9);
					lq_print(&device, "<");
					
				break;
    131c:	e5 c0       	rjmp	.+458    	; 0x14e8 <main+0x87c>
				
				case 1:
					fsm = 2;
					
					lq_setCursor(&device, 1, 9);
    131e:	49 e0       	ldi	r20, 0x09	; 9
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	ce 01       	movw	r24, r28
    1324:	c9 96       	adiw	r24, 0x39	; 57
    1326:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
    132a:	65 e5       	ldi	r22, 0x55	; 85
    132c:	71 e0       	ldi	r23, 0x01	; 1
    132e:	ce 01       	movw	r24, r28
    1330:	c9 96       	adiw	r24, 0x39	; 57
    1332:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_setCursor(&device, 2, 8);
    1336:	48 e0       	ldi	r20, 0x08	; 8
    1338:	62 e0       	ldi	r22, 0x02	; 2
    133a:	ce 01       	movw	r24, r28
    133c:	c9 96       	adiw	r24, 0x39	; 57
    133e:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
    1342:	61 e8       	ldi	r22, 0x81	; 129
    1344:	71 e0       	ldi	r23, 0x01	; 1
    1346:	ce 01       	movw	r24, r28
    1348:	c9 96       	adiw	r24, 0x39	; 57
    134a:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_print(&device, "<");
					
				break;
				
				case 1:
					fsm = 2;
    134e:	12 e0       	ldi	r17, 0x02	; 2
					lq_setCursor(&device, 1, 9);
					lq_print(&device, " ");
					lq_setCursor(&device, 2, 8);
					lq_print(&device, "<");
					
				break;
    1350:	cb c0       	rjmp	.+406    	; 0x14e8 <main+0x87c>
				
				case 2:
					fsm = 0;
					lq_setCursor(&device, 0, 9);
    1352:	49 e0       	ldi	r20, 0x09	; 9
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	ce 01       	movw	r24, r28
    1358:	c9 96       	adiw	r24, 0x39	; 57
    135a:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, "<");
    135e:	61 e8       	ldi	r22, 0x81	; 129
    1360:	71 e0       	ldi	r23, 0x01	; 1
    1362:	ce 01       	movw	r24, r28
    1364:	c9 96       	adiw	r24, 0x39	; 57
    1366:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					
					lq_setCursor(&device, 2, 8);
    136a:	48 e0       	ldi	r20, 0x08	; 8
    136c:	62 e0       	ldi	r22, 0x02	; 2
    136e:	ce 01       	movw	r24, r28
    1370:	c9 96       	adiw	r24, 0x39	; 57
    1372:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					lq_print(&device, " ");
    1376:	65 e5       	ldi	r22, 0x55	; 85
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	ce 01       	movw	r24, r28
    137c:	c9 96       	adiw	r24, 0x39	; 57
    137e:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
					lq_print(&device, "<");
					
				break;
				
				case 2:
					fsm = 0;
    1382:	10 e0       	ldi	r17, 0x00	; 0
					
					lq_setCursor(&device, 2, 8);
					lq_print(&device, " ");
					
				
				break;
    1384:	b1 c0       	rjmp	.+354    	; 0x14e8 <main+0x87c>
				
				case 3:
					if(vol_num > 0){
    1386:	ee 20       	and	r14, r14
    1388:	09 f4       	brne	.+2      	; 0x138c <main+0x720>
    138a:	ae c0       	rjmp	.+348    	; 0x14e8 <main+0x87c>
						vol_num -= 1;
    138c:	ea 94       	dec	r14
						lq_setCursor(&device, 0, 17);
    138e:	41 e1       	ldi	r20, 0x11	; 17
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	ce 01       	movw	r24, r28
    1394:	c9 96       	adiw	r24, 0x39	; 57
    1396:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
						sprintf(vol_str, "%d", vol_num);
    139a:	1f 92       	push	r1
    139c:	ef 92       	push	r14
    139e:	8c e4       	ldi	r24, 0x4C	; 76
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	9f 93       	push	r25
    13a4:	8f 93       	push	r24
    13a6:	ce 01       	movw	r24, r28
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	6c 01       	movw	r12, r24
    13ac:	9f 93       	push	r25
    13ae:	8f 93       	push	r24
    13b0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <sprintf>
						lq_print(&device, vol_str);
    13b4:	b6 01       	movw	r22, r12
    13b6:	ce 01       	movw	r24, r28
    13b8:	c9 96       	adiw	r24, 0x39	; 57
    13ba:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						if (vol_num < 10) {
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	99 e0       	ldi	r25, 0x09	; 9
    13cc:	9e 15       	cp	r25, r14
    13ce:	38 f0       	brcs	.+14     	; 0x13de <main+0x772>
							lq_print(&device, "  ");
    13d0:	64 e5       	ldi	r22, 0x54	; 84
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	ce 01       	movw	r24, r28
    13d6:	c9 96       	adiw	r24, 0x39	; 57
    13d8:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
    13dc:	85 c0       	rjmp	.+266    	; 0x14e8 <main+0x87c>
							} else if (vol_num < 100) {
    13de:	83 e6       	ldi	r24, 0x63	; 99
    13e0:	8e 15       	cp	r24, r14
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <main+0x77a>
    13e4:	81 c0       	rjmp	.+258    	; 0x14e8 <main+0x87c>
							lq_print(&device, " ");
    13e6:	65 e5       	ldi	r22, 0x55	; 85
    13e8:	71 e0       	ldi	r23, 0x01	; 1
    13ea:	ce 01       	movw	r24, r28
    13ec:	c9 96       	adiw	r24, 0x39	; 57
    13ee:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
    13f2:	7a c0       	rjmp	.+244    	; 0x14e8 <main+0x87c>
					
					
				break;
				
				case 4:
					if (freq_id == 0) {
    13f4:	ff 20       	and	r15, r15
    13f6:	11 f0       	breq	.+4      	; 0x13fc <main+0x790>
						freq_id = 9;
						} else {
						freq_id -= 1;
    13f8:	fa 94       	dec	r15
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <main+0x798>
					
				break;
				
				case 4:
					if (freq_id == 0) {
						freq_id = 9;
    13fc:	0f 2e       	mov	r0, r31
    13fe:	f9 e0       	ldi	r31, 0x09	; 9
    1400:	ff 2e       	mov	r15, r31
    1402:	f0 2d       	mov	r31, r0
						} else {
						freq_id -= 1;
					}
					lq_setCursor(&device, 1, 14);
    1404:	4e e0       	ldi	r20, 0x0E	; 14
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	ce 01       	movw	r24, r28
    140a:	c9 96       	adiw	r24, 0x39	; 57
    140c:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					switch(freq_id) {
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	9f 15       	cp	r25, r15
    1414:	20 f4       	brcc	.+8      	; 0x141e <main+0x7b2>
    1416:	86 e0       	ldi	r24, 0x06	; 6
    1418:	8f 15       	cp	r24, r15
    141a:	70 f0       	brcs	.+28     	; 0x1438 <main+0x7cc>
    141c:	07 c0       	rjmp	.+14     	; 0x142c <main+0x7c0>
						case 0: case 1:
						lq_print(&device, "  ");
    141e:	64 e5       	ldi	r22, 0x54	; 84
    1420:	71 e0       	ldi	r23, 0x01	; 1
    1422:	ce 01       	movw	r24, r28
    1424:	c9 96       	adiw	r24, 0x39	; 57
    1426:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						break;
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <main+0x7cc>
						case 2: case 3: case 4: case 5: case 6:
						lq_print(&device, " ");
    142c:	65 e5       	ldi	r22, 0x55	; 85
    142e:	71 e0       	ldi	r23, 0x01	; 1
    1430:	ce 01       	movw	r24, r28
    1432:	c9 96       	adiw	r24, 0x39	; 57
    1434:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						break;
						
					}
					sprintf(freq_str, "%d", frequency[freq_id]);
    1438:	ef 2d       	mov	r30, r15
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	ee 0f       	add	r30, r30
    143e:	ff 1f       	adc	r31, r31
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	8c 0f       	add	r24, r28
    1446:	9d 1f       	adc	r25, r29
    1448:	e8 0f       	add	r30, r24
    144a:	f9 1f       	adc	r31, r25
    144c:	85 a1       	ldd	r24, Z+37	; 0x25
    144e:	8f 93       	push	r24
    1450:	84 a1       	ldd	r24, Z+36	; 0x24
    1452:	8f 93       	push	r24
    1454:	8c e4       	ldi	r24, 0x4C	; 76
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	9f 93       	push	r25
    145a:	8f 93       	push	r24
    145c:	6e 01       	movw	r12, r28
    145e:	95 e0       	ldi	r25, 0x05	; 5
    1460:	c9 0e       	add	r12, r25
    1462:	d1 1c       	adc	r13, r1
    1464:	df 92       	push	r13
    1466:	cf 92       	push	r12
    1468:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <sprintf>
					lq_print(&device, freq_str);
    146c:	b6 01       	movw	r22, r12
    146e:	ce 01       	movw	r24, r28
    1470:	c9 96       	adiw	r24, 0x39	; 57
    1472:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
				break;
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	32 c0       	rjmp	.+100    	; 0x14e8 <main+0x87c>
				
				case 5:
					if (waveform_id == 0) {
    1484:	00 23       	and	r16, r16
    1486:	11 f0       	breq	.+4      	; 0x148c <main+0x820>
						waveform_id = 2;
						} else {
						waveform_id -= 1;
    1488:	01 50       	subi	r16, 0x01	; 1
    148a:	01 c0       	rjmp	.+2      	; 0x148e <main+0x822>
					lq_print(&device, freq_str);
				break;
				
				case 5:
					if (waveform_id == 0) {
						waveform_id = 2;
    148c:	02 e0       	ldi	r16, 0x02	; 2
						} else {
						waveform_id -= 1;
					}
					
					lq_setCursor(&device, 2, 12);
    148e:	4c e0       	ldi	r20, 0x0C	; 12
    1490:	62 e0       	ldi	r22, 0x02	; 2
    1492:	ce 01       	movw	r24, r28
    1494:	c9 96       	adiw	r24, 0x39	; 57
    1496:	0e 94 62 05 	call	0xac4	; 0xac4 <lq_setCursor>
					
					switch(waveform_id) {
    149a:	00 23       	and	r16, r16
    149c:	19 f0       	breq	.+6      	; 0x14a4 <main+0x838>
    149e:	01 30       	cpi	r16, 0x01	; 1
    14a0:	41 f0       	breq	.+16     	; 0x14b2 <main+0x846>
    14a2:	0d c0       	rjmp	.+26     	; 0x14be <main+0x852>
						case 0:  // Sine
						lq_print(&device, "    ");
    14a4:	62 e5       	ldi	r22, 0x52	; 82
    14a6:	71 e0       	ldi	r23, 0x01	; 1
    14a8:	ce 01       	movw	r24, r28
    14aa:	c9 96       	adiw	r24, 0x39	; 57
    14ac:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						break;
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <main+0x852>
						case 1:  // Square
						lq_print(&device, "  ");
    14b2:	64 e5       	ldi	r22, 0x54	; 84
    14b4:	71 e0       	ldi	r23, 0x01	; 1
    14b6:	ce 01       	movw	r24, r28
    14b8:	c9 96       	adiw	r24, 0x39	; 57
    14ba:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
						break;
						
					}
					
					lq_print(&device, waveform[waveform_id]);
    14be:	80 2f       	mov	r24, r16
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	bc 01       	movw	r22, r24
    14c4:	66 0f       	add	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	66 0f       	add	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	68 0f       	add	r22, r24
    14d2:	79 1f       	adc	r23, r25
    14d4:	8a e0       	ldi	r24, 0x0A	; 10
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	8c 0f       	add	r24, r28
    14da:	9d 1f       	adc	r25, r29
    14dc:	68 0f       	add	r22, r24
    14de:	79 1f       	adc	r23, r25
    14e0:	ce 01       	movw	r24, r28
    14e2:	c9 96       	adiw	r24, 0x39	; 57
    14e4:	0e 94 49 05 	call	0xa92	; 0xa92 <lq_print>
				break;
				
			}
			
			downPressed = 0;
    14e8:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
    14ec:	9c cc       	rjmp	.-1736   	; 0xe26 <main+0x1ba>

000014ee <__vector_5>:
}




ISR(PCINT2_vect) {
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 93       	push	r18
    14fa:	8f 93       	push	r24
    14fc:	9f 93       	push	r25
	
	if  (PIND & (1 << 2)) {
    14fe:	4a 9b       	sbis	0x09, 2	; 9
    1500:	0e c0       	rjmp	.+28     	; 0x151e <__vector_5+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1502:	2f ef       	ldi	r18, 0xFF	; 255
    1504:	80 e7       	ldi	r24, 0x70	; 112
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	21 50       	subi	r18, 0x01	; 1
    150a:	80 40       	sbci	r24, 0x00	; 0
    150c:	90 40       	sbci	r25, 0x00	; 0
    150e:	e1 f7       	brne	.-8      	; 0x1508 <__vector_5+0x1a>
    1510:	00 c0       	rjmp	.+0      	; 0x1512 <__vector_5+0x24>
    1512:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << 2)) {}
    1514:	4a 99       	sbic	0x09, 2	; 9
    1516:	fe cf       	rjmp	.-4      	; 0x1514 <__vector_5+0x26>
		selectPressed = 1;  // Set flag for PD2 button press
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <selectPressed>
	}
	
	if  (PIND & (1 << 4)) {
    151e:	4c 9b       	sbis	0x09, 4	; 9
    1520:	0e c0       	rjmp	.+28     	; 0x153e <__vector_5+0x50>
    1522:	2f ef       	ldi	r18, 0xFF	; 255
    1524:	80 e7       	ldi	r24, 0x70	; 112
    1526:	92 e0       	ldi	r25, 0x02	; 2
    1528:	21 50       	subi	r18, 0x01	; 1
    152a:	80 40       	sbci	r24, 0x00	; 0
    152c:	90 40       	sbci	r25, 0x00	; 0
    152e:	e1 f7       	brne	.-8      	; 0x1528 <__vector_5+0x3a>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <__vector_5+0x44>
    1532:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << 4)) {}
    1534:	4c 99       	sbic	0x09, 4	; 9
    1536:	fe cf       	rjmp	.-4      	; 0x1534 <__vector_5+0x46>
		upPressed = 1;  // Set flag for PD4 button press
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <upPressed>
	}
	
	if  (PIND & (1 << 7)) {
    153e:	4f 9b       	sbis	0x09, 7	; 9
    1540:	0e c0       	rjmp	.+28     	; 0x155e <__vector_5+0x70>
    1542:	2f ef       	ldi	r18, 0xFF	; 255
    1544:	80 e7       	ldi	r24, 0x70	; 112
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	21 50       	subi	r18, 0x01	; 1
    154a:	80 40       	sbci	r24, 0x00	; 0
    154c:	90 40       	sbci	r25, 0x00	; 0
    154e:	e1 f7       	brne	.-8      	; 0x1548 <__vector_5+0x5a>
    1550:	00 c0       	rjmp	.+0      	; 0x1552 <__vector_5+0x64>
    1552:	00 00       	nop
		_delay_ms(50);
		while(PIND & (1 << 7)) {}
    1554:	4f 99       	sbic	0x09, 7	; 9
    1556:	fe cf       	rjmp	.-4      	; 0x1554 <__vector_5+0x66>
		downPressed = 1;  // Set flag for PD7 button press
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
	}
}
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <Generate_Sine_Wave>:
	
};


// Generate a sine wave
void Generate_Sine_Wave(uint16_t amplitude, uint16_t frequency) {
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	8c 01       	movw	r16, r24
	// Implement sine wave generation logic using the MCP4725_SetValue function
	uint16_t dacvalue;
	uint16_t accumulator = 0;
    1578:	c0 e0       	ldi	r28, 0x00	; 0
    157a:	d0 e0       	ldi	r29, 0x00	; 0
	//sizeof(sine_lut) / sizeof(sine_lut[0]);
	
	
	
	
		while(accumulator < 1000){
    157c:	1b c0       	rjmp	.+54     	; 0x15b4 <Generate_Sine_Wave+0x46>
		dacvalue = (uint16_t)  ( (pgm_read_word(&sine_lut[accumulator])) * amplitude )/ 100 ;
    157e:	fe 01       	movw	r30, r28
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	ec 54       	subi	r30, 0x4C	; 76
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	85 91       	lpm	r24, Z+
    158a:	94 91       	lpm	r25, Z
    158c:	80 9f       	mul	r24, r16
    158e:	90 01       	movw	r18, r0
    1590:	81 9f       	mul	r24, r17
    1592:	30 0d       	add	r19, r0
    1594:	90 9f       	mul	r25, r16
    1596:	30 0d       	add	r19, r0
    1598:	11 24       	eor	r1, r1
    159a:	36 95       	lsr	r19
    159c:	27 95       	ror	r18
    159e:	36 95       	lsr	r19
    15a0:	27 95       	ror	r18
    15a2:	ab e7       	ldi	r26, 0x7B	; 123
    15a4:	b4 e1       	ldi	r27, 0x14	; 20
    15a6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__umulhisi3>

		MCP4725_SetValue(dacvalue);
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	0e 94 e6 04 	call	0x9cc	; 0x9cc <MCP4725_SetValue>

		accumulator += stepsize;
    15b2:	a8 96       	adiw	r28, 0x28	; 40
	//sizeof(sine_lut) / sizeof(sine_lut[0]);
	
	
	
	
		while(accumulator < 1000){
    15b4:	c8 3e       	cpi	r28, 0xE8	; 232
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	d8 07       	cpc	r29, r24
    15ba:	08 f3       	brcs	.-62     	; 0x157e <Generate_Sine_Wave+0x10>

		
		}
		//_delay_ms(100);
	
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	08 95       	ret

000015c6 <Generate_Square_Wave>:

// Generate a square wave
void Generate_Square_Wave(uint16_t amplitude, uint16_t frequency) {
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
	// Implement square wave generation logic using the MCP4725_SetValue function
	
	uint16_t dac_value_high = (uint16_t)(40.95 * amplitude);  // High value for the square wave (maximum for a 12-bit DAC)
    15ce:	bc 01       	movw	r22, r24
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
    15d8:	2d ec       	ldi	r18, 0xCD	; 205
    15da:	3c ec       	ldi	r19, 0xCC	; 204
    15dc:	43 e2       	ldi	r20, 0x23	; 35
    15de:	52 e4       	ldi	r21, 0x42	; 66
    15e0:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    15e4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    15e8:	6b 01       	movw	r12, r22
    15ea:	7c 01       	movw	r14, r24
	
	
	MCP4725_SetValue(0);
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <MCP4725_SetValue>
    15f4:	89 ef       	ldi	r24, 0xF9	; 249
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <Generate_Square_Wave+0x32>
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <Generate_Square_Wave+0x38>
    15fe:	00 00       	nop
	_delay_ms(1);
	MCP4725_SetValue(dac_value_high);
    1600:	c6 01       	movw	r24, r12
    1602:	0e 94 e6 04 	call	0x9cc	; 0x9cc <MCP4725_SetValue>
    1606:	89 ef       	ldi	r24, 0xF9	; 249
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <Generate_Square_Wave+0x44>
    160e:	00 c0       	rjmp	.+0      	; 0x1610 <Generate_Square_Wave+0x4a>
    1610:	00 00       	nop
		
		case 1500:
		break;
		
	}*/
}
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	08 95       	ret

0000161c <Generate_Triangle_Wave>:

// Generate a triangle wave
void Generate_Triangle_Wave(uint16_t amplitude, uint16_t frequency) {
    161c:	4f 92       	push	r4
    161e:	5f 92       	push	r5
    1620:	6f 92       	push	r6
    1622:	7f 92       	push	r7
    1624:	8f 92       	push	r8
    1626:	9f 92       	push	r9
    1628:	af 92       	push	r10
    162a:	bf 92       	push	r11
    162c:	cf 92       	push	r12
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	6c 01       	movw	r12, r24
	// Implement triangle wave generation logic using the MCP4725_SetValue function
	
	uint16_t  dac_value = 0;  // Start at the minimum value
	uint16_t step_size = (uint16_t)50 * (amplitude/100);  // Step size for each increment/decrement 1500 steps 2.16kHZ
    163c:	9c 01       	movw	r18, r24
    163e:	36 95       	lsr	r19
    1640:	27 95       	ror	r18
    1642:	36 95       	lsr	r19
    1644:	27 95       	ror	r18
    1646:	ab e7       	ldi	r26, 0x7B	; 123
    1648:	b4 e1       	ldi	r27, 0x14	; 20
    164a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__umulhisi3>
    164e:	96 95       	lsr	r25
    1650:	87 95       	ror	r24
    1652:	22 e3       	ldi	r18, 0x32	; 50
    1654:	28 9f       	mul	r18, r24
    1656:	70 01       	movw	r14, r0
    1658:	29 9f       	mul	r18, r25
    165a:	f0 0c       	add	r15, r0
    165c:	11 24       	eor	r1, r1
	uint8_t direction = 1;  // 1 means rising, 0 means falling
    165e:	11 e0       	ldi	r17, 0x01	; 1

// Generate a triangle wave
void Generate_Triangle_Wave(uint16_t amplitude, uint16_t frequency) {
	// Implement triangle wave generation logic using the MCP4725_SetValue function
	
	uint16_t  dac_value = 0;  // Start at the minimum value
    1660:	c0 e0       	ldi	r28, 0x00	; 0
    1662:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t step_size = (uint16_t)50 * (amplitude/100);  // Step size for each increment/decrement 1500 steps 2.16kHZ
	uint8_t direction = 1;  // 1 means rising, 0 means falling

	while (direction !=2) {
    1664:	32 c0       	rjmp	.+100    	; 0x16ca <Generate_Triangle_Wave+0xae>
		// Send the current DAC value to the MCP4725
		
		MCP4725_SetValue(dac_value);
    1666:	ce 01       	movw	r24, r28
    1668:	0e 94 e6 04 	call	0x9cc	; 0x9cc <MCP4725_SetValue>

		// Adjust DAC value based on the current direction (rising or falling)
		if (direction) {
    166c:	11 23       	and	r17, r17
    166e:	29 f1       	breq	.+74     	; 0x16ba <Generate_Triangle_Wave+0x9e>
			
			dac_value += step_size;  // Increment value while rising
    1670:	ce 0d       	add	r28, r14
    1672:	df 1d       	adc	r29, r15
			
			if (dac_value >=  (uint16_t)amplitude * 40.95 ) {  // If the peak is reached, start falling
    1674:	be 01       	movw	r22, r28
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
    167e:	2b 01       	movw	r4, r22
    1680:	3c 01       	movw	r6, r24
    1682:	b6 01       	movw	r22, r12
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
    168c:	2d ec       	ldi	r18, 0xCD	; 205
    168e:	3c ec       	ldi	r19, 0xCC	; 204
    1690:	43 e2       	ldi	r20, 0x23	; 35
    1692:	52 e4       	ldi	r21, 0x42	; 66
    1694:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    1698:	4b 01       	movw	r8, r22
    169a:	5c 01       	movw	r10, r24
    169c:	9b 01       	movw	r18, r22
    169e:	ac 01       	movw	r20, r24
    16a0:	c3 01       	movw	r24, r6
    16a2:	b2 01       	movw	r22, r4
    16a4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__gesf2>
    16a8:	88 23       	and	r24, r24
    16aa:	7c f0       	brlt	.+30     	; 0x16ca <Generate_Triangle_Wave+0xae>
				direction = 0;  // Switch to falling
				dac_value = (uint16_t)amplitude * 40.95;
    16ac:	c5 01       	movw	r24, r10
    16ae:	b4 01       	movw	r22, r8
    16b0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    16b4:	eb 01       	movw	r28, r22
		if (direction) {
			
			dac_value += step_size;  // Increment value while rising
			
			if (dac_value >=  (uint16_t)amplitude * 40.95 ) {  // If the peak is reached, start falling
				direction = 0;  // Switch to falling
    16b6:	10 e0       	ldi	r17, 0x00	; 0
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <Generate_Triangle_Wave+0xae>
				dac_value = (uint16_t)amplitude * 40.95;
			}
		}
		else {
			
			dac_value -= step_size;  // Decrement value while falling
    16ba:	ce 19       	sub	r28, r14
    16bc:	df 09       	sbc	r29, r15
			
			if (dac_value <= 0) {  // If the bottom is reached, start rising
    16be:	29 f4       	brne	.+10     	; 0x16ca <Generate_Triangle_Wave+0xae>
				direction = 2;  //end function
				dac_value = 0;
				MCP4725_SetValue(dac_value);
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <MCP4725_SetValue>
		else {
			
			dac_value -= step_size;  // Decrement value while falling
			
			if (dac_value <= 0) {  // If the bottom is reached, start rising
				direction = 2;  //end function
    16c8:	12 e0       	ldi	r17, 0x02	; 2
	
	uint16_t  dac_value = 0;  // Start at the minimum value
	uint16_t step_size = (uint16_t)50 * (amplitude/100);  // Step size for each increment/decrement 1500 steps 2.16kHZ
	uint8_t direction = 1;  // 1 means rising, 0 means falling

	while (direction !=2) {
    16ca:	12 30       	cpi	r17, 0x02	; 2
    16cc:	61 f6       	brne	.-104    	; 0x1666 <Generate_Triangle_Wave+0x4a>
			}
		}

		//_delay_ms(3);  // Adjust delay to control the frequency of the triangle wave
	}
}
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	ff 90       	pop	r15
    16d6:	ef 90       	pop	r14
    16d8:	df 90       	pop	r13
    16da:	cf 90       	pop	r12
    16dc:	bf 90       	pop	r11
    16de:	af 90       	pop	r10
    16e0:	9f 90       	pop	r9
    16e2:	8f 90       	pop	r8
    16e4:	7f 90       	pop	r7
    16e6:	6f 90       	pop	r6
    16e8:	5f 90       	pop	r5
    16ea:	4f 90       	pop	r4
    16ec:	08 95       	ret

000016ee <__fixunssfsi>:
    16ee:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_splitA>
    16f2:	88 f0       	brcs	.+34     	; 0x1716 <__fixunssfsi+0x28>
    16f4:	9f 57       	subi	r25, 0x7F	; 127
    16f6:	98 f0       	brcs	.+38     	; 0x171e <__fixunssfsi+0x30>
    16f8:	b9 2f       	mov	r27, r25
    16fa:	99 27       	eor	r25, r25
    16fc:	b7 51       	subi	r27, 0x17	; 23
    16fe:	b0 f0       	brcs	.+44     	; 0x172c <__fixunssfsi+0x3e>
    1700:	e1 f0       	breq	.+56     	; 0x173a <__fixunssfsi+0x4c>
    1702:	66 0f       	add	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	88 1f       	adc	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	1a f0       	brmi	.+6      	; 0x1712 <__fixunssfsi+0x24>
    170c:	ba 95       	dec	r27
    170e:	c9 f7       	brne	.-14     	; 0x1702 <__fixunssfsi+0x14>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <__fixunssfsi+0x4c>
    1712:	b1 30       	cpi	r27, 0x01	; 1
    1714:	91 f0       	breq	.+36     	; 0x173a <__fixunssfsi+0x4c>
    1716:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_zero>
    171a:	b1 e0       	ldi	r27, 0x01	; 1
    171c:	08 95       	ret
    171e:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_zero>
    1722:	67 2f       	mov	r22, r23
    1724:	78 2f       	mov	r23, r24
    1726:	88 27       	eor	r24, r24
    1728:	b8 5f       	subi	r27, 0xF8	; 248
    172a:	39 f0       	breq	.+14     	; 0x173a <__fixunssfsi+0x4c>
    172c:	b9 3f       	cpi	r27, 0xF9	; 249
    172e:	cc f3       	brlt	.-14     	; 0x1722 <__fixunssfsi+0x34>
    1730:	86 95       	lsr	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b3 95       	inc	r27
    1738:	d9 f7       	brne	.-10     	; 0x1730 <__fixunssfsi+0x42>
    173a:	3e f4       	brtc	.+14     	; 0x174a <__fixunssfsi+0x5c>
    173c:	90 95       	com	r25
    173e:	80 95       	com	r24
    1740:	70 95       	com	r23
    1742:	61 95       	neg	r22
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	8f 4f       	sbci	r24, 0xFF	; 255
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	08 95       	ret

0000174c <__floatunsisf>:
    174c:	e8 94       	clt
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <__floatsisf+0x12>

00001750 <__floatsisf>:
    1750:	97 fb       	bst	r25, 7
    1752:	3e f4       	brtc	.+14     	; 0x1762 <__floatsisf+0x12>
    1754:	90 95       	com	r25
    1756:	80 95       	com	r24
    1758:	70 95       	com	r23
    175a:	61 95       	neg	r22
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	8f 4f       	sbci	r24, 0xFF	; 255
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	99 23       	and	r25, r25
    1764:	a9 f0       	breq	.+42     	; 0x1790 <__floatsisf+0x40>
    1766:	f9 2f       	mov	r31, r25
    1768:	96 e9       	ldi	r25, 0x96	; 150
    176a:	bb 27       	eor	r27, r27
    176c:	93 95       	inc	r25
    176e:	f6 95       	lsr	r31
    1770:	87 95       	ror	r24
    1772:	77 95       	ror	r23
    1774:	67 95       	ror	r22
    1776:	b7 95       	ror	r27
    1778:	f1 11       	cpse	r31, r1
    177a:	f8 cf       	rjmp	.-16     	; 0x176c <__floatsisf+0x1c>
    177c:	fa f4       	brpl	.+62     	; 0x17bc <__floatsisf+0x6c>
    177e:	bb 0f       	add	r27, r27
    1780:	11 f4       	brne	.+4      	; 0x1786 <__floatsisf+0x36>
    1782:	60 ff       	sbrs	r22, 0
    1784:	1b c0       	rjmp	.+54     	; 0x17bc <__floatsisf+0x6c>
    1786:	6f 5f       	subi	r22, 0xFF	; 255
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	8f 4f       	sbci	r24, 0xFF	; 255
    178c:	9f 4f       	sbci	r25, 0xFF	; 255
    178e:	16 c0       	rjmp	.+44     	; 0x17bc <__floatsisf+0x6c>
    1790:	88 23       	and	r24, r24
    1792:	11 f0       	breq	.+4      	; 0x1798 <__floatsisf+0x48>
    1794:	96 e9       	ldi	r25, 0x96	; 150
    1796:	11 c0       	rjmp	.+34     	; 0x17ba <__floatsisf+0x6a>
    1798:	77 23       	and	r23, r23
    179a:	21 f0       	breq	.+8      	; 0x17a4 <__floatsisf+0x54>
    179c:	9e e8       	ldi	r25, 0x8E	; 142
    179e:	87 2f       	mov	r24, r23
    17a0:	76 2f       	mov	r23, r22
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <__floatsisf+0x5e>
    17a4:	66 23       	and	r22, r22
    17a6:	71 f0       	breq	.+28     	; 0x17c4 <__floatsisf+0x74>
    17a8:	96 e8       	ldi	r25, 0x86	; 134
    17aa:	86 2f       	mov	r24, r22
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	2a f0       	brmi	.+10     	; 0x17bc <__floatsisf+0x6c>
    17b2:	9a 95       	dec	r25
    17b4:	66 0f       	add	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	88 1f       	adc	r24, r24
    17ba:	da f7       	brpl	.-10     	; 0x17b2 <__floatsisf+0x62>
    17bc:	88 0f       	add	r24, r24
    17be:	96 95       	lsr	r25
    17c0:	87 95       	ror	r24
    17c2:	97 f9       	bld	r25, 7
    17c4:	08 95       	ret

000017c6 <__fp_split3>:
    17c6:	57 fd       	sbrc	r21, 7
    17c8:	90 58       	subi	r25, 0x80	; 128
    17ca:	44 0f       	add	r20, r20
    17cc:	55 1f       	adc	r21, r21
    17ce:	59 f0       	breq	.+22     	; 0x17e6 <__fp_splitA+0x10>
    17d0:	5f 3f       	cpi	r21, 0xFF	; 255
    17d2:	71 f0       	breq	.+28     	; 0x17f0 <__fp_splitA+0x1a>
    17d4:	47 95       	ror	r20

000017d6 <__fp_splitA>:
    17d6:	88 0f       	add	r24, r24
    17d8:	97 fb       	bst	r25, 7
    17da:	99 1f       	adc	r25, r25
    17dc:	61 f0       	breq	.+24     	; 0x17f6 <__fp_splitA+0x20>
    17de:	9f 3f       	cpi	r25, 0xFF	; 255
    17e0:	79 f0       	breq	.+30     	; 0x1800 <__fp_splitA+0x2a>
    17e2:	87 95       	ror	r24
    17e4:	08 95       	ret
    17e6:	12 16       	cp	r1, r18
    17e8:	13 06       	cpc	r1, r19
    17ea:	14 06       	cpc	r1, r20
    17ec:	55 1f       	adc	r21, r21
    17ee:	f2 cf       	rjmp	.-28     	; 0x17d4 <__fp_split3+0xe>
    17f0:	46 95       	lsr	r20
    17f2:	f1 df       	rcall	.-30     	; 0x17d6 <__fp_splitA>
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <__fp_splitA+0x30>
    17f6:	16 16       	cp	r1, r22
    17f8:	17 06       	cpc	r1, r23
    17fa:	18 06       	cpc	r1, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	f1 cf       	rjmp	.-30     	; 0x17e2 <__fp_splitA+0xc>
    1800:	86 95       	lsr	r24
    1802:	71 05       	cpc	r23, r1
    1804:	61 05       	cpc	r22, r1
    1806:	08 94       	sec
    1808:	08 95       	ret

0000180a <__fp_zero>:
    180a:	e8 94       	clt

0000180c <__fp_szero>:
    180c:	bb 27       	eor	r27, r27
    180e:	66 27       	eor	r22, r22
    1810:	77 27       	eor	r23, r23
    1812:	cb 01       	movw	r24, r22
    1814:	97 f9       	bld	r25, 7
    1816:	08 95       	ret

00001818 <__gesf2>:
    1818:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_cmp>
    181c:	08 f4       	brcc	.+2      	; 0x1820 <__gesf2+0x8>
    181e:	8f ef       	ldi	r24, 0xFF	; 255
    1820:	08 95       	ret

00001822 <__mulsf3>:
    1822:	0e 94 24 0c 	call	0x1848	; 0x1848 <__mulsf3x>
    1826:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_round>
    182a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__fp_pscA>
    182e:	38 f0       	brcs	.+14     	; 0x183e <__mulsf3+0x1c>
    1830:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__fp_pscB>
    1834:	20 f0       	brcs	.+8      	; 0x183e <__mulsf3+0x1c>
    1836:	95 23       	and	r25, r21
    1838:	11 f0       	breq	.+4      	; 0x183e <__mulsf3+0x1c>
    183a:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__fp_inf>
    183e:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__fp_nan>
    1842:	11 24       	eor	r1, r1
    1844:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_szero>

00001848 <__mulsf3x>:
    1848:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fp_split3>
    184c:	70 f3       	brcs	.-36     	; 0x182a <__mulsf3+0x8>

0000184e <__mulsf3_pse>:
    184e:	95 9f       	mul	r25, r21
    1850:	c1 f3       	breq	.-16     	; 0x1842 <__mulsf3+0x20>
    1852:	95 0f       	add	r25, r21
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	55 1f       	adc	r21, r21
    1858:	62 9f       	mul	r22, r18
    185a:	f0 01       	movw	r30, r0
    185c:	72 9f       	mul	r23, r18
    185e:	bb 27       	eor	r27, r27
    1860:	f0 0d       	add	r31, r0
    1862:	b1 1d       	adc	r27, r1
    1864:	63 9f       	mul	r22, r19
    1866:	aa 27       	eor	r26, r26
    1868:	f0 0d       	add	r31, r0
    186a:	b1 1d       	adc	r27, r1
    186c:	aa 1f       	adc	r26, r26
    186e:	64 9f       	mul	r22, r20
    1870:	66 27       	eor	r22, r22
    1872:	b0 0d       	add	r27, r0
    1874:	a1 1d       	adc	r26, r1
    1876:	66 1f       	adc	r22, r22
    1878:	82 9f       	mul	r24, r18
    187a:	22 27       	eor	r18, r18
    187c:	b0 0d       	add	r27, r0
    187e:	a1 1d       	adc	r26, r1
    1880:	62 1f       	adc	r22, r18
    1882:	73 9f       	mul	r23, r19
    1884:	b0 0d       	add	r27, r0
    1886:	a1 1d       	adc	r26, r1
    1888:	62 1f       	adc	r22, r18
    188a:	83 9f       	mul	r24, r19
    188c:	a0 0d       	add	r26, r0
    188e:	61 1d       	adc	r22, r1
    1890:	22 1f       	adc	r18, r18
    1892:	74 9f       	mul	r23, r20
    1894:	33 27       	eor	r19, r19
    1896:	a0 0d       	add	r26, r0
    1898:	61 1d       	adc	r22, r1
    189a:	23 1f       	adc	r18, r19
    189c:	84 9f       	mul	r24, r20
    189e:	60 0d       	add	r22, r0
    18a0:	21 1d       	adc	r18, r1
    18a2:	82 2f       	mov	r24, r18
    18a4:	76 2f       	mov	r23, r22
    18a6:	6a 2f       	mov	r22, r26
    18a8:	11 24       	eor	r1, r1
    18aa:	9f 57       	subi	r25, 0x7F	; 127
    18ac:	50 40       	sbci	r21, 0x00	; 0
    18ae:	9a f0       	brmi	.+38     	; 0x18d6 <__mulsf3_pse+0x88>
    18b0:	f1 f0       	breq	.+60     	; 0x18ee <__mulsf3_pse+0xa0>
    18b2:	88 23       	and	r24, r24
    18b4:	4a f0       	brmi	.+18     	; 0x18c8 <__mulsf3_pse+0x7a>
    18b6:	ee 0f       	add	r30, r30
    18b8:	ff 1f       	adc	r31, r31
    18ba:	bb 1f       	adc	r27, r27
    18bc:	66 1f       	adc	r22, r22
    18be:	77 1f       	adc	r23, r23
    18c0:	88 1f       	adc	r24, r24
    18c2:	91 50       	subi	r25, 0x01	; 1
    18c4:	50 40       	sbci	r21, 0x00	; 0
    18c6:	a9 f7       	brne	.-22     	; 0x18b2 <__mulsf3_pse+0x64>
    18c8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ca:	51 05       	cpc	r21, r1
    18cc:	80 f0       	brcs	.+32     	; 0x18ee <__mulsf3_pse+0xa0>
    18ce:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__fp_inf>
    18d2:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_szero>
    18d6:	5f 3f       	cpi	r21, 0xFF	; 255
    18d8:	e4 f3       	brlt	.-8      	; 0x18d2 <__mulsf3_pse+0x84>
    18da:	98 3e       	cpi	r25, 0xE8	; 232
    18dc:	d4 f3       	brlt	.-12     	; 0x18d2 <__mulsf3_pse+0x84>
    18de:	86 95       	lsr	r24
    18e0:	77 95       	ror	r23
    18e2:	67 95       	ror	r22
    18e4:	b7 95       	ror	r27
    18e6:	f7 95       	ror	r31
    18e8:	e7 95       	ror	r30
    18ea:	9f 5f       	subi	r25, 0xFF	; 255
    18ec:	c1 f7       	brne	.-16     	; 0x18de <__mulsf3_pse+0x90>
    18ee:	fe 2b       	or	r31, r30
    18f0:	88 0f       	add	r24, r24
    18f2:	91 1d       	adc	r25, r1
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	97 f9       	bld	r25, 7
    18fa:	08 95       	ret

000018fc <__fp_cmp>:
    18fc:	99 0f       	add	r25, r25
    18fe:	00 08       	sbc	r0, r0
    1900:	55 0f       	add	r21, r21
    1902:	aa 0b       	sbc	r26, r26
    1904:	e0 e8       	ldi	r30, 0x80	; 128
    1906:	fe ef       	ldi	r31, 0xFE	; 254
    1908:	16 16       	cp	r1, r22
    190a:	17 06       	cpc	r1, r23
    190c:	e8 07       	cpc	r30, r24
    190e:	f9 07       	cpc	r31, r25
    1910:	c0 f0       	brcs	.+48     	; 0x1942 <__fp_cmp+0x46>
    1912:	12 16       	cp	r1, r18
    1914:	13 06       	cpc	r1, r19
    1916:	e4 07       	cpc	r30, r20
    1918:	f5 07       	cpc	r31, r21
    191a:	98 f0       	brcs	.+38     	; 0x1942 <__fp_cmp+0x46>
    191c:	62 1b       	sub	r22, r18
    191e:	73 0b       	sbc	r23, r19
    1920:	84 0b       	sbc	r24, r20
    1922:	95 0b       	sbc	r25, r21
    1924:	39 f4       	brne	.+14     	; 0x1934 <__fp_cmp+0x38>
    1926:	0a 26       	eor	r0, r26
    1928:	61 f0       	breq	.+24     	; 0x1942 <__fp_cmp+0x46>
    192a:	23 2b       	or	r18, r19
    192c:	24 2b       	or	r18, r20
    192e:	25 2b       	or	r18, r21
    1930:	21 f4       	brne	.+8      	; 0x193a <__fp_cmp+0x3e>
    1932:	08 95       	ret
    1934:	0a 26       	eor	r0, r26
    1936:	09 f4       	brne	.+2      	; 0x193a <__fp_cmp+0x3e>
    1938:	a1 40       	sbci	r26, 0x01	; 1
    193a:	a6 95       	lsr	r26
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	81 1d       	adc	r24, r1
    1940:	81 1d       	adc	r24, r1
    1942:	08 95       	ret

00001944 <__fp_inf>:
    1944:	97 f9       	bld	r25, 7
    1946:	9f 67       	ori	r25, 0x7F	; 127
    1948:	80 e8       	ldi	r24, 0x80	; 128
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	08 95       	ret

00001950 <__fp_nan>:
    1950:	9f ef       	ldi	r25, 0xFF	; 255
    1952:	80 ec       	ldi	r24, 0xC0	; 192
    1954:	08 95       	ret

00001956 <__fp_pscA>:
    1956:	00 24       	eor	r0, r0
    1958:	0a 94       	dec	r0
    195a:	16 16       	cp	r1, r22
    195c:	17 06       	cpc	r1, r23
    195e:	18 06       	cpc	r1, r24
    1960:	09 06       	cpc	r0, r25
    1962:	08 95       	ret

00001964 <__fp_pscB>:
    1964:	00 24       	eor	r0, r0
    1966:	0a 94       	dec	r0
    1968:	12 16       	cp	r1, r18
    196a:	13 06       	cpc	r1, r19
    196c:	14 06       	cpc	r1, r20
    196e:	05 06       	cpc	r0, r21
    1970:	08 95       	ret

00001972 <__fp_round>:
    1972:	09 2e       	mov	r0, r25
    1974:	03 94       	inc	r0
    1976:	00 0c       	add	r0, r0
    1978:	11 f4       	brne	.+4      	; 0x197e <__fp_round+0xc>
    197a:	88 23       	and	r24, r24
    197c:	52 f0       	brmi	.+20     	; 0x1992 <__fp_round+0x20>
    197e:	bb 0f       	add	r27, r27
    1980:	40 f4       	brcc	.+16     	; 0x1992 <__fp_round+0x20>
    1982:	bf 2b       	or	r27, r31
    1984:	11 f4       	brne	.+4      	; 0x198a <__fp_round+0x18>
    1986:	60 ff       	sbrs	r22, 0
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <__fp_round+0x20>
    198a:	6f 5f       	subi	r22, 0xFF	; 255
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	8f 4f       	sbci	r24, 0xFF	; 255
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	08 95       	ret

00001994 <__udivmodsi4>:
    1994:	a1 e2       	ldi	r26, 0x21	; 33
    1996:	1a 2e       	mov	r1, r26
    1998:	aa 1b       	sub	r26, r26
    199a:	bb 1b       	sub	r27, r27
    199c:	fd 01       	movw	r30, r26
    199e:	0d c0       	rjmp	.+26     	; 0x19ba <__udivmodsi4_ep>

000019a0 <__udivmodsi4_loop>:
    19a0:	aa 1f       	adc	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	ee 1f       	adc	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	a2 17       	cp	r26, r18
    19aa:	b3 07       	cpc	r27, r19
    19ac:	e4 07       	cpc	r30, r20
    19ae:	f5 07       	cpc	r31, r21
    19b0:	20 f0       	brcs	.+8      	; 0x19ba <__udivmodsi4_ep>
    19b2:	a2 1b       	sub	r26, r18
    19b4:	b3 0b       	sbc	r27, r19
    19b6:	e4 0b       	sbc	r30, r20
    19b8:	f5 0b       	sbc	r31, r21

000019ba <__udivmodsi4_ep>:
    19ba:	66 1f       	adc	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	1a 94       	dec	r1
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <__udivmodsi4_loop>
    19c6:	60 95       	com	r22
    19c8:	70 95       	com	r23
    19ca:	80 95       	com	r24
    19cc:	90 95       	com	r25
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	bd 01       	movw	r22, r26
    19d4:	cf 01       	movw	r24, r30
    19d6:	08 95       	ret

000019d8 <__umulhisi3>:
    19d8:	a2 9f       	mul	r26, r18
    19da:	b0 01       	movw	r22, r0
    19dc:	b3 9f       	mul	r27, r19
    19de:	c0 01       	movw	r24, r0
    19e0:	a3 9f       	mul	r26, r19
    19e2:	70 0d       	add	r23, r0
    19e4:	81 1d       	adc	r24, r1
    19e6:	11 24       	eor	r1, r1
    19e8:	91 1d       	adc	r25, r1
    19ea:	b2 9f       	mul	r27, r18
    19ec:	70 0d       	add	r23, r0
    19ee:	81 1d       	adc	r24, r1
    19f0:	11 24       	eor	r1, r1
    19f2:	91 1d       	adc	r25, r1
    19f4:	08 95       	ret

000019f6 <sprintf>:
    19f6:	ae e0       	ldi	r26, 0x0E	; 14
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e1 e0       	ldi	r30, 0x01	; 1
    19fc:	fd e0       	ldi	r31, 0x0D	; 13
    19fe:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__prologue_saves__+0x1c>
    1a02:	0d 89       	ldd	r16, Y+21	; 0x15
    1a04:	1e 89       	ldd	r17, Y+22	; 0x16
    1a06:	86 e0       	ldi	r24, 0x06	; 6
    1a08:	8c 83       	std	Y+4, r24	; 0x04
    1a0a:	1a 83       	std	Y+2, r17	; 0x02
    1a0c:	09 83       	std	Y+1, r16	; 0x01
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	9f e7       	ldi	r25, 0x7F	; 127
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	ae 01       	movw	r20, r28
    1a18:	47 5e       	subi	r20, 0xE7	; 231
    1a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1c:	6f 89       	ldd	r22, Y+23	; 0x17
    1a1e:	78 8d       	ldd	r23, Y+24	; 0x18
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <vfprintf>
    1a28:	ef 81       	ldd	r30, Y+7	; 0x07
    1a2a:	f8 85       	ldd	r31, Y+8	; 0x08
    1a2c:	e0 0f       	add	r30, r16
    1a2e:	f1 1f       	adc	r31, r17
    1a30:	10 82       	st	Z, r1
    1a32:	2e 96       	adiw	r28, 0x0e	; 14
    1a34:	e4 e0       	ldi	r30, 0x04	; 4
    1a36:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__epilogue_restores__+0x1c>

00001a3a <vfprintf>:
    1a3a:	ab e0       	ldi	r26, 0x0B	; 11
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e3 e2       	ldi	r30, 0x23	; 35
    1a40:	fd e0       	ldi	r31, 0x0D	; 13
    1a42:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__prologue_saves__>
    1a46:	6c 01       	movw	r12, r24
    1a48:	7b 01       	movw	r14, r22
    1a4a:	8a 01       	movw	r16, r20
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	17 82       	std	Z+7, r1	; 0x07
    1a50:	16 82       	std	Z+6, r1	; 0x06
    1a52:	83 81       	ldd	r24, Z+3	; 0x03
    1a54:	81 ff       	sbrs	r24, 1
    1a56:	cc c1       	rjmp	.+920    	; 0x1df0 <vfprintf+0x3b6>
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	3c 01       	movw	r6, r24
    1a5e:	f6 01       	movw	r30, r12
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	f7 01       	movw	r30, r14
    1a64:	93 fd       	sbrc	r25, 3
    1a66:	85 91       	lpm	r24, Z+
    1a68:	93 ff       	sbrs	r25, 3
    1a6a:	81 91       	ld	r24, Z+
    1a6c:	7f 01       	movw	r14, r30
    1a6e:	88 23       	and	r24, r24
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <vfprintf+0x3a>
    1a72:	ba c1       	rjmp	.+884    	; 0x1de8 <vfprintf+0x3ae>
    1a74:	85 32       	cpi	r24, 0x25	; 37
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <vfprintf+0x4c>
    1a78:	93 fd       	sbrc	r25, 3
    1a7a:	85 91       	lpm	r24, Z+
    1a7c:	93 ff       	sbrs	r25, 3
    1a7e:	81 91       	ld	r24, Z+
    1a80:	7f 01       	movw	r14, r30
    1a82:	85 32       	cpi	r24, 0x25	; 37
    1a84:	29 f4       	brne	.+10     	; 0x1a90 <vfprintf+0x56>
    1a86:	b6 01       	movw	r22, r12
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1a8e:	e7 cf       	rjmp	.-50     	; 0x1a5e <vfprintf+0x24>
    1a90:	91 2c       	mov	r9, r1
    1a92:	21 2c       	mov	r2, r1
    1a94:	31 2c       	mov	r3, r1
    1a96:	ff e1       	ldi	r31, 0x1F	; 31
    1a98:	f3 15       	cp	r31, r3
    1a9a:	d8 f0       	brcs	.+54     	; 0x1ad2 <vfprintf+0x98>
    1a9c:	8b 32       	cpi	r24, 0x2B	; 43
    1a9e:	79 f0       	breq	.+30     	; 0x1abe <vfprintf+0x84>
    1aa0:	38 f4       	brcc	.+14     	; 0x1ab0 <vfprintf+0x76>
    1aa2:	80 32       	cpi	r24, 0x20	; 32
    1aa4:	79 f0       	breq	.+30     	; 0x1ac4 <vfprintf+0x8a>
    1aa6:	83 32       	cpi	r24, 0x23	; 35
    1aa8:	a1 f4       	brne	.+40     	; 0x1ad2 <vfprintf+0x98>
    1aaa:	23 2d       	mov	r18, r3
    1aac:	20 61       	ori	r18, 0x10	; 16
    1aae:	1d c0       	rjmp	.+58     	; 0x1aea <vfprintf+0xb0>
    1ab0:	8d 32       	cpi	r24, 0x2D	; 45
    1ab2:	61 f0       	breq	.+24     	; 0x1acc <vfprintf+0x92>
    1ab4:	80 33       	cpi	r24, 0x30	; 48
    1ab6:	69 f4       	brne	.+26     	; 0x1ad2 <vfprintf+0x98>
    1ab8:	23 2d       	mov	r18, r3
    1aba:	21 60       	ori	r18, 0x01	; 1
    1abc:	16 c0       	rjmp	.+44     	; 0x1aea <vfprintf+0xb0>
    1abe:	83 2d       	mov	r24, r3
    1ac0:	82 60       	ori	r24, 0x02	; 2
    1ac2:	38 2e       	mov	r3, r24
    1ac4:	e3 2d       	mov	r30, r3
    1ac6:	e4 60       	ori	r30, 0x04	; 4
    1ac8:	3e 2e       	mov	r3, r30
    1aca:	2a c0       	rjmp	.+84     	; 0x1b20 <vfprintf+0xe6>
    1acc:	f3 2d       	mov	r31, r3
    1ace:	f8 60       	ori	r31, 0x08	; 8
    1ad0:	1d c0       	rjmp	.+58     	; 0x1b0c <vfprintf+0xd2>
    1ad2:	37 fc       	sbrc	r3, 7
    1ad4:	2d c0       	rjmp	.+90     	; 0x1b30 <vfprintf+0xf6>
    1ad6:	20 ed       	ldi	r18, 0xD0	; 208
    1ad8:	28 0f       	add	r18, r24
    1ada:	2a 30       	cpi	r18, 0x0A	; 10
    1adc:	40 f0       	brcs	.+16     	; 0x1aee <vfprintf+0xb4>
    1ade:	8e 32       	cpi	r24, 0x2E	; 46
    1ae0:	b9 f4       	brne	.+46     	; 0x1b10 <vfprintf+0xd6>
    1ae2:	36 fc       	sbrc	r3, 6
    1ae4:	81 c1       	rjmp	.+770    	; 0x1de8 <vfprintf+0x3ae>
    1ae6:	23 2d       	mov	r18, r3
    1ae8:	20 64       	ori	r18, 0x40	; 64
    1aea:	32 2e       	mov	r3, r18
    1aec:	19 c0       	rjmp	.+50     	; 0x1b20 <vfprintf+0xe6>
    1aee:	36 fe       	sbrs	r3, 6
    1af0:	06 c0       	rjmp	.+12     	; 0x1afe <vfprintf+0xc4>
    1af2:	8a e0       	ldi	r24, 0x0A	; 10
    1af4:	98 9e       	mul	r9, r24
    1af6:	20 0d       	add	r18, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	92 2e       	mov	r9, r18
    1afc:	11 c0       	rjmp	.+34     	; 0x1b20 <vfprintf+0xe6>
    1afe:	ea e0       	ldi	r30, 0x0A	; 10
    1b00:	2e 9e       	mul	r2, r30
    1b02:	20 0d       	add	r18, r0
    1b04:	11 24       	eor	r1, r1
    1b06:	22 2e       	mov	r2, r18
    1b08:	f3 2d       	mov	r31, r3
    1b0a:	f0 62       	ori	r31, 0x20	; 32
    1b0c:	3f 2e       	mov	r3, r31
    1b0e:	08 c0       	rjmp	.+16     	; 0x1b20 <vfprintf+0xe6>
    1b10:	8c 36       	cpi	r24, 0x6C	; 108
    1b12:	21 f4       	brne	.+8      	; 0x1b1c <vfprintf+0xe2>
    1b14:	83 2d       	mov	r24, r3
    1b16:	80 68       	ori	r24, 0x80	; 128
    1b18:	38 2e       	mov	r3, r24
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <vfprintf+0xe6>
    1b1c:	88 36       	cpi	r24, 0x68	; 104
    1b1e:	41 f4       	brne	.+16     	; 0x1b30 <vfprintf+0xf6>
    1b20:	f7 01       	movw	r30, r14
    1b22:	93 fd       	sbrc	r25, 3
    1b24:	85 91       	lpm	r24, Z+
    1b26:	93 ff       	sbrs	r25, 3
    1b28:	81 91       	ld	r24, Z+
    1b2a:	7f 01       	movw	r14, r30
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	b3 cf       	rjmp	.-154    	; 0x1a96 <vfprintf+0x5c>
    1b30:	98 2f       	mov	r25, r24
    1b32:	9f 7d       	andi	r25, 0xDF	; 223
    1b34:	95 54       	subi	r25, 0x45	; 69
    1b36:	93 30       	cpi	r25, 0x03	; 3
    1b38:	28 f4       	brcc	.+10     	; 0x1b44 <vfprintf+0x10a>
    1b3a:	0c 5f       	subi	r16, 0xFC	; 252
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	9f e3       	ldi	r25, 0x3F	; 63
    1b40:	99 83       	std	Y+1, r25	; 0x01
    1b42:	0d c0       	rjmp	.+26     	; 0x1b5e <vfprintf+0x124>
    1b44:	83 36       	cpi	r24, 0x63	; 99
    1b46:	31 f0       	breq	.+12     	; 0x1b54 <vfprintf+0x11a>
    1b48:	83 37       	cpi	r24, 0x73	; 115
    1b4a:	71 f0       	breq	.+28     	; 0x1b68 <vfprintf+0x12e>
    1b4c:	83 35       	cpi	r24, 0x53	; 83
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <vfprintf+0x118>
    1b50:	59 c0       	rjmp	.+178    	; 0x1c04 <vfprintf+0x1ca>
    1b52:	21 c0       	rjmp	.+66     	; 0x1b96 <vfprintf+0x15c>
    1b54:	f8 01       	movw	r30, r16
    1b56:	80 81       	ld	r24, Z
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	0e 5f       	subi	r16, 0xFE	; 254
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	88 24       	eor	r8, r8
    1b60:	83 94       	inc	r8
    1b62:	91 2c       	mov	r9, r1
    1b64:	53 01       	movw	r10, r6
    1b66:	13 c0       	rjmp	.+38     	; 0x1b8e <vfprintf+0x154>
    1b68:	28 01       	movw	r4, r16
    1b6a:	f2 e0       	ldi	r31, 0x02	; 2
    1b6c:	4f 0e       	add	r4, r31
    1b6e:	51 1c       	adc	r5, r1
    1b70:	f8 01       	movw	r30, r16
    1b72:	a0 80       	ld	r10, Z
    1b74:	b1 80       	ldd	r11, Z+1	; 0x01
    1b76:	36 fe       	sbrs	r3, 6
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <vfprintf+0x146>
    1b7a:	69 2d       	mov	r22, r9
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <vfprintf+0x14a>
    1b80:	6f ef       	ldi	r22, 0xFF	; 255
    1b82:	7f ef       	ldi	r23, 0xFF	; 255
    1b84:	c5 01       	movw	r24, r10
    1b86:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <strnlen>
    1b8a:	4c 01       	movw	r8, r24
    1b8c:	82 01       	movw	r16, r4
    1b8e:	f3 2d       	mov	r31, r3
    1b90:	ff 77       	andi	r31, 0x7F	; 127
    1b92:	3f 2e       	mov	r3, r31
    1b94:	16 c0       	rjmp	.+44     	; 0x1bc2 <vfprintf+0x188>
    1b96:	28 01       	movw	r4, r16
    1b98:	22 e0       	ldi	r18, 0x02	; 2
    1b9a:	42 0e       	add	r4, r18
    1b9c:	51 1c       	adc	r5, r1
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	a0 80       	ld	r10, Z
    1ba2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ba4:	36 fe       	sbrs	r3, 6
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <vfprintf+0x174>
    1ba8:	69 2d       	mov	r22, r9
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x178>
    1bae:	6f ef       	ldi	r22, 0xFF	; 255
    1bb0:	7f ef       	ldi	r23, 0xFF	; 255
    1bb2:	c5 01       	movw	r24, r10
    1bb4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <strnlen_P>
    1bb8:	4c 01       	movw	r8, r24
    1bba:	f3 2d       	mov	r31, r3
    1bbc:	f0 68       	ori	r31, 0x80	; 128
    1bbe:	3f 2e       	mov	r3, r31
    1bc0:	82 01       	movw	r16, r4
    1bc2:	33 fc       	sbrc	r3, 3
    1bc4:	1b c0       	rjmp	.+54     	; 0x1bfc <vfprintf+0x1c2>
    1bc6:	82 2d       	mov	r24, r2
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	88 16       	cp	r8, r24
    1bcc:	99 06       	cpc	r9, r25
    1bce:	b0 f4       	brcc	.+44     	; 0x1bfc <vfprintf+0x1c2>
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	80 e2       	ldi	r24, 0x20	; 32
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1bda:	2a 94       	dec	r2
    1bdc:	f4 cf       	rjmp	.-24     	; 0x1bc6 <vfprintf+0x18c>
    1bde:	f5 01       	movw	r30, r10
    1be0:	37 fc       	sbrc	r3, 7
    1be2:	85 91       	lpm	r24, Z+
    1be4:	37 fe       	sbrs	r3, 7
    1be6:	81 91       	ld	r24, Z+
    1be8:	5f 01       	movw	r10, r30
    1bea:	b6 01       	movw	r22, r12
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1bf2:	21 10       	cpse	r2, r1
    1bf4:	2a 94       	dec	r2
    1bf6:	21 e0       	ldi	r18, 0x01	; 1
    1bf8:	82 1a       	sub	r8, r18
    1bfa:	91 08       	sbc	r9, r1
    1bfc:	81 14       	cp	r8, r1
    1bfe:	91 04       	cpc	r9, r1
    1c00:	71 f7       	brne	.-36     	; 0x1bde <vfprintf+0x1a4>
    1c02:	e8 c0       	rjmp	.+464    	; 0x1dd4 <vfprintf+0x39a>
    1c04:	84 36       	cpi	r24, 0x64	; 100
    1c06:	11 f0       	breq	.+4      	; 0x1c0c <vfprintf+0x1d2>
    1c08:	89 36       	cpi	r24, 0x69	; 105
    1c0a:	41 f5       	brne	.+80     	; 0x1c5c <vfprintf+0x222>
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	37 fe       	sbrs	r3, 7
    1c10:	07 c0       	rjmp	.+14     	; 0x1c20 <vfprintf+0x1e6>
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	0c 5f       	subi	r16, 0xFC	; 252
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1e:	08 c0       	rjmp	.+16     	; 0x1c30 <vfprintf+0x1f6>
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	07 2e       	mov	r0, r23
    1c26:	00 0c       	add	r0, r0
    1c28:	88 0b       	sbc	r24, r24
    1c2a:	99 0b       	sbc	r25, r25
    1c2c:	0e 5f       	subi	r16, 0xFE	; 254
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	f3 2d       	mov	r31, r3
    1c32:	ff 76       	andi	r31, 0x6F	; 111
    1c34:	3f 2e       	mov	r3, r31
    1c36:	97 ff       	sbrs	r25, 7
    1c38:	09 c0       	rjmp	.+18     	; 0x1c4c <vfprintf+0x212>
    1c3a:	90 95       	com	r25
    1c3c:	80 95       	com	r24
    1c3e:	70 95       	com	r23
    1c40:	61 95       	neg	r22
    1c42:	7f 4f       	sbci	r23, 0xFF	; 255
    1c44:	8f 4f       	sbci	r24, 0xFF	; 255
    1c46:	9f 4f       	sbci	r25, 0xFF	; 255
    1c48:	f0 68       	ori	r31, 0x80	; 128
    1c4a:	3f 2e       	mov	r3, r31
    1c4c:	2a e0       	ldi	r18, 0x0A	; 10
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	a3 01       	movw	r20, r6
    1c52:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__ultoa_invert>
    1c56:	88 2e       	mov	r8, r24
    1c58:	86 18       	sub	r8, r6
    1c5a:	45 c0       	rjmp	.+138    	; 0x1ce6 <vfprintf+0x2ac>
    1c5c:	85 37       	cpi	r24, 0x75	; 117
    1c5e:	31 f4       	brne	.+12     	; 0x1c6c <vfprintf+0x232>
    1c60:	23 2d       	mov	r18, r3
    1c62:	2f 7e       	andi	r18, 0xEF	; 239
    1c64:	b2 2e       	mov	r11, r18
    1c66:	2a e0       	ldi	r18, 0x0A	; 10
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	25 c0       	rjmp	.+74     	; 0x1cb6 <vfprintf+0x27c>
    1c6c:	93 2d       	mov	r25, r3
    1c6e:	99 7f       	andi	r25, 0xF9	; 249
    1c70:	b9 2e       	mov	r11, r25
    1c72:	8f 36       	cpi	r24, 0x6F	; 111
    1c74:	c1 f0       	breq	.+48     	; 0x1ca6 <vfprintf+0x26c>
    1c76:	18 f4       	brcc	.+6      	; 0x1c7e <vfprintf+0x244>
    1c78:	88 35       	cpi	r24, 0x58	; 88
    1c7a:	79 f0       	breq	.+30     	; 0x1c9a <vfprintf+0x260>
    1c7c:	b5 c0       	rjmp	.+362    	; 0x1de8 <vfprintf+0x3ae>
    1c7e:	80 37       	cpi	r24, 0x70	; 112
    1c80:	19 f0       	breq	.+6      	; 0x1c88 <vfprintf+0x24e>
    1c82:	88 37       	cpi	r24, 0x78	; 120
    1c84:	21 f0       	breq	.+8      	; 0x1c8e <vfprintf+0x254>
    1c86:	b0 c0       	rjmp	.+352    	; 0x1de8 <vfprintf+0x3ae>
    1c88:	e9 2f       	mov	r30, r25
    1c8a:	e0 61       	ori	r30, 0x10	; 16
    1c8c:	be 2e       	mov	r11, r30
    1c8e:	b4 fe       	sbrs	r11, 4
    1c90:	0d c0       	rjmp	.+26     	; 0x1cac <vfprintf+0x272>
    1c92:	fb 2d       	mov	r31, r11
    1c94:	f4 60       	ori	r31, 0x04	; 4
    1c96:	bf 2e       	mov	r11, r31
    1c98:	09 c0       	rjmp	.+18     	; 0x1cac <vfprintf+0x272>
    1c9a:	34 fe       	sbrs	r3, 4
    1c9c:	0a c0       	rjmp	.+20     	; 0x1cb2 <vfprintf+0x278>
    1c9e:	29 2f       	mov	r18, r25
    1ca0:	26 60       	ori	r18, 0x06	; 6
    1ca2:	b2 2e       	mov	r11, r18
    1ca4:	06 c0       	rjmp	.+12     	; 0x1cb2 <vfprintf+0x278>
    1ca6:	28 e0       	ldi	r18, 0x08	; 8
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <vfprintf+0x27c>
    1cac:	20 e1       	ldi	r18, 0x10	; 16
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <vfprintf+0x27c>
    1cb2:	20 e1       	ldi	r18, 0x10	; 16
    1cb4:	32 e0       	ldi	r19, 0x02	; 2
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	b7 fe       	sbrs	r11, 7
    1cba:	07 c0       	rjmp	.+14     	; 0x1cca <vfprintf+0x290>
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	0c 5f       	subi	r16, 0xFC	; 252
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	06 c0       	rjmp	.+12     	; 0x1cd6 <vfprintf+0x29c>
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 5f       	subi	r16, 0xFE	; 254
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	a3 01       	movw	r20, r6
    1cd8:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__ultoa_invert>
    1cdc:	88 2e       	mov	r8, r24
    1cde:	86 18       	sub	r8, r6
    1ce0:	fb 2d       	mov	r31, r11
    1ce2:	ff 77       	andi	r31, 0x7F	; 127
    1ce4:	3f 2e       	mov	r3, r31
    1ce6:	36 fe       	sbrs	r3, 6
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <vfprintf+0x2ca>
    1cea:	23 2d       	mov	r18, r3
    1cec:	2e 7f       	andi	r18, 0xFE	; 254
    1cee:	a2 2e       	mov	r10, r18
    1cf0:	89 14       	cp	r8, r9
    1cf2:	58 f4       	brcc	.+22     	; 0x1d0a <vfprintf+0x2d0>
    1cf4:	34 fe       	sbrs	r3, 4
    1cf6:	0b c0       	rjmp	.+22     	; 0x1d0e <vfprintf+0x2d4>
    1cf8:	32 fc       	sbrc	r3, 2
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <vfprintf+0x2d4>
    1cfc:	83 2d       	mov	r24, r3
    1cfe:	8e 7e       	andi	r24, 0xEE	; 238
    1d00:	a8 2e       	mov	r10, r24
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <vfprintf+0x2d4>
    1d04:	b8 2c       	mov	r11, r8
    1d06:	a3 2c       	mov	r10, r3
    1d08:	03 c0       	rjmp	.+6      	; 0x1d10 <vfprintf+0x2d6>
    1d0a:	b8 2c       	mov	r11, r8
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <vfprintf+0x2d6>
    1d0e:	b9 2c       	mov	r11, r9
    1d10:	a4 fe       	sbrs	r10, 4
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <vfprintf+0x2f8>
    1d14:	fe 01       	movw	r30, r28
    1d16:	e8 0d       	add	r30, r8
    1d18:	f1 1d       	adc	r31, r1
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 33       	cpi	r24, 0x30	; 48
    1d1e:	21 f4       	brne	.+8      	; 0x1d28 <vfprintf+0x2ee>
    1d20:	9a 2d       	mov	r25, r10
    1d22:	99 7e       	andi	r25, 0xE9	; 233
    1d24:	a9 2e       	mov	r10, r25
    1d26:	09 c0       	rjmp	.+18     	; 0x1d3a <vfprintf+0x300>
    1d28:	a2 fe       	sbrs	r10, 2
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <vfprintf+0x2fe>
    1d2c:	b3 94       	inc	r11
    1d2e:	b3 94       	inc	r11
    1d30:	04 c0       	rjmp	.+8      	; 0x1d3a <vfprintf+0x300>
    1d32:	8a 2d       	mov	r24, r10
    1d34:	86 78       	andi	r24, 0x86	; 134
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <vfprintf+0x300>
    1d38:	b3 94       	inc	r11
    1d3a:	a3 fc       	sbrc	r10, 3
    1d3c:	11 c0       	rjmp	.+34     	; 0x1d60 <vfprintf+0x326>
    1d3e:	a0 fe       	sbrs	r10, 0
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <vfprintf+0x314>
    1d42:	b2 14       	cp	r11, r2
    1d44:	88 f4       	brcc	.+34     	; 0x1d68 <vfprintf+0x32e>
    1d46:	28 0c       	add	r2, r8
    1d48:	92 2c       	mov	r9, r2
    1d4a:	9b 18       	sub	r9, r11
    1d4c:	0e c0       	rjmp	.+28     	; 0x1d6a <vfprintf+0x330>
    1d4e:	b2 14       	cp	r11, r2
    1d50:	60 f4       	brcc	.+24     	; 0x1d6a <vfprintf+0x330>
    1d52:	b6 01       	movw	r22, r12
    1d54:	80 e2       	ldi	r24, 0x20	; 32
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1d5c:	b3 94       	inc	r11
    1d5e:	f7 cf       	rjmp	.-18     	; 0x1d4e <vfprintf+0x314>
    1d60:	b2 14       	cp	r11, r2
    1d62:	18 f4       	brcc	.+6      	; 0x1d6a <vfprintf+0x330>
    1d64:	2b 18       	sub	r2, r11
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <vfprintf+0x332>
    1d68:	98 2c       	mov	r9, r8
    1d6a:	21 2c       	mov	r2, r1
    1d6c:	a4 fe       	sbrs	r10, 4
    1d6e:	10 c0       	rjmp	.+32     	; 0x1d90 <vfprintf+0x356>
    1d70:	b6 01       	movw	r22, r12
    1d72:	80 e3       	ldi	r24, 0x30	; 48
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1d7a:	a2 fe       	sbrs	r10, 2
    1d7c:	17 c0       	rjmp	.+46     	; 0x1dac <vfprintf+0x372>
    1d7e:	a1 fc       	sbrc	r10, 1
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <vfprintf+0x34e>
    1d82:	88 e7       	ldi	r24, 0x78	; 120
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <vfprintf+0x352>
    1d88:	88 e5       	ldi	r24, 0x58	; 88
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	b6 01       	movw	r22, r12
    1d8e:	0c c0       	rjmp	.+24     	; 0x1da8 <vfprintf+0x36e>
    1d90:	8a 2d       	mov	r24, r10
    1d92:	86 78       	andi	r24, 0x86	; 134
    1d94:	59 f0       	breq	.+22     	; 0x1dac <vfprintf+0x372>
    1d96:	a1 fe       	sbrs	r10, 1
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <vfprintf+0x364>
    1d9a:	8b e2       	ldi	r24, 0x2B	; 43
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <vfprintf+0x366>
    1d9e:	80 e2       	ldi	r24, 0x20	; 32
    1da0:	a7 fc       	sbrc	r10, 7
    1da2:	8d e2       	ldi	r24, 0x2D	; 45
    1da4:	b6 01       	movw	r22, r12
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1dac:	89 14       	cp	r8, r9
    1dae:	38 f4       	brcc	.+14     	; 0x1dbe <vfprintf+0x384>
    1db0:	b6 01       	movw	r22, r12
    1db2:	80 e3       	ldi	r24, 0x30	; 48
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1dba:	9a 94       	dec	r9
    1dbc:	f7 cf       	rjmp	.-18     	; 0x1dac <vfprintf+0x372>
    1dbe:	8a 94       	dec	r8
    1dc0:	f3 01       	movw	r30, r6
    1dc2:	e8 0d       	add	r30, r8
    1dc4:	f1 1d       	adc	r31, r1
    1dc6:	80 81       	ld	r24, Z
    1dc8:	b6 01       	movw	r22, r12
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1dd0:	81 10       	cpse	r8, r1
    1dd2:	f5 cf       	rjmp	.-22     	; 0x1dbe <vfprintf+0x384>
    1dd4:	22 20       	and	r2, r2
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <vfprintf+0x3a0>
    1dd8:	42 ce       	rjmp	.-892    	; 0x1a5e <vfprintf+0x24>
    1dda:	b6 01       	movw	r22, r12
    1ddc:	80 e2       	ldi	r24, 0x20	; 32
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <fputc>
    1de4:	2a 94       	dec	r2
    1de6:	f6 cf       	rjmp	.-20     	; 0x1dd4 <vfprintf+0x39a>
    1de8:	f6 01       	movw	r30, r12
    1dea:	86 81       	ldd	r24, Z+6	; 0x06
    1dec:	97 81       	ldd	r25, Z+7	; 0x07
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <vfprintf+0x3ba>
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	9f ef       	ldi	r25, 0xFF	; 255
    1df4:	2b 96       	adiw	r28, 0x0b	; 11
    1df6:	e2 e1       	ldi	r30, 0x12	; 18
    1df8:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__epilogue_restores__>

00001dfc <strnlen_P>:
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	05 90       	lpm	r0, Z+
    1e00:	61 50       	subi	r22, 0x01	; 1
    1e02:	70 40       	sbci	r23, 0x00	; 0
    1e04:	01 10       	cpse	r0, r1
    1e06:	d8 f7       	brcc	.-10     	; 0x1dfe <strnlen_P+0x2>
    1e08:	80 95       	com	r24
    1e0a:	90 95       	com	r25
    1e0c:	8e 0f       	add	r24, r30
    1e0e:	9f 1f       	adc	r25, r31
    1e10:	08 95       	ret

00001e12 <strnlen>:
    1e12:	fc 01       	movw	r30, r24
    1e14:	61 50       	subi	r22, 0x01	; 1
    1e16:	70 40       	sbci	r23, 0x00	; 0
    1e18:	01 90       	ld	r0, Z+
    1e1a:	01 10       	cpse	r0, r1
    1e1c:	d8 f7       	brcc	.-10     	; 0x1e14 <strnlen+0x2>
    1e1e:	80 95       	com	r24
    1e20:	90 95       	com	r25
    1e22:	8e 0f       	add	r24, r30
    1e24:	9f 1f       	adc	r25, r31
    1e26:	08 95       	ret

00001e28 <fputc>:
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	fb 01       	movw	r30, r22
    1e32:	23 81       	ldd	r18, Z+3	; 0x03
    1e34:	21 fd       	sbrc	r18, 1
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <fputc+0x16>
    1e38:	8f ef       	ldi	r24, 0xFF	; 255
    1e3a:	9f ef       	ldi	r25, 0xFF	; 255
    1e3c:	2c c0       	rjmp	.+88     	; 0x1e96 <fputc+0x6e>
    1e3e:	22 ff       	sbrs	r18, 2
    1e40:	16 c0       	rjmp	.+44     	; 0x1e6e <fputc+0x46>
    1e42:	46 81       	ldd	r20, Z+6	; 0x06
    1e44:	57 81       	ldd	r21, Z+7	; 0x07
    1e46:	24 81       	ldd	r18, Z+4	; 0x04
    1e48:	35 81       	ldd	r19, Z+5	; 0x05
    1e4a:	42 17       	cp	r20, r18
    1e4c:	53 07       	cpc	r21, r19
    1e4e:	44 f4       	brge	.+16     	; 0x1e60 <fputc+0x38>
    1e50:	a0 81       	ld	r26, Z
    1e52:	b1 81       	ldd	r27, Z+1	; 0x01
    1e54:	9d 01       	movw	r18, r26
    1e56:	2f 5f       	subi	r18, 0xFF	; 255
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	31 83       	std	Z+1, r19	; 0x01
    1e5c:	20 83       	st	Z, r18
    1e5e:	8c 93       	st	X, r24
    1e60:	26 81       	ldd	r18, Z+6	; 0x06
    1e62:	37 81       	ldd	r19, Z+7	; 0x07
    1e64:	2f 5f       	subi	r18, 0xFF	; 255
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
    1e68:	37 83       	std	Z+7, r19	; 0x07
    1e6a:	26 83       	std	Z+6, r18	; 0x06
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <fputc+0x6e>
    1e6e:	8b 01       	movw	r16, r22
    1e70:	ec 01       	movw	r28, r24
    1e72:	fb 01       	movw	r30, r22
    1e74:	00 84       	ldd	r0, Z+8	; 0x08
    1e76:	f1 85       	ldd	r31, Z+9	; 0x09
    1e78:	e0 2d       	mov	r30, r0
    1e7a:	09 95       	icall
    1e7c:	89 2b       	or	r24, r25
    1e7e:	e1 f6       	brne	.-72     	; 0x1e38 <fputc+0x10>
    1e80:	d8 01       	movw	r26, r16
    1e82:	16 96       	adiw	r26, 0x06	; 6
    1e84:	8d 91       	ld	r24, X+
    1e86:	9c 91       	ld	r25, X
    1e88:	17 97       	sbiw	r26, 0x07	; 7
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	17 96       	adiw	r26, 0x07	; 7
    1e8e:	9c 93       	st	X, r25
    1e90:	8e 93       	st	-X, r24
    1e92:	16 97       	sbiw	r26, 0x06	; 6
    1e94:	ce 01       	movw	r24, r28
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	08 95       	ret

00001ea0 <__ultoa_invert>:
    1ea0:	fa 01       	movw	r30, r20
    1ea2:	aa 27       	eor	r26, r26
    1ea4:	28 30       	cpi	r18, 0x08	; 8
    1ea6:	51 f1       	breq	.+84     	; 0x1efc <__ultoa_invert+0x5c>
    1ea8:	20 31       	cpi	r18, 0x10	; 16
    1eaa:	81 f1       	breq	.+96     	; 0x1f0c <__ultoa_invert+0x6c>
    1eac:	e8 94       	clt
    1eae:	6f 93       	push	r22
    1eb0:	6e 7f       	andi	r22, 0xFE	; 254
    1eb2:	6e 5f       	subi	r22, 0xFE	; 254
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eba:	af 4f       	sbci	r26, 0xFF	; 255
    1ebc:	b1 e0       	ldi	r27, 0x01	; 1
    1ebe:	3e d0       	rcall	.+124    	; 0x1f3c <__ultoa_invert+0x9c>
    1ec0:	b4 e0       	ldi	r27, 0x04	; 4
    1ec2:	3c d0       	rcall	.+120    	; 0x1f3c <__ultoa_invert+0x9c>
    1ec4:	67 0f       	add	r22, r23
    1ec6:	78 1f       	adc	r23, r24
    1ec8:	89 1f       	adc	r24, r25
    1eca:	9a 1f       	adc	r25, r26
    1ecc:	a1 1d       	adc	r26, r1
    1ece:	68 0f       	add	r22, r24
    1ed0:	79 1f       	adc	r23, r25
    1ed2:	8a 1f       	adc	r24, r26
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	a1 1d       	adc	r26, r1
    1ed8:	6a 0f       	add	r22, r26
    1eda:	71 1d       	adc	r23, r1
    1edc:	81 1d       	adc	r24, r1
    1ede:	91 1d       	adc	r25, r1
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	20 d0       	rcall	.+64     	; 0x1f24 <__ultoa_invert+0x84>
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <__ultoa_invert+0x48>
    1ee6:	68 94       	set
    1ee8:	3f 91       	pop	r19
    1eea:	2a e0       	ldi	r18, 0x0A	; 10
    1eec:	26 9f       	mul	r18, r22
    1eee:	11 24       	eor	r1, r1
    1ef0:	30 19       	sub	r19, r0
    1ef2:	30 5d       	subi	r19, 0xD0	; 208
    1ef4:	31 93       	st	Z+, r19
    1ef6:	de f6       	brtc	.-74     	; 0x1eae <__ultoa_invert+0xe>
    1ef8:	cf 01       	movw	r24, r30
    1efa:	08 95       	ret
    1efc:	46 2f       	mov	r20, r22
    1efe:	47 70       	andi	r20, 0x07	; 7
    1f00:	40 5d       	subi	r20, 0xD0	; 208
    1f02:	41 93       	st	Z+, r20
    1f04:	b3 e0       	ldi	r27, 0x03	; 3
    1f06:	0f d0       	rcall	.+30     	; 0x1f26 <__ultoa_invert+0x86>
    1f08:	c9 f7       	brne	.-14     	; 0x1efc <__ultoa_invert+0x5c>
    1f0a:	f6 cf       	rjmp	.-20     	; 0x1ef8 <__ultoa_invert+0x58>
    1f0c:	46 2f       	mov	r20, r22
    1f0e:	4f 70       	andi	r20, 0x0F	; 15
    1f10:	40 5d       	subi	r20, 0xD0	; 208
    1f12:	4a 33       	cpi	r20, 0x3A	; 58
    1f14:	18 f0       	brcs	.+6      	; 0x1f1c <__ultoa_invert+0x7c>
    1f16:	49 5d       	subi	r20, 0xD9	; 217
    1f18:	31 fd       	sbrc	r19, 1
    1f1a:	40 52       	subi	r20, 0x20	; 32
    1f1c:	41 93       	st	Z+, r20
    1f1e:	02 d0       	rcall	.+4      	; 0x1f24 <__ultoa_invert+0x84>
    1f20:	a9 f7       	brne	.-22     	; 0x1f0c <__ultoa_invert+0x6c>
    1f22:	ea cf       	rjmp	.-44     	; 0x1ef8 <__ultoa_invert+0x58>
    1f24:	b4 e0       	ldi	r27, 0x04	; 4
    1f26:	a6 95       	lsr	r26
    1f28:	97 95       	ror	r25
    1f2a:	87 95       	ror	r24
    1f2c:	77 95       	ror	r23
    1f2e:	67 95       	ror	r22
    1f30:	ba 95       	dec	r27
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__ultoa_invert+0x86>
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	61 05       	cpc	r22, r1
    1f38:	71 05       	cpc	r23, r1
    1f3a:	08 95       	ret
    1f3c:	9b 01       	movw	r18, r22
    1f3e:	ac 01       	movw	r20, r24
    1f40:	0a 2e       	mov	r0, r26
    1f42:	06 94       	lsr	r0
    1f44:	57 95       	ror	r21
    1f46:	47 95       	ror	r20
    1f48:	37 95       	ror	r19
    1f4a:	27 95       	ror	r18
    1f4c:	ba 95       	dec	r27
    1f4e:	c9 f7       	brne	.-14     	; 0x1f42 <__ultoa_invert+0xa2>
    1f50:	62 0f       	add	r22, r18
    1f52:	73 1f       	adc	r23, r19
    1f54:	84 1f       	adc	r24, r20
    1f56:	95 1f       	adc	r25, r21
    1f58:	a0 1d       	adc	r26, r0
    1f5a:	08 95       	ret

00001f5c <__prologue_saves__>:
    1f5c:	2f 92       	push	r2
    1f5e:	3f 92       	push	r3
    1f60:	4f 92       	push	r4
    1f62:	5f 92       	push	r5
    1f64:	6f 92       	push	r6
    1f66:	7f 92       	push	r7
    1f68:	8f 92       	push	r8
    1f6a:	9f 92       	push	r9
    1f6c:	af 92       	push	r10
    1f6e:	bf 92       	push	r11
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	ca 1b       	sub	r28, r26
    1f86:	db 0b       	sbc	r29, r27
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	09 94       	ijmp

00001f94 <__epilogue_restores__>:
    1f94:	2a 88       	ldd	r2, Y+18	; 0x12
    1f96:	39 88       	ldd	r3, Y+17	; 0x11
    1f98:	48 88       	ldd	r4, Y+16	; 0x10
    1f9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fa0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fa2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fa4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fa6:	b9 84       	ldd	r11, Y+9	; 0x09
    1fa8:	c8 84       	ldd	r12, Y+8	; 0x08
    1faa:	df 80       	ldd	r13, Y+7	; 0x07
    1fac:	ee 80       	ldd	r14, Y+6	; 0x06
    1fae:	fd 80       	ldd	r15, Y+5	; 0x05
    1fb0:	0c 81       	ldd	r16, Y+4	; 0x04
    1fb2:	1b 81       	ldd	r17, Y+3	; 0x03
    1fb4:	aa 81       	ldd	r26, Y+2	; 0x02
    1fb6:	b9 81       	ldd	r27, Y+1	; 0x01
    1fb8:	ce 0f       	add	r28, r30
    1fba:	d1 1d       	adc	r29, r1
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	ed 01       	movw	r28, r26
    1fc8:	08 95       	ret

00001fca <_exit>:
    1fca:	f8 94       	cli

00001fcc <__stop_program>:
    1fcc:	ff cf       	rjmp	.-2      	; 0x1fcc <__stop_program>
